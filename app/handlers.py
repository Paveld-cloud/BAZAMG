# app/handlers.py
import io
import math
import re
import asyncio
import logging
from html import escape

import pandas as pd
from telegram import Update, InputFile, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import (
    CommandHandler, MessageHandler, CallbackQueryHandler,
    ConversationHandler, ContextTypes, filters, ApplicationHandlerStop
)

# –ö–æ–Ω—Ñ–∏–≥
from app.config import (
    PAGE_SIZE, MAX_QTY,
    WELCOME_ANIMATION_URL, WELCOME_PHOTO_URL, SUPPORT_CONTACT, WELCOME_MEDIA_ID,
    ADMINS,
)

# –í–ê–ñ–ù–û: —Ä–∞–±–æ—Ç–∞–µ–º —á–µ—Ä–µ–∑ –º–æ–¥—É–ª—å, —á—Ç–æ–±—ã –≤—Å–µ–≥–¥–∞ –≤–∏–¥–µ—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
import app.data as data

logger = logging.getLogger("bot.handlers")

# ---------- –ö–Ω–æ–ø–∫–∏ ----------
def cancel_markup():
    return InlineKeyboardMarkup([[InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_action")]])

def confirm_markup():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("‚úÖ –î–∞, —Å–ø–∏—Å–∞—Ç—å", callback_data="confirm_yes"),
         InlineKeyboardButton("‚ùå –ù–µ—Ç", callback_data="confirm_no")],
        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_action")]
    ])

def more_markup():
    return InlineKeyboardMarkup([[InlineKeyboardButton("‚è≠ –ï—â—ë", callback_data="more")]])

def main_menu_markup():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üîç –ü–æ–∏—Å–∫", callback_data="menu_search")],
        [InlineKeyboardButton("üì¶ –ö–∞–∫ —Å–ø–∏—Å–∞—Ç—å –¥–µ—Ç–∞–ª—å", callback_data="menu_issue_help")],
        [InlineKeyboardButton("üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data="menu_contact")],
    ])

# ---------- –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ HTML ----------
async def _safe_send_html_message(bot, chat_id: int, text: str, **kwargs):
    try:
        return await bot.send_message(chat_id=chat_id, text=text, parse_mode="HTML", **kwargs)
    except Exception as e:
        logger.warning(f"HTML message parse failed, fallback to plain: {e}")
        no_tags = re.sub(r"</?(b|i|code)>", "", text)
        kwargs.pop("parse_mode", None)
        return await bot.send_message(chat_id=chat_id, text=no_tags, **kwargs)

# --------------------- –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: –¥–æ–ø—É—Å–∫–∏ -----------------
from time import time
_users_lock = asyncio.Lock()
_last_users_at = 0.0
async def ensure_users_async(force: bool = False):
    global _last_users_at
    async with _users_lock:
        if not force and (time() - _last_users_at) < data.USERS_TTL:
            return
        allowed, admins, blocked = await asyncio.to_thread(data.load_users_from_sheet)
        data.SHEET_ALLOWED.clear(); data.SHEET_ALLOWED.update(allowed)
        data.SHEET_ADMINS.clear(); data.SHEET_ADMINS.update(admins)
        data.SHEET_BLOCKED.clear(); data.SHEET_BLOCKED.update(blocked)
        _last_users_at = time()

def ensure_users(force: bool = False):(force: bool = False):
    asyncio.create_task(ensure_users_async(force=True))

def is_admin(uid: int) -> bool:
    ensure_users()
    return uid in data.SHEET_ADMINS or uid in ADMINS

def is_allowed(uid: int) -> bool:
    ensure_users()
    if uid in data.SHEET_BLOCKED:
        return False
    if data.SHEET_ALLOWED:
        return (uid in data.SHEET_ALLOWED) or (uid in data.SHEET_ADMINS) or (uid in ADMINS)
    return True

# --------------------- –ì–≤–∞—Ä–¥—ã -----------------
async def guard_msg(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    if user and not is_allowed(user.id):
        try:
            await update.effective_message.reply_text("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
        except Exception:
            pass
        raise ApplicationHandlerStop

async def guard_cb(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    if user and not is_allowed(user.id):
        try:
            await update.callback_query.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.", show_alert=True)
        except Exception:
            pass
        raise ApplicationHandlerStop

# --------------------- –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ -----------------
async def send_welcome_sequence(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    user = update.effective_user
    first = escape((user.first_name or "").strip() or "–∫–æ–ª–ª–µ–≥–∞")

    if WELCOME_ANIMATION_URL:
        try:
            url = WELCOME_ANIMATION_URL.strip()
            if re.search(r"\.(gif|mp4)(\?|$)", url, re.I):
                await context.bot.send_animation(chat_id=chat_id, animation=url, caption=f"‚öôÔ∏è –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {first}!")
            else:
                await context.bot.send_photo(chat_id=chat_id, photo=url)
            await asyncio.sleep(0.3)
        except Exception as e:
            logger.warning(f"Welcome animation failed: {e}")

    sent_media = False
    if WELCOME_MEDIA_ID:
        try:
            await context.bot.send_photo(chat_id=chat_id, photo=WELCOME_MEDIA_ID, disable_notification=True)
            sent_media = True
            await asyncio.sleep(0.1)
        except Exception as e:
            logger.warning(f"Welcome photo by file_id failed: {e}")

    if not sent_media and WELCOME_PHOTO_URL:
        try:
            await context.bot.send_photo(chat_id=chat_id, photo=WELCOME_PHOTO_URL, disable_notification=True)
            sent_media = True
            await asyncio.sleep(0.1)
        except Exception as e:
            logger.warning(f"Welcome photo by URL/file_id failed: {e}")

    card_html = (
        f"‚öôÔ∏è <b>–ü—Ä–∏–≤–µ—Ç, {first}!</b>\n"
        f"<b>–ë–æ—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏ —Å–ø–∏—Å–∞–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π</b>\n"
        f"‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
        f"‚Ä¢ –í–≤–µ–¥–∏—Ç–µ <code>–Ω–∞–∑–≤–∞–Ω–∏–µ</code>, <code>–∫–æ–¥</code> –∏–ª–∏ <code>–º–æ–¥–µ–ª—å</code>\n"
        f"‚Ä¢ –û—Ç–∫—Ä–æ–π—Ç–µ –∫–∞—Ä—Ç–æ—á–∫—É –∏ –Ω–∞–∂–º–∏—Ç–µ ¬´üì¶ –í–∑—è—Ç—å –¥–µ—Ç–∞–ª—å¬ª\n"
        f"‚Ä¢ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Å–ø–∏—Å–∞–Ω–∏–µ ‚Äî –∏ –≥–æ—Ç–æ–≤–æ\n\n"
        f"–ü—Ä–∏–º–µ—Ä: <code>PI 8808 DRG 500</code>\n"
        f"–£–¥–∞—á–Ω–æ–π —Ä–∞–±–æ—Ç—ã! üöÄ"
    )
    await _safe_send_html_message(context.bot, chat_id, card_html, reply_markup=main_menu_markup())

# --------------------- –§–æ—Ç–æ –∫–∞—Ä—Ç–æ—á–∫–∏ -----------------
async def send_row_with_image(update: Update, row: dict, text: str):
    code = str(row.get("–∫–æ–¥", "")).strip().lower()
    kb = InlineKeyboardMarkup([[InlineKeyboardButton("üì¶ –í–∑—è—Ç—å –¥–µ—Ç–∞–ª—å", callback_data=f"issue:{code}")]])

    url_raw = await data.find_image_by_code_async(code)
    if url_raw:
        url = await data.resolve_image_url_async(url_raw)
        if url:
            try:
                await update.message.reply_photo(photo=url, caption=text, reply_markup=kb)
                return
            except Exception as e:
                logger.warning(f"URL —Ñ–æ—Ç–æ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª ({url}): {e}")
    await update.message.reply_text(text, reply_markup=kb)

async def send_row_with_image_bot(bot, chat_id: int, row: dict, text: str):
    code = str(row.get("–∫–æ–¥", "")).strip().lower()
    kb = InlineKeyboardMarkup([[InlineKeyboardButton("üì¶ –í–∑—è—Ç—å –¥–µ—Ç–∞–ª—å", callback_data=f"issue:{code}")]])

    url_raw = await data.find_image_by_code_async(code)
    if url_raw:
        url = await data.resolve_image_url_async(url_raw)
        if url:
            try:
                await bot.send_photo(chat_id=chat_id, photo=url, caption=text, reply_markup=kb)
                return
            except Exception as e:
                logger.warning(f"URL —Ñ–æ—Ç–æ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª ({url}): {e}")
    await bot.send_message(chat_id=chat_id, text=text, reply_markup=kb)

# --------------------- –ú–µ–Ω—é (callbacks) -----------------
async def menu_search_cb(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()
    msg = "üîç –í–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å: <i>–Ω–∞–∑–≤–∞–Ω–∏–µ</i>/<i>–º–æ–¥–µ–ª—å</i>/<i>–∫–æ–¥</i>.\n–ü—Ä–∏–º–µ—Ä: <code>PI 8808 DRG 500</code>"
    await _safe_send_html_message(context.bot, q.message.chat_id, msg)

async def menu_issue_help_cb(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()
    msg = (
        "<b>–ö–∞–∫ —Å–ø–∏—Å–∞—Ç—å –¥–µ—Ç–∞–ª—å</b>:\n"
        "1) –í—ã–ø–æ–ª–Ω–∏—Ç–µ –ø–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é/–∫–æ–¥—É.\n"
        "2) –í –∫–∞—Ä—Ç–æ—á–∫–µ –Ω–∞–∂–º–∏—Ç–µ ¬´üì¶ –í–∑—è—Ç—å –¥–µ—Ç–∞–ª—å¬ª.\n"
        "3) –£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π.\n"
        "4) –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Å–ø–∏—Å–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–æ–π ¬´–î–∞¬ª."
    )
    await _safe_send_html_message(context.bot, q.message.chat_id, msg)

async def menu_contact_cb(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()
    await q.message.reply_text(f"{SUPPORT_CONTACT}")

# --------------------- –ö–æ–º–∞–Ω–¥—ã -----------------
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    data.issue_state.pop(uid, None)
    data.user_state.pop(uid, None)
    await send_welcome_sequence(update, context)
    if update.message:
        await asyncio.sleep(0.2)
        cmds_html = (
            "<b>–ö–æ–º–∞–Ω–¥—ã</b>:\n"
            "‚Ä¢ <code>/help</code> ‚Äî –ø–æ–º–æ—â—å\n"
            "‚Ä¢ <code>/more</code> ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –µ—â—ë\n"
            "‚Ä¢ <code>/export</code> ‚Äî –≤—ã–≥—Ä—É–∑–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ (XLSX/CSV)\n"
            "‚Ä¢ <code>/cancel</code> ‚Äî –æ—Ç–º–µ–Ω–∏—Ç—å —Å–ø–∏—Å–∞–Ω–∏–µ\n"
            "‚Ä¢ <code>/reload</code> ‚Äî –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω)\n"
        )
        await _safe_send_html_message(context.bot, update.effective_chat.id, cmds_html)

async def help_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    msg = (
        "<b>–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è</b>:\n"
        "1) –í—ã–ø–æ–ª–Ω–∏—Ç–µ –ø–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é/–º–æ–¥–µ–ª–∏/–∫–æ–¥—É.\n"
        "2) –í –∫–∞—Ä—Ç–æ—á–∫–µ –Ω–∞–∂–º–∏—Ç–µ ¬´üì¶ –í–∑—è—Ç—å –¥–µ—Ç–∞–ª—å¬ª ‚Äî –±–æ—Ç —Å–ø—Ä–æ—Å–∏—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π.\n"
        "3) –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Å–ø–∏—Å–∞–Ω–∏–µ (–î–∞/–ù–µ—Ç).\n"
        "<i>–£ –≤–∞—Å –≤—Å—ë –ø–æ–ª—É—á–∏—Ç—Å—è!</i>"
    )
    await _safe_send_html_message(context.bot, update.effective_chat.id, msg)

async def reload_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    if not is_admin(uid):
        return await update.message.reply_text("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
    data.ensure_fresh_data(force=True)
    ensure_users(force=True)
    await update.message.reply_text("‚úÖ –î–∞–Ω–Ω—ã–µ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω—ã (–≤ —Ñ–æ–Ω–µ).")

async def cancel_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    if data.issue_state.pop(uid, None):
        await update.message.reply_text("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è —Å–ø–∏—Å–∞–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    else:
        await update.message.reply_text("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏.")

async def export_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    st = data.user_state.get(uid, {})
    results = st.get("results")
    if results is None or results.empty:
        return await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –ø–æ–∏—Å–∫.")
    import datetime
    timestamp = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
    try:
        buf = await asyncio.to_thread(data._df_to_xlsx, results, f"export_{timestamp}.xlsx")
        await update.message.reply_document(InputFile(buf, filename=f"export_{timestamp}.xlsx"))
    except Exception as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å XLSX (fallback CSV): {e}")
        csv = results.to_csv(index=False, encoding="utf-8-sig")
        await update.message.reply_document(
            InputFile(io.BytesIO(csv.encode("utf-8-sig")), filename=f"export_{timestamp}.csv")
        )

# --------------------- –ü–æ–∏—Å–∫ -----------------
async def send_page(update: Update, uid: int):
    st = data.user_state.get(uid, {})
    results = st.get("results")
    page = st.get("page", 0)

    total = len(results)
    if total == 0:
        return await update.message.reply_text("–†–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –±–æ–ª—å—à–µ –Ω–µ—Ç.")
    pages = max(1, math.ceil(total / PAGE_SIZE))
    if page >= pages:
        st["page"] = pages - 1
        return await update.message.reply_text("–ë–æ–ª—å—à–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–µ—Ç.")

    start = page * PAGE_SIZE
    end = min(start + PAGE_SIZE, total)

    await update.message.reply_text(f"–°—Ç—Ä. {page+1}/{pages}. –ü–æ–∫–∞–∑—ã–≤–∞—é {start + 1}‚Äì{end} –∏–∑ {total}.")
    for _, row in results.iloc[start:end].iterrows():
        await send_row_with_image(update, row.to_dict(), data.format_row(row.to_dict()))
    if end < total:
        await update.message.reply_text("–ü–æ–∫–∞–∑–∞—Ç—å –µ—â—ë?", reply_markup=more_markup())

async def send_page_via_bot(bot, chat_id: int, uid: int):
    st = data.user_state.get(uid, {})
    results = st.get("results")
    page = st.get("page", 0)
    total = len(results)
    if total == 0:
        return await bot.send_message(chat_id=chat_id, text="–†–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –±–æ–ª—å—à–µ –Ω–µ—Ç.")
    pages = max(1, math.ceil(total / PAGE_SIZE))
    if page >= pages:
        st["page"] = pages - 1
        return await bot.send_message(chat_id=chat_id, text="–ë–æ–ª—å—à–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–µ—Ç.")
    start = page * PAGE_SIZE
    end = min(start + PAGE_SIZE, total)
    await bot.send_message(chat_id=chat_id, text=f"–°—Ç—Ä. {page+1}/{pages}. –ü–æ–∫–∞–∑—ã–≤–∞—é {start + 1}‚Äì{end} –∏–∑ {total}.")
    chunk = results.iloc[start:end]
    for _, row in chunk.iterrows():
        await send_row_with_image_bot(bot, chat_id, row.to_dict(), data.format_row(row.to_dict()))
    if end < total:
        await bot.send_message(chat_id=chat_id, text="–ü–æ–∫–∞–∑–∞—Ç—å –µ—â—ë?", reply_markup=more_markup())

async def search_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message is None:
        return

    if context.chat_data.pop("suppress_next_search", False):
        return

    uid = update.effective_user.id
    st_issue = data.issue_state.get(uid)
    if st_issue:
        if "quantity" not in st_issue:
            return await update.message.reply_text(
                "–í—ã –≤–≤–æ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ ¬´–û—Ç–º–µ–Ω–∏—Ç—å¬ª.",
                reply_markup=cancel_markup()
            )
        if st_issue.get("await_comment"):
            return await update.message.reply_text(
                "–í—ã –≤–≤–æ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π. –ù–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç –∏–ª–∏ ¬´-¬ª, –ª–∏–±–æ –Ω–∞–∂–º–∏—Ç–µ ¬´–û—Ç–º–µ–Ω–∏—Ç—å¬ª.",
                reply_markup=cancel_markup()
            )

    q = update.message.text.strip()
    if not q:
        return await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å.")
    tokens = data.normalize(q).split()
    if not tokens:
        return await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –±–æ–ª–µ–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å.")
    q_squash = data.squash(q)

    if data.df is None:
        await data.ensure_fresh_data_async(force=True)
        if data.df is None:
            return await update.message.reply_text("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö.")

    df_ = data.df
    # –°–Ω–∞—á–∞–ª–∞ ‚Äî –±—ã—Å—Ç—Ä—ã–π –∏–Ω–¥–µ–∫—Å
    matched_indices = data.match_row_by_index(tokens)

    # –§–æ–ª–±—ç–∫: contains –ø–æ –ø–æ–ª—è–º
    if not matched_indices:
        mask_any = pd.Series(False, index=df_.index)
        for col in ["—Ç–∏–ø", "–Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ", "–∫–æ–¥", "oem", "–∏–∑–≥–æ—Ç–æ–≤–∏—Ç–µ–ª—å"]:
            series = data._safe_col(df_, col)
            if series is None:
                continue
            field_mask = pd.Series(True, index=df_.index)
            for t in tokens:
                if t:
                    field_mask &= series.str.contains(re.escape(t), na=False)
            mask_any |= field_mask
        matched_indices = set(df_.index[mask_any])

    # –ï—â—ë —Ñ–æ–ª–±—ç–∫: –ø–æ "—Å–∫–ª–µ–µ–Ω–Ω–æ–º—É" –∑–Ω–∞—á–µ–Ω–∏—é
    if not matched_indices and q_squash:
        mask_any = pd.Series(False, index=df_.index)
        for col in ["—Ç–∏–ø", "–Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ", "–∫–æ–¥", "oem", "–∏–∑–≥–æ—Ç–æ–≤–∏—Ç–µ–ª—å"]:
            series = data._safe_col(df_, col)
            if series is None:
                continue
            series_sq = series.str.replace(r'[\W_]+', '', regex=True)
            mask_any |= series_sq.str.contains(re.escape(q_squash), na=False)
        matched_indices = set(df_.index[mask_any])

    if not matched_indices:
        return await update.message.reply_text(f"–ü–æ –∑–∞–ø—Ä–æ—Å—É ¬´{q}¬ª –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")

    idx_list = list(matched_indices)
    results_df = df_.loc[idx_list].copy()

    scores = []
    for _, r in results_df.iterrows():
        scores.append(data._relevance_score(r.to_dict(), tokens, q_squash))
    results_df["__score"] = scores

    if "–∫–æ–¥" in results_df.columns:
        results_df = results_df.sort_values(
            by=["__score", "–∫–æ–¥"],
            ascending=[False, True],
            key=lambda s: s if s.name != "–∫–æ–¥" else s.astype(str).str.len()
        )
    else:
        results_df = results_df.sort_values(by=["__score"], ascending=False)
    results_df = results_df.drop(columns="__score")

    st = data.user_state.setdefault(uid, {})
    st["query"] = q
    st["results"] = results_df
    st["page"] = 0

    await send_page(update, uid)

async def more_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    st = data.user_state.get(uid, {})
    results = st.get("results")
    if results is None or results.empty:
        return await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –ø–æ–∏—Å–∫.")
    st["page"] = st.get("page", 0) + 1
    await send_page(update, uid)

# ------------------ –°–ø–∏—Å–∞–Ω–∏–µ -----------------
async def on_issue_click(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()

    uid = q.from_user.id
    code = q.data.split(":", 1)[1].strip().lower()

    found = None
    if data.df is not None and "–∫–æ–¥" in data.df.columns:
        hit = data.df[data.df["–∫–æ–¥"].astype(str).str.lower() == code]
        if not hit.empty:
            found = hit.iloc[0].to_dict()

    if not found:
        return await q.edit_message_text("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –¥–µ—Ç–∞–ª—å –ø–æ –∫–æ–¥—É. –í—ã–ø–æ–ª–Ω–∏—Ç–µ –ø–æ–∏—Å–∫ –∑–∞–Ω–æ–≤–æ.")

    data.issue_state[uid] = {"part": found}
    await q.message.reply_text("–°–∫–æ–ª—å–∫–æ —Å–ø–∏—Å–∞—Ç—å? –£–∫–∞–∂–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1 –∏–ª–∏ 2.5).", reply_markup=cancel_markup())
    return data.ASK_QUANTITY

async def handle_quantity(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.chat_data["suppress_next_search"] = True

    uid = update.effective_user.id
    text = (update.message.text or "").strip().replace(",", ".")
    try:
        qty = float(text)
        if not math.isfinite(qty) or qty <= 0 or qty > MAX_QTY:
            raise ValueError
        qty = float(f"{qty:.3f}")
    except Exception:
        return await update.message.reply_text(
            f"–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ > 0 –∏ ‚â§ {MAX_QTY}. –ü—Ä–∏–º–µ—Ä: 1 –∏–ª–∏ 2.5",
            reply_markup=cancel_markup()
        )

    st = data.issue_state.get(uid)
    if not st or "part" not in st:
        return await update.message.reply_text("–°–ø–∏—Å–∞–Ω–∏–µ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ ‚Äî –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ –∏–∑ –∫–∞—Ä—Ç–æ—á–∫–∏.")

    st["quantity"] = qty
    st["await_comment"] = True
    await update.message.reply_text("–î–æ–±–∞–≤—å—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (–Ω–∞–ø—Ä–∏–º–µ—Ä: –õ–∏–Ω–∏—è —Å–±–æ—Ä–∫–∏ CSS OP-1100).", reply_markup=cancel_markup())
    return data.ASK_COMMENT

async def handle_comment(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.chat_data["suppress_next_search"] = True

    uid = update.effective_user.id
    comment = (update.message.text or "").strip()
    st = data.issue_state.get(uid)
    if not st:
        return await update.message.reply_text("–°–ø–∏—Å–∞–Ω–∏–µ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ –∏–∑ –∫–∞—Ä—Ç–æ—á–∫–∏.")

    part = st.get("part")
    qty = st.get("quantity")
    if part is None or qty is None:
        data.issue_state.pop(uid, None)
        return await update.message.reply_text("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")

    st["comment"] = "" if comment == "-" else comment
    st["await_comment"] = False

    text = (
        "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–ø–∏—Å–∞—Ç—å –¥–µ—Ç–∞–ª—å?\n\n"
        f"üî¢ –ö–æ–¥: {data.val(part, '–∫–æ–¥')}\n"
        f"üì¶ –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ: {data.val(part, '–Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ')}\n"
        f"üì¶ –ö–æ–ª-–≤–æ: {qty}\n"
        f"üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {st['comment'] or '‚Äî'}"
    )
    await update.message.reply_text(text, reply_markup=confirm_markup())
    return data.ASK_CONFIRM

async def save_issue_to_sheet(bot, user, part: dict, quantity, comment: str):
    # –ó–∞–ø–∏—Å—å –≤ '–ò—Å—Ç–æ—Ä–∏—è' –±–µ–∑ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ event loop
    from app.config import SPREADSHEET_URL
    import gspread

    def _write():
        client = data.get_gs_client()
        sh = client.open_by_url(SPREADSHEET_URL)
        try:
            ws = sh.worksheet("–ò—Å—Ç–æ—Ä–∏—è")
        except gspread.WorksheetNotFound:
            ws = sh.add_worksheet(title="–ò—Å—Ç–æ—Ä–∏—è", rows=1000, cols=12)
            ws.append_row(["–î–∞—Ç–∞", "ID", "–ò–º—è", "–¢–∏–ø", "–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ", "–ö–æ–¥", "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ", "–ö–æ–º–µ–Ω—Ç–∞—Ä–∏–π"])

        headers_raw = ws.row_values(1)
        headers = [h.strip() for h in headers_raw]
        norm = [h.lower() for h in headers]

        full_name = f"{(user.first_name or '').strip()} {(user.last_name or '').strip()}".strip()
        display_name = full_name or (f"@{user.username}" if user.username else str(user.id))
        ts = data.now_local_str()

        values_by_key = {
            "–¥–∞—Ç–∞": ts, "timestamp": ts,
            "id": user.id, "user_id": user.id,
            "–∏–º—è": display_name, "name": display_name,
            "—Ç–∏–ø": str(part.get("—Ç–∏–ø", "")), "type": str(part.get("—Ç–∏–ø", "")),
            "–Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ": str(part.get("–Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ", "")), "name_item": str(part.get("–Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ", "")),
            "–∫–æ–¥": str(part.get("–∫–æ–¥", "")), "code": str(part.get("–∫–æ–¥", "")),
            "Êï∞Èáè": str(quantity), "–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ": str(quantity), "qty": str(quantity),
            "–∫–æ–º–µ–Ω—Ç–∞—Ä–∏–π": comment or "", "–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π": comment or "", "comment": comment or "",
        }
        row = [values_by_key.get(hn, "") for hn in norm]
        ws.append_row(row, value_input_option="USER_ENTERED")

    await asyncio.to_thread(_write)
    logger.info("üíæ –°–ø–∏—Å–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∞–Ω–æ –≤ '–ò—Å—Ç–æ—Ä–∏—è'")

async def handle_confirm(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()
    uid = q.from_user.id

    if q.data == "confirm_yes":
        st = data.issue_state.get(uid)
        if not st or "part" not in st or "quantity" not in st:
            data.issue_state.pop(uid, None)
            return await q.message.reply_text("–î–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–ø–∏—Å–∞–Ω–∏—è –Ω–µ—Ç. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
        part = st["part"]
        qty = st["quantity"]
        comment = st.get("comment", "")

        await save_issue_to_sheet(context.bot, q.from_user, part, qty, comment)
        data.issue_state.pop(uid, None)

        await q.message.reply_text(
            f"‚úÖ –°–ø–∏—Å–∞–Ω–æ: {qty}\n"
            f"üî¢ –ö–æ–¥: {data.val(part, '–∫–æ–¥')}\n"
            f"üì¶ –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ: {data.val(part, '–Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ')}\n"
            f"üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {comment or '‚Äî'}"
        )
        return ConversationHandler.END

    if q.data == "confirm_no":
        data.issue_state.pop(uid, None)
        await q.message.reply_text("‚ùå –°–ø–∏—Å–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
        return ConversationHandler.END

async def cancel_action(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()
    uid = q.from_user.id
    if uid in data.issue_state:
        data.issue_state.pop(uid, None)
        await q.message.reply_text("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è —Å–ø–∏—Å–∞–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    return ConversationHandler.END

async def handle_cancel_in_dialog(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await cancel_cmd(update, context)
    return ConversationHandler.END

async def on_more_click(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()
    uid = q.from_user.id
    st = data.user_state.get(uid, {})
    results = st.get("results")
    if results is None or results.empty:
        return await q.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –ø–æ–∏—Å–∫.")
    st["page"] = st.get("page", 0) + 1
    chat_id = q.message.chat.id
    await send_page_via_bot(context.bot, chat_id, uid)

# --------------------- –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤ -----------------
def register_handlers(app):
    # –ì–≤–∞—Ä–¥—ã
    app.add_handler(MessageHandler(filters.ALL, guard_msg), group=-1)
    app.add_handler(CallbackQueryHandler(guard_cb, pattern=".*"), group=-1)

    # –ö–æ–º–∞–Ω–¥—ã
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_cmd))
    app.add_handler(CommandHandler("more", more_cmd))
    app.add_handler(CommandHandler("export", export_cmd))
    app.add_handler(CommandHandler("reload", reload_cmd))
    app.add_handler(CommandHandler("cancel", cancel_cmd))

    # –ú–µ–Ω—é –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
    app.add_handler(CallbackQueryHandler(menu_search_cb, pattern=r"^menu_search$"))
    app.add_handler(CallbackQueryHandler(menu_issue_help_cb, pattern=r"^menu_issue_help$"))
    app.add_handler(CallbackQueryHandler(menu_contact_cb, pattern=r"^menu_contact$"))

    # –ü–∞–≥–∏–Ω–∞—Ü–∏—è –∏ –æ—Ç–º–µ–Ω–∞
    app.add_handler(CallbackQueryHandler(on_more_click, pattern=r"^more$"))
    app.add_handler(CallbackQueryHandler(cancel_action, pattern=r"^cancel_action$"))

    # –î–∏–∞–ª–æ–≥ —Å–ø–∏—Å–∞–Ω–∏—è
    conv = ConversationHandler(
        entry_points=[CallbackQueryHandler(on_issue_click, pattern=r"^issue:")],
        states={
            data.ASK_QUANTITY: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_quantity),
                CallbackQueryHandler(cancel_action, pattern=r"^cancel_action$")
            ],
            data.ASK_COMMENT: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_comment),
                CallbackQueryHandler(cancel_action, pattern=r"^cancel_action$")
            ],
            data.ASK_CONFIRM: [
                CallbackQueryHandler(handle_confirm, pattern=r"^confirm_(yes|no)$"),
                CallbackQueryHandler(cancel_action, pattern=r"^cancel_action$")
            ],
        },
        fallbacks=[CommandHandler("cancel", handle_cancel_in_dialog)],
        allow_reentry=True,
        per_chat=True,
        per_user=True,
        per_message=False,
    )
    app.add_handler(conv)

    # –ü–æ–∏—Å–∫
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, search_text), group=1)
