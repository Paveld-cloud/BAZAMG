# handlers.py
import logging
import re
from datetime import datetime
from zoneinfo import ZoneInfo
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import ContextTypes, ConversationHandler

from config import TIMEZONE
from data import (
    search_parts,
    save_issue_to_history,
    get_user_by_id,
)

# ===== –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ =====
logger = logging.getLogger(__name__)

# ===== –≠—Ç–∞–ø—ã –¥–∏–∞–ª–æ–≥–∞ —Å–ø–∏—Å–∞–Ω–∏—è =====
ASK_QUANTITY, ASK_COMMENT, ASK_CONFIRM = range(3)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_state = {}   # user_id: { "part": {...}, "quantity": int, "comment": str }

# ===== –£—Ç–∏–ª–∏—Ç—ã =====
def normalize_text(text: str) -> str:
    """–ü—Ä–∏–≤–æ–¥–∏–º —Ç–µ–∫—Å—Ç –∫ –µ–¥–∏–Ω–æ–º—É –≤–∏–¥—É –¥–ª—è –ø–æ–∏—Å–∫–∞"""
    return re.sub(r'[^a-zA-Z0-9–∞-—è–ê-–Ø—ë–Å]', '', text).lower()

# ===== –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ =====
async def handle_search(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∏—Å–∫ –¥–µ—Ç–∞–ª–µ–π –ø–æ —Å–æ–æ–±—â–µ–Ω–∏—é"""
    user = update.effective_user
    query = update.message.text.strip()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø
    if not get_user_by_id(user.id):
        await update.message.reply_text("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É.")
        return

    results = search_parts(query)
    if not results:
        await update.message.reply_text("‚ùå –î–µ—Ç–∞–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        return

    for part in results:
        text = (
            f"üîé *{part.get('Description', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}*\n"
            f"–ö–æ–¥: `{part.get('Ref Des', '-')}`\n"
            f"–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å: {part.get('MFR_MGD_1', '-')}\n"
            f"MPN: {part.get('MPN_MGD_1', '-')}\n"
            f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞ —Å—Ç–∞–Ω—Ü–∏–∏: {part.get('Qty per station', '-')}"
        )

        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("üì¶ –í–∑—è—Ç—å –¥–µ—Ç–∞–ª—å", callback_data=f"take|{part.get('Ref Des', '')}")]
        ])

        await update.message.reply_photo(
            photo=part.get("image") or "https://via.placeholder.com/300x200.png?text=No+Image",
            caption=text,
            parse_mode="Markdown",
            reply_markup=keyboard
        )

async def handle_take_detail(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É '–í–∑—è—Ç—å –¥–µ—Ç–∞–ª—å'"""
    query = update.callback_query
    await query.answer()

    user = update.effective_user
    _, ref_des = query.data.split("|", 1)

    part = context.bot_data.get("parts_index", {}).get(ref_des)
    if not part:
        await query.edit_message_caption(caption="‚ùå –û—à–∏–±–∫–∞: –¥–µ—Ç–∞–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    user_state[user.id] = {"part": part}
    await query.message.reply_text("‚úç –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:")
    return ASK_QUANTITY

async def handle_quantity(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ"""
    user = update.effective_user
    text = update.message.text.strip()

    if not text.isdigit() or int(text) <= 0:
        await update.message.reply_text("‚ö† –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.")
        return ASK_QUANTITY

    user_state[user.id]["quantity"] = int(text)
    await update.message.reply_text("üìù –í–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (–Ω–∞–ø—Ä–∏–º–µ—Ä: –ø—Ä–∏—á–∏–Ω–∞ —Å–ø–∏—Å–∞–Ω–∏—è):")
    return ASK_COMMENT

async def handle_comment(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–ª—É—á–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∏ —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ"""
    user = update.effective_user
    comment = update.message.text.strip()

    user_state[user.id]["comment"] = comment

    part = user_state[user.id]["part"]
    qty = user_state[user.id]["quantity"]

    text = (
        f"üìã –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Å–ø–∏—Å–∞–Ω–∏–µ:\n\n"
        f"üîé {part.get('Description', '-')}\n"
        f"–ö–æ–¥: {part.get('Ref Des', '-')}\n"
        f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {qty}\n"
        f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {comment}"
    )

    keyboard = InlineKeyboardMarkup([
        [
            InlineKeyboardButton("‚úÖ –î–∞", callback_data="confirm_yes"),
            InlineKeyboardButton("‚ùå –ù–µ—Ç", callback_data="confirm_no")
        ]
    ])

    await update.message.reply_text(text, reply_markup=keyboard)
    return ASK_CONFIRM

async def handle_confirm(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–ø–∏—Å–∞–Ω–∏—è"""
    query = update.callback_query
    await query.answer()
    user = update.effective_user

    if query.data == "confirm_yes":
        state = user_state.get(user.id)
        if not state:
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
            return ConversationHandler.END

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
        save_issue_to_history(
            user_id=user.id,
            username=user.username,
            part=state["part"],
            quantity=state["quantity"],
            comment=state["comment"],
            date=datetime.now(ZoneInfo(TIMEZONE)).strftime("%Y-%m-%d %H:%M:%S")
        )

        await query.edit_message_text("‚úÖ –°–ø–∏—Å–∞–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ.")
        user_state.pop(user.id, None)

    else:
        await query.edit_message_text("‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.")
        user_state.pop(user.id, None)

    return ConversationHandler.END
