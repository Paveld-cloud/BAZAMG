from __future__ import annotations

import html
import logging
from typing import Any, Dict, List

from telegram import Update, KeyboardButton, ReplyKeyboardMarkup
from telegram.constants import ParseMode
from telegram.ext import (
    Application,
    ContextTypes,
    CommandHandler,
    MessageHandler,
    filters,
)

from app import data

logger = logging.getLogger("bot.handlers")

PAGE_SIZE = 5  # —Å–∫–æ–ª—å–∫–æ –∫–∞—Ä—Ç–æ—á–µ–∫ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞ —Ä–∞–∑

# ---------- —É—Ç–∏–ª–∏—Ç—ã ----------
def _val(row: Dict[str, Any], *keys: str, default: str = "") -> str:
    for k in keys:
        v = row.get(k, "")
        if str(v).strip():
            return str(v).strip()
    return default

def _persist_menu() -> ReplyKeyboardMarkup:
    return ReplyKeyboardMarkup([[KeyboardButton("üîé –ü–æ–∏—Å–∫")]], resize_keyboard=True, is_persistent=True)

def _build_caption(row: Dict[str, Any]) -> str:
    # —ç–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã, —á—Ç–æ–±—ã HTML –Ω–µ –ª–æ–º–∞–ª—Å—è
    title = html.escape(_val(row, "–Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ", "name", default="(–±–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è)"))
    desc  = html.escape(_val(row, "–æ–ø–∏—Å–∞–Ω–∏–µ", "description", default=""))
    price = html.escape(_val(row, "—Ü–µ–Ω–∞", "price", default=""))

    parts = [f"<b>{title}</b>"]
    if desc:
        parts.append(desc)
    if price:
        parts.append(f"–¶–µ–Ω–∞: {price}")
    return "\n".join(parts)

async def _send_card(update: Update, context: ContextTypes.DEFAULT_TYPE, row: Dict[str, Any]) -> None:
    chat_id = update.effective_chat.id
    caption = _build_caption(row)

    # –§–æ—Ç–æ: —Å–Ω–∞—á–∞–ª–∞ –ø–æ–ª–µ image, –∑–∞—Ç–µ–º –ø–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–æ–±—Ä–∞—Ç—å –ø–æ –∫–æ–¥—É
    code = _val(row, "–∫–æ–¥", "code", "–ø–∞—Ä—Ç –Ω–æ–º–µ—Ä", "oem –ø–∞—Ä—Ç –Ω–æ–º–µ—Ä", default="")
    image_url = ""
    raw_img = _val(row, "image", default="")
    if raw_img:
        image_url = await data.resolve_image_url_async(raw_img)
    if not image_url and code:
        image_url = await data.find_image_by_code_async(code)

    try:
        if image_url:
            await context.bot.send_photo(chat_id=chat_id, photo=image_url, caption=caption, parse_mode=ParseMode.HTML)
        else:
            await context.bot.send_message(chat_id=chat_id, text=caption, parse_mode=ParseMode.HTML)
    except Exception:
        logger.exception("send_card failed; fallback to text")
        await context.bot.send_message(chat_id=chat_id, text=caption, parse_mode=ParseMode.HTML)

# ---------- –∫–æ–º–∞–Ω–¥—ã ----------
async def cmd_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        f"–ü—Ä–∏–≤–µ—Ç! –ù–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ, –∫–æ–¥ –∏–ª–∏ OEM –¥–µ—Ç–∞–ª–∏.\n–ü–æ–∫–∞–∑—ã–≤–∞—é –ø–æ {PAGE_SIZE} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∑–∞ —Ä–∞–∑ ‚Äî –ø—Ä–æ–¥–æ–ª–∂–∞–π –∫–æ–º–∞–Ω–¥–æ–π /more.",
        reply_markup=_persist_menu(),
    )
    try:
        u = update.effective_user
        data.record_user(u.id, u.first_name or "", u.username or "", "START")
    except Exception:
        logger.debug("record_user on /start failed")

async def cmd_reload(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        data.ensure_fresh_data(force=True)
        await update.message.reply_text(f"–ö—ç—à –æ–±–Ω–æ–≤–ª—ë–Ω. –í —Ç–∞–±–ª–∏—Ü–µ: {data.sap_count()} —Å—Ç—Ä–æ–∫.")
    except Exception as e:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {e}")

async def cmd_more(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    st = data.user_state.setdefault(chat_id, {})
    results: List[int] = st.get("results") or []
    offset: int = st.get("offset", 0)

    if not results:
        await update.message.reply_text("–ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞. –í–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –∑–∞–Ω–æ–≤–æ.")
        return

    batch = results[offset:offset + PAGE_SIZE]
    if not batch:
        await update.message.reply_text("–ë–æ–ª—å—à–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–µ—Ç.")
        return

    for idx in batch:
        row = data.get_row(idx)
        await _send_card(update, context, row)

    st["offset"] = offset + len(batch)

# ---------- —Ç–µ–∫—Å—Ç (–ø–æ–∏—Å–∫) ----------
async def on_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message or not update.message.text:
        return
    text = update.message.text.strip()

    if text == "üîé –ü–æ–∏—Å–∫":
        await update.message.reply_text("–í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ/–∫–æ–¥ –∏–ª–∏ OEM‚Ä¶")
        return

    # –ª–æ–≥ –∑–∞–ø—Ä–æ—Å–∞
    try:
        u = update.effective_user
        data.record_user(u.id, u.first_name or "", u.username or "", text)
    except Exception:
        logger.debug("record_user failed (not critical)")

    idxs = data.find_rows(text, limit=200)
    if not idxs:
        await update.message.reply_text("–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à—ë–ª. –ü–æ–ø—Ä–æ–±—É–π –∏–∑–º–µ–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å.")
        return

    chat_id = update.effective_chat.id
    st = data.user_state.setdefault(chat_id, {})
    st["results"] = idxs
    st["offset"] = 0

    # –ø–µ—Ä–≤–∞—è –ø–æ—Ä—Ü–∏—è
    batch = idxs[:PAGE_SIZE]
    for idx in batch:
        row = data.get_row(idx)
        await _send_card(update, context, row)
    st["offset"] = len(batch)

    if len(idxs) > PAGE_SIZE:
        await update.message.reply_text(f"–ü–æ–∫–∞–∑–∞–ª {PAGE_SIZE} –∏–∑ {len(idxs)}. –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å ‚Üí /more")

# ---------- —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è ----------
def register_handlers(app: Application):
    app.add_handler(CommandHandler("start", cmd_start))
    app.add_handler(CommandHandler("reload", cmd_reload))
    app.add_handler(CommandHandler("more", cmd_more))

    # –æ–¥–∏–Ω –æ–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–∞ (–ø–æ–∏—Å–∫)
    app.add_handler(MessageHandler(filters.TEXT & (~filters.COMMAND), on_text))

    logger.info("Handlers registered (minimal, no inline buttons).")
