# app/handlers.py
from __future__ import annotations

import logging
from typing import Any, Dict, List
from urllib.parse import quote_plus, unquote_plus

from telegram import (
    Update,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    KeyboardButton,
    ReplyKeyboardMarkup,
)
from telegram.constants import ParseMode
from telegram.ext import (
    Application,
    ContextTypes,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    filters,
)

from app import data

logger = logging.getLogger("bot.handlers")

# ===== –ù–∞—Å—Ç—Ä–æ–π–∫–∏ =====
PAGE_SIZE = 5  # —Å–∫–æ–ª—å–∫–æ –∫–∞—Ä—Ç–æ—á–µ–∫ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞ —Ä–∞–∑

# ===== –£—Ç–∏–ª–∏—Ç—ã –≤—ã–≤–æ–¥–∞ =====
def _bold(s: str) -> str:
    s = str(s or "").strip()
    return f"<b>{s}</b>" if s else ""

def _val(row: Dict[str, Any], *keys: str, default: str = "") -> str:
    for k in keys:
        if k in row and str(row.get(k, "")).strip():
            return str(row.get(k)).strip()
    return default

def _build_caption(row: Dict[str, Any]) -> str:
    """
    –°—Ç—Ä–æ–≥–∏–π –ø–æ—Ä—è–¥–æ–∫:
    1) <b>–ó–∞–≥–æ–ª–æ–≤–æ–∫</b>  (–Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ)
    2) –û–ø–∏—Å–∞–Ω–∏–µ (–µ—Å–ª–∏ –µ—Å—Ç—å)
    3) –¶–µ–Ω–∞: ...
    """
    title = _val(row, "–Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ", "name", default="(–±–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è)")
    desc  = _val(row, "–æ–ø–∏—Å–∞–Ω–∏–µ", "description", default="")
    price = _val(row, "—Ü–µ–Ω–∞", "price", default="")
    parts = [_bold(title)]
    if desc:
        parts.append(desc)
    if price:
        parts.append(f"–¶–µ–Ω–∞: {price}")
    return "\n".join(parts)

def _kb_for_row(row: Dict[str, Any], row_idx: int) -> InlineKeyboardMarkup:
    title = _val(row, "–Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ", "name", default="")
    btns = [
        [InlineKeyboardButton("üõí –í–∑—è—Ç—å –¥–µ—Ç–∞–ª—å", callback_data=f"take:{row_idx}")],
        [
            InlineKeyboardButton("ü™¥ –£—Ö–æ–¥", callback_data=f"care:{quote_plus(title)}"),
            InlineKeyboardButton("üìú –ò—Å—Ç–æ—Ä–∏—è", callback_data=f"hist:{quote_plus(title)}"),
        ],
    ]
    return InlineKeyboardMarkup(btns)

def _persist_menu() -> ReplyKeyboardMarkup:
    return ReplyKeyboardMarkup(
        [
            [KeyboardButton("üîé –ü–æ–∏—Å–∫")],
            [KeyboardButton("üì¶ –°–≤—è–∑–∞—Ç—å—Å—è"), KeyboardButton("üìú –ó–∞–∫–∞–∑—ã")],
        ],
        resize_keyboard=True,
        is_persistent=True,
    )

async def _send_card(update: Update, context: ContextTypes.DEFAULT_TYPE, row: Dict[str, Any], row_idx: int) -> None:
    chat_id = update.effective_chat.id
    caption = _build_caption(row)
    kb = _kb_for_row(row, row_idx)

    # –ü—Ä–æ–±—É–µ–º —Ñ–æ—Ç–æ: —Å–Ω–∞—á–∞–ª–∞ –ø—Ä—è–º–æ–µ –ø–æ–ª–µ image (—Å –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–µ–π –≤ data.py), –∑–∞—Ç–µ–º –ø–æ–¥–±–æ—Ä –ø–æ –∫–æ–¥—É
    code = _val(row, "–∫–æ–¥", "code", "–ø–∞—Ä—Ç –Ω–æ–º–µ—Ä", "oem –ø–∞—Ä—Ç –Ω–æ–º–µ—Ä", default="")
    image_url = ""
    raw_img = _val(row, "image", default="")
    if raw_img:
        image_url = await data.resolve_image_url_async(raw_img)
    if not image_url and code:
        image_url = await data.find_image_by_code_async(code)

    try:
        if image_url:
            await context.bot.send_photo(
                chat_id=chat_id,
                photo=image_url,
                caption=caption,
                parse_mode=ParseMode.HTML,
                reply_markup=kb,
            )
        else:
            await context.bot.send_message(
                chat_id=chat_id,
                text=caption,
                parse_mode=ParseMode.HTML,
                reply_markup=kb,
            )
    except Exception:
        logger.exception("send_card failed; fallback to text")
        await context.bot.send_message(
            chat_id=chat_id,
            text=caption,
            parse_mode=ParseMode.HTML,
            reply_markup=kb,
        )

def _reset_issue(chat_id: int):
    if chat_id in data.issue_state:
        data.issue_state.pop(chat_id, None)

# ===== –ö–æ–º–∞–Ω–¥—ã =====
async def cmd_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –ù–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ, –∫–æ–¥ –∏–ª–∏ OEM –¥–µ—Ç–∞–ª–∏.\n"
        f"–ü–æ–∫–∞–∑—ã–≤–∞—é –ø–æ {PAGE_SIZE} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∑–∞ —Ä–∞–∑ ‚Äî –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –º–æ–∂–Ω–æ –∫–æ–º–∞–Ω–¥–æ–π /more.",
        reply_markup=_persist_menu(),
    )
    try:
        data.record_user(user.id, user.first_name or "", user.username or "", "START")
    except Exception:
        logger.debug("record_user on /start failed")

async def cmd_reload(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        data.ensure_fresh_data(force=True)
        await update.message.reply_text(f"–ö—ç—à –æ–±–Ω–æ–≤–ª—ë–Ω. –í —Ç–∞–±–ª–∏—Ü–µ: {data.sap_count()} —Å—Ç—Ä–æ–∫.")
    except Exception as e:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {e}")

async def cmd_more(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    st = data.user_state.setdefault(chat_id, {})
    results: List[int] = st.get("results") or []
    offset: int = st.get("offset", 0)
    if not results:
        await update.message.reply_text("–ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞. –í–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –∑–∞–Ω–æ–≤–æ.")
        return

    batch = results[offset:offset + PAGE_SIZE]
    if not batch:
        await update.message.reply_text("–ë–æ–ª—å—à–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–µ—Ç.")
        return

    for idx in batch:
        row = data.get_row(idx)
        await _send_card(update, context, row, idx)

    st["offset"] = offset + len(batch)

# ===== –û—Å–Ω–æ–≤–Ω–æ–π –ø–æ–∏—Å–∫ (—Ç–µ–∫—Å—Ç) =====
async def on_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message or not update.message.text:
        return
    text = update.message.text.strip()

    # —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –Ω–µ–∑–∞–≤–µ—Ä—à—ë–Ω–Ω–æ–µ —Å–ø–∏—Å–∞–Ω–∏–µ –Ω–æ–≤—ã–º –∑–∞–ø—Ä–æ—Å–æ–º
    _reset_issue(update.effective_chat.id)

    if text == "üîé –ü–æ–∏—Å–∫":
        await update.message.reply_text("–í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ/–∫–æ–¥ –∏–ª–∏ OEM‚Ä¶")
        return

    query = text
    # –ª–æ–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        user = update.effective_user
        data.record_user(user.id, user.first_name or "", user.username or "", query)
    except Exception:
        logger.debug("record_user failed (not critical)")

    # –∏—Å–ø–æ–ª—å–∑—É–µ–º –≥–æ—Ç–æ–≤—ã–π —Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–∏—Å–∫ –∏–∑ data.py
    idxs = data.find_rows(query, limit=200)
    if not idxs:
        await update.message.reply_text("–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à—ë–ª. –ü–æ–ø—Ä–æ–±—É–π –∏–∑–º–µ–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å.")
        return

    chat_id = update.effective_chat.id
    st = data.user_state.setdefault(chat_id, {})
    st["results"] = idxs
    st["offset"] = 0

    batch = idxs[:PAGE_SIZE]
    for idx in batch:
        row = data.get_row(idx)
        await _send_card(update, context, row, idx)
    st["offset"] = len(batch)

    if len(idxs) > PAGE_SIZE:
        await update.message.reply_text(f"–ü–æ–∫–∞–∑–∞–ª {PAGE_SIZE} –∏–∑ {len(idxs)}. –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å ‚Üí /more")

# ===== Callback‚Äô–∏ –∫–∞—Ä—Ç–æ—á–µ–∫ =====
async def on_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    cq = update.callback_query
    if not cq or not cq.data:
        return
    data_str = cq.data
    chat_id = cq.message.chat.id

    # 1) –í–∑—è—Ç—å –¥–µ—Ç–∞–ª—å ‚Üí –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
    if data_str.startswith("take:"):
        try:
            row_idx = int(data_str.split(":", 1)[1])
        except Exception:
            await cq.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.")
            return
        row = data.get_row(row_idx)
        title = _val(row, "–Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ", "name", default="")
        code  = _val(row, "–∫–æ–¥", "code", "–ø–∞—Ä—Ç –Ω–æ–º–µ—Ä", "oem –ø–∞—Ä—Ç –Ω–æ–º–µ—Ä", default="")
        data.issue_state[chat_id] = {
            "stage": data.ASK_QUANTITY,
            "row_idx": row_idx,
            "title": title,
            "code": code,
            "qty": None,
            "comment": "",
        }
        await cq.answer()
        await cq.message.reply_text(
            f"–°–∫–æ–ª—å–∫–æ —Å–ø–∏—Å–∞—Ç—å –¥–ª—è: <b>{title}</b> (–∫–æ–¥: {code})?",
            parse_mode=ParseMode.HTML,
        )
        return

    # 2) –ó–∞–≥–ª—É—à–∫–∏ ¬´–£—Ö–æ–¥/–ò—Å—Ç–æ—Ä–∏—è¬ª (–æ—Å—Ç–∞–≤–ª–µ–Ω—ã –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
    if data_str.startswith("care:"):
        title = unquote_plus(data_str.split(":", 1)[1])
        await cq.answer()
        await cq.message.reply_text(
            f"ü™¥ –†–∞–∑–¥–µ–ª ¬´–£—Ö–æ–¥¬ª –¥–ª—è: <b>{title}</b>\n(–º–æ–∂–Ω–æ –ø–æ–¥–∫–ª—é—á–∏—Ç—å –ø–æ–∑–∂–µ)",
            parse_mode=ParseMode.HTML,
        )
        return

    if data_str.startswith("hist:"):
        title = unquote_plus(data_str.split(":", 1)[1])
        await cq.answer()
        await cq.message.reply_text(
            f"üìú –†–∞–∑–¥–µ–ª ¬´–ò—Å—Ç–æ—Ä–∏—è¬ª –¥–ª—è: <b>{title}</b>\n(–º–æ–∂–Ω–æ –ø–æ–¥–∫–ª—é—á–∏—Ç—å –ø–æ–∑–∂–µ)",
            parse_mode=ParseMode.HTML,
        )
        return

# ===== –î–∏–∞–ª–æ–≥ —Å–ø–∏—Å–∞–Ω–∏—è (–∫–æ–ª-–≤–æ ‚Üí –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π ‚Üí –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ) =====
async def on_any_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ ¬´–í–∑—è—Ç—å –¥–µ—Ç–∞–ª—å¬ª.
    –ï—Å–ª–∏ –Ω–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –¥–∞–ª—å—à–µ.
    """
    if not update.message or not update.message.text:
        return
    chat_id = update.effective_chat.id
    st = data.issue_state.get(chat_id)
    if not st:
        return  # –Ω–µ –≤–º–µ—à–∏–≤–∞–µ–º—Å—è ‚Äî –ø—É—Å—Ç—å –æ–±—Ä–∞–±–æ—Ç–∞–µ—Ç on_text

    text = update.message.text.strip()
    stage = st.get("stage")

    # 1) –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ
    if stage == data.ASK_QUANTITY:
        try:
            qty = float(text.replace(",", "."))
            if qty <= 0:
                raise ValueError
        except Exception:
            await update.message.reply_text("–í–≤–µ–¥–∏ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ. –ü—Ä–∏–º–µ—Ä: 1 –∏–ª–∏ 2.5")
            return
        st["qty"] = qty
        st["stage"] = data.ASK_COMMENT
        await update.message.reply_text("–î–æ–±–∞–≤—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (–∏–ª–∏ –Ω–∞–ø–∏—à–∏ ¬´-¬ª –¥–ª—è –ø—É—Å—Ç–æ–≥–æ):")
        return

    # 2) –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π ‚Üí –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    if stage == data.ASK_COMMENT:
        comment = "" if text == "-" else text
        st["comment"] = comment
        st["stage"] = data.ASK_CONFIRM

        title = st.get("title") or ""
        code  = st.get("code") or ""
        qty   = st.get("qty")
        kb = InlineKeyboardMarkup(
            [
                [
                    InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_yes"),
                    InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="confirm_no"),
                ]
            ]
        )
        await update.message.reply_text(
            f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Å–ø–∏—Å–∞–Ω–∏–µ?\n\n"
            f"<b>{title}</b>\n–ö–æ–¥: <code>{code}</code>\n–ö–æ–ª-–≤–æ: <b>{qty}</b>\n–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {comment or '‚Äî'}",
            parse_mode=ParseMode.HTML,
            reply_markup=kb,
        )
        return

async def on_confirm(update: Update, context: ContextTypes.DEFAULT_TYPE):
    cq = update.callback_query
    if not cq or not cq.data:
        return
    chat_id = cq.message.chat.id
    st = data.issue_state.get(chat_id)
    if not st:
        await cq.answer("–ù–µ—á–µ–≥–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—Ç—å.")
        return

    if cq.data == "confirm_no":
        data.issue_state.pop(chat_id, None)
        await cq.answer("–û—Ç–º–µ–Ω–µ–Ω–æ.")
        await cq.message.edit_reply_markup(reply_markup=None)
        return

    if cq.data == "confirm_yes":
        try:
            user = cq.from_user
            title_or_code = st.get("code") or st.get("title") or ""
            qty = st.get("qty")
            comment = st.get("comment") or ""
            data.record_history(user.id, title_or_code, qty, comment)
        except Exception:
            logger.exception("record_history failed")
        finally:
            data.issue_state.pop(chat_id, None)

        await cq.answer("–ó–∞–ø–∏—Å–∞–Ω–æ.")
        await cq.message.edit_reply_markup(reply_markup=None)
        await cq.message.reply_text("‚úÖ –ì–æ—Ç–æ–≤–æ.")
        return

# ===== –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è =====
def register_handlers(app: Application):
    app.add_handler(CommandHandler("start", cmd_start))
    app.add_handler(CommandHandler("more", cmd_more))
    app.add_handler(CommandHandler("reload", cmd_reload))

    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ/–æ—Ç–º–µ–Ω–∞ —Å–ø–∏—Å–∞–Ω–∏—è
    app.add_handler(CallbackQueryHandler(on_confirm, pattern="^confirm_(yes|no)$"))

    # –û—Å–Ω–æ–≤–Ω—ã–µ callback‚Äô–∏ –∫–∞—Ä—Ç–æ—á–µ–∫
    app.add_handler(CallbackQueryHandler(on_callback, pattern="^(take:|care:|hist:)"))

    # –ü–µ—Ä–µ—Ö–≤–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Å–ø–∏—Å–∞–Ω–∏—è (–¥–æ –æ–±—â–µ–≥–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Ñ–∏–ª—å—Ç—Ä–∞)
    app.add_handler(MessageHandler(filters.TEXT & (~filters.COMMAND), on_any_message), group=0)

    # –û–±—â–∏–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π –≤—Ö–æ–¥ (–ø–æ–∏—Å–∫)
    app.add_handler(MessageHandler(filters.TEXT & (~filters.COMMAND), on_text), group=1)

    logger.info("Handlers registered.")

