# app/handlers.py
import asyncio
import logging
import re
from html import escape
from typing import Dict, Any

from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import (
    CommandHandler, MessageHandler, CallbackQueryHandler,
    ConversationHandler, ContextTypes, filters
)

from . import data
from .config import (
    PAGE_SIZE, MAX_QTY, SUPPORT_CONTACT, WELCOME_ANIMATION_URL,
    WELCOME_PHOTO_URL, WELCOME_MEDIA_ID, ADMINS
)

logger = logging.getLogger("bot.handlers")

# –≠—Ç–∞–ø—ã –¥–∏–∞–ª–æ–≥–∞ —Å–ø–∏—Å–∞–Ω–∏—è
ASK_QUANTITY, ASK_COMMENT = range(2)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_state: Dict[int, Dict[str, Any]] = {}
search_offset: Dict[int, int] = {}

# ---------- –ö–Ω–æ–ø–∫–∏ ----------
def cancel_markup():
    return InlineKeyboardMarkup([[InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_action")]])

def confirm_markup():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("‚úÖ –î–∞, —Å–ø–∏—Å–∞—Ç—å", callback_data="confirm_yes"),
         InlineKeyboardButton("‚ùå –ù–µ—Ç", callback_data="confirm_no")],
        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_action")]
    ])

def more_markup():
    return InlineKeyboardMarkup([[InlineKeyboardButton("‚è≠ –ï—â—ë", callback_data="more")]])

def main_menu_markup():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üîç –ü–æ–∏—Å–∫", callback_data="menu_search")],
        [InlineKeyboardButton("üì¶ –ö–∞–∫ —Å–ø–∏—Å–∞—Ç—å –¥–µ—Ç–∞–ª—å", callback_data="menu_issue_help")],
        [InlineKeyboardButton("üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data="menu_contact")],
    ])

# ---------- –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ HTML ----------
async def _safe_send_html_message(bot, chat_id: int, text: str, **kwargs):
    try:
        return await bot.send_message(chat_id=chat_id, text=text, parse_mode="HTML", **kwargs)
    except Exception as e:
        logger.warning(f"HTML message parse failed, fallback to plain: {e}")
        no_tags = re.sub(r"</?(b|i|code)>", "", text)
        kwargs.pop("parse_mode", None)
        return await bot.send_message(chat_id=chat_id, text=no_tags, **kwargs)

# ---------- /start ----------
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await data.ensure_users_async(force=False)
    await data.ensure_fresh_data_async(force=False)

    chat_id = update.effective_chat.id
    full_name = escape((update.effective_user.full_name or "").strip())
    text = (
        f"<b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {full_name}!</b>\n\n"
        "–≠—Ç–æ –±–æ—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –¥–µ—Ç–∞–ª–µ–π –∏ —É–¥–æ–±–Ω–æ–≥–æ —Å–ø–∏—Å–∞–Ω–∏—è –≤ Google –¢–∞–±–ª–∏—Ü—É.\n"
        "–ù–∞–∂–º–∏—Ç–µ ¬´üîç –ü–æ–∏—Å–∫¬ª, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å, –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–º –∑–∞–ø—Ä–æ—Å.\n\n"
        f"{escape(SUPPORT_CONTACT)}"
    )

    # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ: file_id > —Ñ–æ—Ç–æ > –∞–Ω–∏–º–∞—Ü–∏—è > —Ç–µ–∫—Å—Ç
    try:
        if WELCOME_MEDIA_ID:
            await context.bot.send_photo(chat_id=chat_id, photo=WELCOME_MEDIA_ID, caption="")
        elif WELCOME_PHOTO_URL:
            await context.bot.send_photo(chat_id=chat_id, photo=WELCOME_PHOTO_URL, caption="")
        elif WELCOME_ANIMATION_URL:
            await context.bot.send_animation(chat_id=chat_id, animation=WELCOME_ANIMATION_URL)
    except Exception as e:
        logger.warning(f"Welcome media failed: {e}")
    await _safe_send_html_message(context.bot, chat_id, text, reply_markup=main_menu_markup())

# ---------- –ú–µ–Ω—é ----------
async def on_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()
    if q.data == "menu_search":
        await _safe_send_html_message(context.bot, q.message.chat_id,
                                      "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞–ø—Ä–æ—Å–∞ (–∫–æ–¥, –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ, OEM, –∏–∑–≥–æ—Ç–æ–≤–∏—Ç–µ–ª—å)‚Ä¶",
                                      reply_markup=cancel_markup())
    elif q.data == "menu_issue_help":
        await _safe_send_html_message(context.bot, q.message.chat_id,
                                      "<b>–ö–∞–∫ —Å–ø–∏—Å–∞—Ç—å –¥–µ—Ç–∞–ª—å</b>\n1) –ù–∞–π–¥–∏—Ç–µ –¥–µ—Ç–∞–ª—å\n2) –ù–∞–∂–º–∏—Ç–µ ¬´–í–∑—è—Ç—å –¥–µ—Ç–∞–ª—å¬ª\n"
                                      "3) –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ\n4) –ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π\n5) –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Å–ø–∏—Å–∞–Ω–∏–µ.",
                                      reply_markup=main_menu_markup())
    elif q.data == "menu_contact":
        await _safe_send_html_message(context.bot, q.message.chat_id,
                                      f"–°–≤—è–∑—å: {escape(SUPPORT_CONTACT)}",
                                      reply_markup=main_menu_markup())

# ---------- –ü–æ–∏—Å–∫ ----------
def _render_item_text(item: Dict[str, Any]) -> str:
    name = str(item.get("–Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ", "")).strip()
    code = str(item.get("–∫–æ–¥", "")).strip()
    typ = str(item.get("—Ç–∏–ø", "")).strip()
    oem = str(item.get("oem", "")).strip()
    man = str(item.get("–∏–∑–≥–æ—Ç–æ–≤–∏—Ç–µ–ª—å", "")).strip()

    lines = []
    if name: lines.append(f"<b>{escape(name)}</b>")
    if typ: lines.append(f"–¢–∏–ø: {escape(typ)}")
    if code: lines.append(f"–ö–æ–¥: <code>{escape(code)}</code>")
    if oem: lines.append(f"OEM: <code>{escape(oem)}</code>")
    if man: lines.append(f"–ò–∑–≥–æ—Ç–æ–≤–∏—Ç–µ–ª—å: {escape(man)}")
    return "\n".join(lines) if lines else "(–ø—É—Å—Ç–æ)"

def _issue_button(item: Dict[str, Any]):
    code = str(item.get("–∫–æ–¥","")).strip()
    encoded = code.replace("|", "/")
    return InlineKeyboardMarkup([[InlineKeyboardButton("üì¶ –í–∑—è—Ç—å –¥–µ—Ç–∞–ª—å", callback_data=f"issue|{encoded}")]])

async def _send_item(update: Update, context: ContextTypes.DEFAULT_TYPE, item: Dict[str, Any]):
    chat_id = update.effective_chat.id if update.effective_chat else update.callback_query.message.chat_id
    text = _render_item_text(item)
    # —Ñ–æ—Ç–æ
    code = str(item.get("–∫–æ–¥","")).strip()
    url = data.get_image_for_code(code)
    if url:
        try:
            url = await data.resolve_image_url_async(url)
            await context.bot.send_photo(chat_id=chat_id, photo=url, caption="")
        except Exception as e:
            logger.warning(f"Failed to send photo for code={code}: {e}")
    await _safe_send_html_message(context.bot, chat_id, text, reply_markup=_issue_button(item))

async def on_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = (update.message.text or "").strip()
    if not query:
        return
    await data.ensure_fresh_data_async(False)
    items = data.search(query, offset=0, limit=PAGE_SIZE)
    search_offset[update.effective_user.id] = PAGE_SIZE
    if not items:
        await _safe_send_html_message(context.bot, update.effective_chat.id, "–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return
    for it in items:
        await _send_item(update, context, it)
    if len(items) == PAGE_SIZE:
        await _safe_send_html_message(context.bot, update.effective_chat.id, "–ü–æ–∫–∞–∑–∞–Ω—ã –ø–µ—Ä–≤—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã.", reply_markup=more_markup())

async def on_more(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()
    uid = q.from_user.id
    off = search_offset.get(uid, 0)
    # –ë–µ—Ä—ë–º —Ç–µ–∫—Å—Ç –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (reply_to). –ï—Å–ª–∏ –Ω–µ—Ç ‚Äî –ø—Ä–æ—Å–∏–º –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–ø—Ä–æ—Å
    last_query = (q.message.reply_to_message.text if q.message and q.message.reply_to_message else None)
    if not last_query:
        await _safe_send_html_message(context.bot, q.message.chat_id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å.")
        return
    items = data.search(last_query, offset=off, limit=PAGE_SIZE)
    search_offset[uid] = off + len(items)
    for it in items:
        await _send_item(update, context, it)

# ---------- –°–ø–∏—Å–∞–Ω–∏–µ ----------
async def _ask_quantity(update: Update, context: ContextTypes.DEFAULT_TYPE, code: str):
    uid = update.effective_user.id
    user_state[uid] = {"code": code}
    await _safe_send_html_message(context.bot, update.effective_chat.id,
                                  f"–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è <code>{escape(code)}</code> (–¥–æ {MAX_QTY}):",
                                  reply_markup=cancel_markup())
    return ASK_QUANTITY

async def _ask_comment(update: Update, context: ContextTypes.DEFAULT_TYPE, quantity: float):
    uid = update.effective_user.id
    user_state[uid]["quantity"] = quantity
    await _safe_send_html_message(context.bot, update.effective_chat.id,
                                  "–î–æ–±–∞–≤—å—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (—Ü–µ–ª—å, –º–µ—Å—Ç–æ —É—Å—Ç–∞–Ω–æ–≤–∫–∏, –û–° –∏ —Ç.–ø.):",
                                  reply_markup=cancel_markup())
    return ASK_COMMENT

async def _confirm_issue(update: Update, context: ContextTypes.DEFAULT_TYPE, comment: str):
    uid = update.effective_user.id
    st = user_state.get(uid) or {}
    st["comment"] = comment
    code = st.get("code","")
    qty = st.get("quantity", 0)
    text = f"<b>–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Å–ø–∏—Å–∞–Ω–∏–µ</b>\n–ö–æ–¥: <code>{escape(code)}</code>\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: <b>{qty}</b>\n–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {escape(comment)}"
    await _safe_send_html_message(context.bot, update.effective_chat.id, text, reply_markup=confirm_markup())
    return ConversationHandler.WAITING

async def save_issue_to_sheet(bot, user, part: Dict[str, Any], quantity, comment: str):
    """–ó–∞–ø–∏—Å—å –≤ –ª–∏—Å—Ç '–ò—Å—Ç–æ—Ä–∏—è' —á–µ—Ä–µ–∑ to_thread, —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å event loop"""
    from .config import SPREADSHEET_URL
    import gspread

    def _write_row():
        client = data.get_gs_client()
        sh = client.open_by_url(SPREADSHEET_URL)
        try:
            ws = sh.worksheet("–ò—Å—Ç–æ—Ä–∏—è")
        except gspread.WorksheetNotFound:
            ws = sh.add_worksheet(title="–ò—Å—Ç–æ—Ä–∏—è", rows=1000, cols=12)
            ws.append_row(["–î–∞—Ç–∞","ID","–ò–º—è","–¢–∏–ø","–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ","–ö–æ–¥","–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ","–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π"])

        headers_raw = ws.row_values(1)
        headers = [h.strip() for h in headers_raw]
        norm = [h.lower() for h in headers]

        full_name = f"{(user.first_name or '').strip()} {(user.last_name or '').strip()}".strip()
        display_name = full_name or (f"@{user.username}" if user.username else str(user.id))
        ts = data.now_local_str()

        values_by_key = {
            "–¥–∞—Ç–∞": ts, "timestamp": ts,
            "id": user.id, "user_id": user.id,
            "–∏–º—è": display_name, "name": display_name,
            "—Ç–∏–ø": str(part.get("—Ç–∏–ø", "")), "type": str(part.get("—Ç–∏–ø", "")),
            "–Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ": str(part.get("–Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ", "")), "name_item": str(part.get("–Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ", "")),
            "–∫–æ–¥": str(part.get("–∫–æ–¥", "")), "code": str(part.get("–∫–æ–¥", "")),
            "–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ": str(quantity), "qty": str(quantity),
            "–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π": comment or "", "comment": comment or "",
        }
        row = [values_by_key.get(h.lower(), "") for h in norm]
        ws.append_row(row, value_input_option="USER_ENTERED")

    await asyncio.to_thread(_write_row)

# ---- Callbacks ----
async def on_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()
    data_cb = q.data or ""
    if data_cb.startswith("issue|"):
        code = data_cb.split("|",1)[1]
        return await _ask_quantity(update, context, code)
    elif data_cb == "confirm_yes":
        uid = q.from_user.id
        st = user_state.get(uid) or {}
        code = st.get("code","")
        qty = st.get("quantity", 0)
        comment = st.get("comment","")
        # –ù–∞–±–∏—Ä–∞–µ–º part –∏–∑ df
        part = None
        if data.df is not None and not data.df.empty:
            for _, row in data.df.iterrows():
                if str(row.get("–∫–æ–¥","")).strip() == code:
                    part = row.to_dict()
                    break
        if not part:
            await _safe_send_html_message(context.bot, q.message.chat_id, "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –¥–µ—Ç–∞–ª—å –ø–æ –∫–æ–¥—É.")
            return ConversationHandler.END
        await save_issue_to_sheet(context.bot, q.from_user, part, qty, comment)
        await _safe_send_html_message(context.bot, q.message.chat_id, "‚úÖ –°–ø–∏—Å–∞–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ.", reply_markup=main_menu_markup())
        user_state.pop(uid, None)
        return ConversationHandler.END
    elif data_cb in {"confirm_no","cancel_action"}:
        await _safe_send_html_message(context.bot, q.message.chat_id, "–û—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=main_menu_markup())
        user_state.pop(q.from_user.id, None)
        return ConversationHandler.END
    elif data_cb == "more":
        await on_more(update, context)
    elif data_cb.startswith("menu_"):
        await on_menu(update, context)

# ---- Conversation steps ----
async def on_ask_quantity(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = (update.message.text or "").strip().replace(",", ".")
    try:
        qty = float(text)
        if qty <= 0 or qty > MAX_QTY:
            raise ValueError
    except Exception:
        await _safe_send_html_message(context.bot, update.effective_chat.id, f"–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ {MAX_QTY}.", reply_markup=cancel_markup())
        return ASK_QUANTITY
    return await _ask_comment(update, context, qty)

async def on_ask_comment(update: Update, context: ContextTypes.DEFAULT_TYPE):
    comment = (update.message.text or "").strip()
    return await _confirm_issue(update, context, comment)

# ---- Service ----
async def reload_data(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id not in ADMINS:
        return
    await data.ensure_fresh_data_async(True)
    await _safe_send_html_message(context.bot, update.effective_chat.id, "–î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã.")

async def reload_users(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id not in ADMINS:
        return
    await data.ensure_users_async(True)
    await _safe_send_html_message(context.bot, update.effective_chat.id, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã.")

def build_handlers():
    conv = ConversationHandler(
        entry_points=[CallbackQueryHandler(on_callback, pattern=r"^(issue\|.*|confirm_yes|confirm_no|cancel_action)$")],
        states={
            ASK_QUANTITY: [MessageHandler(filters.TEXT & ~filters.COMMAND, on_ask_quantity)],
            ASK_COMMENT: [MessageHandler(filters.TEXT & ~filters.COMMAND, on_ask_comment)],
        },
        fallbacks=[CallbackQueryHandler(on_callback, pattern=r"^(cancel_action)$")],
        per_message=False,
        per_user=True,
        per_chat=True,
    )
    return [
        CommandHandler("start", start),
        CommandHandler("reload", reload_data),
        CommandHandler("users", reload_users),
        MessageHandler(filters.TEXT & ~filters.COMMAND, on_text),
        CallbackQueryHandler(on_callback)
    ] + [conv]
