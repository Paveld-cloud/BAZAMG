# This is a refactor of your monolith handlers into a module.
# It keeps the same behavior: search, images by code, issue flow, export, /fileid, /imgdebug, menu, guards.

import math
import re
import logging
import asyncio
from typing import Dict, Any, List

import pandas as pd
from telegram import Update, InputFile, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import (
    ContextTypes, CommandHandler, MessageHandler, CallbackQueryHandler,
    ConversationHandler, ApplicationHandlerStop, filters
)

from config import (
    PAGE_SIZE, MAX_QTY,
    WELCOME_ANIMATION_URL, WELCOME_PHOTO_URL, WELCOME_MEDIA_ID, SUPPORT_CONTACT
)
from utils import normalize, squash, format_row, safe_send_html_message, df_to_xlsx, to_thread, val
from data import (
    ensure_fresh_data, ensure_fresh_data_async, ensure_users, ensure_users_async,
    is_admin, is_allowed, match_row_by_index, get_df,
    find_image_by_code_async, get_admin_ids, get_image_index_copy
)
from ui import cancel_markup, confirm_markup, more_markup, main_menu_markup
from images import resolve_image_url_async, download_image_async
from gsheets import save_issue_to_sheet_blocking
from indexing import SEARCH_FIELDS

logger = logging.getLogger("handlers")

ASK_QUANTITY, ASK_COMMENT, ASK_CONFIRM = range(3)

user_state: Dict[int, Dict[str, Any]] = {}
issue_state: Dict[int, Dict[str, Any]] = {}

async def send_welcome_sequence(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    user = update.effective_user
    from html import escape
    first = escape((user.first_name or "").strip() or "–∫–æ–ª–ª–µ–≥–∞")

    if WELCOME_ANIMATION_URL:
        try:
            await context.bot.send_animation(chat_id=chat_id, animation=WELCOME_ANIMATION_URL,
                                             caption=f"‚öôÔ∏è –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {first}!")
            await asyncio.sleep(0.3)
        except Exception as e:
            logger.warning(f"Welcome animation failed: {e}")

    sent_media = False
    if WELCOME_MEDIA_ID:
        try:
            await context.bot.send_photo(chat_id=chat_id, photo=WELCOME_MEDIA_ID, disable_notification=True)
            sent_media = True
            await asyncio.sleep(0.1)
        except Exception as e:
            logger.warning(f"Welcome photo by file_id failed: {e}")

    if not sent_media and WELCOME_PHOTO_URL:
        try:
            await context.bot.send_photo(chat_id=chat_id, photo=WELCOME_PHOTO_URL, disable_notification=True)
            sent_media = True
            await asyncio.sleep(0.1)
        except Exception as e:
            logger.warning(f"Welcome photo by URL/file_id failed: {e}")

    card_html = (
        f"‚öôÔ∏è <b>–ü—Ä–∏–≤–µ—Ç, {first}!</b>\n"
        f"<b>–ë–æ—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏ —Å–ø–∏—Å–∞–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π</b>\n"
        f"‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
        f"‚Ä¢ –í–≤–µ–¥–∏—Ç–µ <code>–Ω–∞–∑–≤–∞–Ω–∏–µ</code>, <code>–∫–æ–¥</code> –∏–ª–∏ <code>–º–æ–¥–µ–ª—å</code>\n"
        f"‚Ä¢ –û—Ç–∫—Ä–æ–π—Ç–µ –∫–∞—Ä—Ç–æ—á–∫—É –∏ –Ω–∞–∂–º–∏—Ç–µ ¬´üì¶ –í–∑—è—Ç—å –¥–µ—Ç–∞–ª—å¬ª\n"
        f"‚Ä¢ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Å–ø–∏—Å–∞–Ω–∏–µ ‚Äî –∏ –≥–æ—Ç–æ–≤–æ\n\n"
        f"–ü—Ä–∏–º–µ—Ä: <code>PI 8808 DRG 500</code>\n"
        f"–£–¥–∞—á–Ω–æ–π —Ä–∞–±–æ—Ç—ã! üöÄ"
    )
    await safe_send_html_message(context.bot, chat_id, card_html, reply_markup=main_menu_markup())

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    issue_state.pop(uid, None)
    user_state.pop(uid, None)

    await send_welcome_sequence(update, context)

    if update.message:
        await asyncio.sleep(0.2)
        cmds_html = (
            "<b>–ö–æ–º–∞–Ω–¥—ã</b>:\n"
            "‚Ä¢ <code>/help</code> ‚Äî –ø–æ–º–æ—â—å\n"
            "‚Ä¢ <code>/more</code> ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –µ—â—ë\n"
            "‚Ä¢ <code>/export</code> ‚Äî –≤—ã–≥—Ä—É–∑–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ (XLSX/CSV)\n"
            "‚Ä¢ <code>/cancel</code> ‚Äî –æ—Ç–º–µ–Ω–∏—Ç—å —Å–ø–∏—Å–∞–Ω–∏–µ\n"
            "‚Ä¢ <code>/reload</code> ‚Äî –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω)\n"
            "‚Ä¢ <code>/fileid</code> ‚Äî –ø–æ–ª—É—á–∏—Ç—å <i>file_id</i> –∏–∑ –ø—Ä–∏—Å–ª–∞–Ω–Ω–æ–≥–æ –º–µ–¥–∏–∞\n"
            "‚Ä¢ <code>/imgdebug &lt;–∫–æ–¥&gt;</code> ‚Äî –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø–æ–∏—Å–∫–∞ —Ñ–æ—Ç–æ\n"
        )
        await safe_send_html_message(context.bot, update.effective_chat.id, cmds_html)

async def help_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    msg = (
        "<b>–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è</b>:\n"
        "1) –í—ã–ø–æ–ª–Ω–∏—Ç–µ –ø–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é/–º–æ–¥–µ–ª–∏/–∫–æ–¥—É.\n"
        "2) –í –∫–∞—Ä—Ç–æ—á–∫–µ –Ω–∞–∂–º–∏—Ç–µ ¬´üì¶ –í–∑—è—Ç—å –¥–µ—Ç–∞–ª—å¬ª ‚Äî –±–æ—Ç —Å–ø—Ä–æ—Å–∏—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π.\n"
        "3) –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Å–ø–∏—Å–∞–Ω–∏–µ (–î–∞/–ù–µ—Ç).\n"
        "<i>–£ –≤–∞—Å –≤—Å—ë –ø–æ–ª—É—á–∏—Ç—Å—è!</i>"
    )
    await safe_send_html_message(context.bot, update.effective_chat.id, msg)

async def reload_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    if not is_admin(uid):
        return await update.message.reply_text("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
    ensure_fresh_data(force=True)
    ensure_users(force=True)
    await update.message.reply_text("‚úÖ –î–∞–Ω–Ω—ã–µ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω—ã (–≤ —Ñ–æ–Ω–µ).")

async def cancel_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    if issue_state.pop(uid, None):
        await update.message.reply_text("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è —Å–ø–∏—Å–∞–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    else:
        await update.message.reply_text("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏.")

async def export_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    results = user_state.get(uid, {}).get("results")
    import pandas as pd
    if results is None or results.empty:
        return await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –ø–æ–∏—Å–∫.")
    timestamp = __import__("datetime").datetime.now().strftime("%Y%m%d_%H%M%S")
    try:
        import openpyxl  # noqa: F401
        buf = df_to_xlsx(results, f"export_{timestamp}.xlsx")
        await update.message.reply_document(InputFile(buf, filename=f"export_{timestamp}.xlsx"))
    except Exception as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å XLSX (fallback CSV): {e}")
        csv = results.to_csv(index=False, encoding="utf-8-sig")
        import io
        await update.message.reply_document(
            InputFile(io.BytesIO(csv.encode("utf-8-sig")), filename=f"export_{timestamp}.csv")
        )

async def fileid_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["await_fileid"] = True
    await update.message.reply_text(
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ/–≥–∏—Ñ ‚Äî –æ—Ç–≤–µ—á—É –µ–≥–æ file_id. "
        "–ü–æ—Ç–æ–º –≤—Å—Ç–∞–≤—å—Ç–µ –µ–≥–æ –≤ WELCOME_MEDIA_ID / WELCOME_ANIMATION_URL / WELCOME_PHOTO_URL."
    )

async def capture_fileid(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.user_data.get("await_fileid"):
        return
    file_id = None
    kind = None

    if update.message.animation:
        file_id = update.message.animation.file_id
        kind = "animation"
    elif update.message.video:
        file_id = update.message.video.file_id
        kind = "video"
    elif update.message.photo:
        file_id = update.message.photo[-1].file_id
        kind = "photo"

    if file_id:
        context.user_data["await_fileid"] = False
        from html import escape
        await safe_send_html_message(
            context.bot,
            update.effective_chat.id,
            f"‚úÖ {kind} file_id:\n<code>{escape(file_id)}</code>\n\n"
            f"–°–∫–æ–ø–∏—Ä—É–π—Ç–µ –≤ ENV: WELCOME_MEDIA_ID / WELCOME_AN–òMATION_URL / WELCOME_PH–û–¢–û_URL."
        )
    else:
        await update.message.reply_text("–≠—Ç–æ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–æ–µ –º–µ–¥–∏–∞. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ/–≥–∏—Ñ.")

async def imgdebug_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    args = (update.message.text or "").split(maxsplit=1)
    if len(args) < 2:
        return await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /imgdebug <–∫–æ–¥>")
    code = args[1].strip()
    from indexing import _norm_code
    raw, sq = _norm_code(code)

    idx = get_image_index_copy()
    idx_hit = idx.get(raw) or idx.get(sq)
    sub_hit = None
    if idx and not idx_hit:
        for k, url in idx.items():
            if (sq and sq in k) or (raw and raw in k):
                sub_hit = url
                break

    from data import _scan_images_by_code_fallback as scan_fb
    scan_hit = scan_fb(code) if not (idx_hit or sub_hit) else ""

    from html import escape
    msg = (
        f"üîé <b>IMGDEBUG</b>\n"
        f"code: <code>{escape(code)}</code>\n"
        f"raw:  <code>{escape(raw)}</code>\n"
        f"sq:   <code>{escape(sq)}</code>\n"
        f"‚Äî index direct: {idx_hit or '‚Äî'}\n"
        f"‚Äî index substring: {sub_hit or '‚Äî'}\n"
        f"‚Äî df scan fallback: {scan_hit or '‚Äî'}"
    )
    await safe_send_html_message(context.bot, update.effective_chat.id, msg)

async def menu_search_cb(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()
    msg = "üîç –í–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å: <i>–Ω–∞–∑–≤–∞–Ω–∏–µ</i>/<i>–º–æ–¥–µ–ª—å</i>/<i>–∫–æ–¥</i>.\n–ü—Ä–∏–º–µ—Ä: <code>PI 8808 DRG 500</code>"
    await safe_send_html_message(context.bot, q.message.chat_id, msg)

async def menu_issue_help_cb(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()
    msg = (
        "<b>–ö–∞–∫ —Å–ø–∏—Å–∞—Ç—å –¥–µ—Ç–∞–ª—å</b>:\n"
        "1) –í—ã–ø–æ–ª–Ω–∏—Ç–µ –ø–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é/–∫–æ–¥—É.\n"
        "2) –í –∫–∞—Ä—Ç–æ—á–∫–µ –Ω–∞–∂–º–∏—Ç–µ ¬´üì¶ –í–∑—è—Ç—å –¥–µ—Ç–∞–ª—å¬ª.\n"
        "3) –£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π.\n"
        "4) –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Å–ø–∏—Å–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–æ–π ¬´–î–∞¬ª."
    )
    await safe_send_html_message(context.bot, q.message.chat_id, msg)

async def menu_contact_cb(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()
    await q.message.reply_text(f"{SUPPORT_CONTACT}")

async def send_row_with_image(update: Update, row: dict, text: str):
    code = str(row.get("–∫–æ–¥", "")).strip()
    kb = InlineKeyboardMarkup([[InlineKeyboardButton("üì¶ –í–∑—è—Ç—å –¥–µ—Ç–∞–ª—å", callback_data=f"issue:{code.lower()}")]])
    url_raw = await find_image_by_code_async(code)

    if url_raw:
        url = await resolve_image_url_async(url_raw)
        if url:
            try:
                await update.message.reply_photo(photo=url, caption=text, reply_markup=kb)
                return
            except Exception as e:
                logger.warning(f"URL —Ñ–æ—Ç–æ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª ({url}): {e}")
                bio = await download_image_async(url)
                if bio:
                    try:
                        await update.message.reply_photo(photo=bio, caption=text, reply_markup=kb)
                        return
                    except Exception as e2:
                        logger.warning(f"–°–∫–∞—á–∏–≤–∞–Ω–∏–µ/–æ—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ç–æ –Ω–µ —É–¥–∞–ª–æ—Å—å: {e2} (src: {url})")
    await update.message.reply_text(text, reply_markup=kb)

async def send_row_with_image_bot(bot, chat_id: int, row: dict, text: str):
    code = str(row.get("–∫–æ–¥", "")).strip()
    kb = InlineKeyboardMarkup([[InlineKeyboardButton("üì¶ –í–∑—è—Ç—å –¥–µ—Ç–∞–ª—å", callback_data=f"issue:{code.lower()}")]])
    url_raw = await find_image_by_code_async(code)

    if url_raw:
        url = await resolve_image_url_async(url_raw)
        if url:
            try:
                await bot.send_photo(chat_id=chat_id, photo=url, caption=text, reply_markup=kb)
                return
            except Exception as e:
                logger.warning(f"URL —Ñ–æ—Ç–æ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª ({url}): {e}")
                bio = await download_image_async(url)
                if bio:
                    try:
                        await bot.send_photo(chat_id=chat_id, photo=bio, caption=text, reply_markup=kb)
                        return
                    except Exception as e2:
                        logger.warning(f"–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–∫–∞—á–∞–Ω–Ω–æ–≥–æ —Ñ–æ—Ç–æ –Ω–µ —É–¥–∞–ª–∞—Å—å: {e2} (src: {url})")
    await bot.send_message(chat_id=chat_id, text=text, reply_markup=kb)

def _relevance_score(row: dict, tokens: List[str], q_squash: str) -> int:
    score = 0
    for f in SEARCH_FIELDS:
        val_s = str(row.get(f, "")).lower()
        if not val_s:
            continue
        words = set(re.findall(r'\w+', val_s))
        tok_hit = sum(1 for t in tokens if t in words)
        sub_hit = sum(1 for t in tokens if t and t in val_s)
        sq = re.sub(r'[\W_]+', '', val_s)
        squash_hit = 1 if q_squash and q_squash in sq else 0
        weight = 2 if f in ("–∫–æ–¥", "oem") else 1
        score += weight * (2 * tok_hit + sub_hit) + 3 * squash_hit * weight
    return score

async def search_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    ensure_fresh_data()
    if update.message is None:
        return

    if context.chat_data.pop("suppress_next_search", False):
        return

    uid = update.effective_user.id
    st_issue = issue_state.get(uid)
    if st_issue:
        if "quantity" not in st_issue:
            return await update.message.reply_text(
                "–í—ã –≤–≤–æ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ ¬´–û—Ç–º–µ–Ω–∏—Ç—å¬ª.",
                reply_markup=cancel_markup()
            )
        if st_issue.get("await_comment"):
            return await update.message.reply_text(
                "–í—ã –≤–≤–æ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π. –ù–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç –∏–ª–∏ ¬´-¬ª, –ª–∏–±–æ –Ω–∞–∂–º–∏—Ç–µ ¬´–û—Ç–º–µ–Ω–∏—Ç—å¬ª.",
                reply_markup=cancel_markup()
            )

    q = update.message.text.strip()
    if not q:
        return await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å.")
    tokens = normalize(q).split()
    if not tokens:
        return await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –±–æ–ª–µ–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å.")
    q_squash = squash(q)

    df = get_df()
    if df is None:
        await ensure_fresh_data_async(force=True)
        df = get_df()
        if df is None:
            return await update.message.reply_text("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö.")

    matched_indices = match_row_by_index(tokens)

    if not matched_indices:
        mask_any = pd.Series(False, index=df.index)
        for col in SEARCH_FIELDS:
            if col not in df.columns: 
                continue
            series = df[col].astype(str).str.lower()
            field_mask = pd.Series(True, index=df.index)
            for t in tokens:
                if t:
                    field_mask &= series.str.contains(re.escape(t), na=False)
            mask_any |= field_mask
        matched_indices = set(df.index[mask_any])

    if not matched_indices and q_squash:
        mask_any = pd.Series(False, index=df.index)
        for col in SEARCH_FIELDS:
            if col not in df.columns:
                continue
            series = df[col].astype(str).str.lower()
            series_sq = series.str.replace(r'[\W_]+', '', regex=True)
            mask_any |= series_sq.str.contains(re.escape(q_squash), na=False)
        matched_indices = set(df.index[mask_any])

    if not matched_indices:
        return await update.message.reply_text(f"–ü–æ –∑–∞–ø—Ä–æ—Å—É ¬´{q}¬ª –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")

    idx_list = list(matched_indices)
    results_df = df.loc[idx_list].copy()

    scores: List[int] = []
    for _, r in results_df.iterrows():
        scores.append(_relevance_score(r.to_dict(), tokens, q_squash))
    results_df["__score"] = scores

    if "–∫–æ–¥" in results_df.columns:
        results_df = results_df.sort_values(
            by=["__score", "–∫–æ–¥"],
            ascending=[False, True],
            key=lambda s: s if s.name != "–∫–æ–¥" else s.astype(str).str.len()
        )
    else:
        results_df = results_df.sort_values(by=["__score"], ascending=False)
    results_df = results_df.drop(columns="__score")

    st = user_state.setdefault(uid, {})
    st["query"] = q
    st["results"] = results_df
    st["page"] = 0

    await send_page(update, uid)

async def more_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    st = user_state.get(uid, {})
    results = st.get("results", pd.DataFrame())
    if results.empty:
        return await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –ø–æ–∏—Å–∫.")
    st["page"] = st.get("page", 0) + 1
    await send_page(update, uid)

async def send_page(update: Update, uid: int):
    st = user_state.get(uid, {})
    results = st.get("results", pd.DataFrame())
    page = st.get("page", 0)

    total = len(results)
    if total == 0:
        return await update.message.reply_text("–†–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –±–æ–ª—å—à–µ –Ω–µ—Ç.")
    pages = max(1, math.ceil(total / PAGE_SIZE))
    if page >= pages:
        st["page"] = pages - 1
        return await update.message.reply_text("–ë–æ–ª—å—à–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–µ—Ç.")

    start = page * PAGE_SIZE
    end = min(start + PAGE_SIZE, total)

    await update.message.reply_text(f"–°—Ç—Ä. {page+1}/{pages}. –ü–æ–∫–∞–∑—ã–≤–∞—é {start + 1}‚Äì{end} –∏–∑ {total}.")
    for _, row in results.iloc[start:end].iterrows():
        await send_row_with_image(update, row.to_dict(), format_row(row.to_dict()))
    if end < total:
        await update.message.reply_text("–ü–æ–∫–∞–∑–∞—Ç—å –µ—â—ë?", reply_markup=more_markup())

async def send_page_via_bot(bot, chat_id: int, uid: int):
    st = user_state.get(uid, {})
    results = st.get("results", pd.DataFrame())
    page = st.get("page", 0)
    total = len(results)
    if total == 0:
        return await bot.send_message(chat_id=chat_id, text="–†–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –±–æ–ª—å—à–µ –Ω–µ—Ç.")
    pages = max(1, math.ceil(total / PAGE_SIZE))
    if page >= pages:
        st["page"] = pages - 1
        return await bot.send_message(chat_id=chat_id, text="–ë–æ–ª—å—à–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–µ—Ç.")
    start = page * PAGE_SIZE
    end = min(start + PAGE_SIZE, total)
    await bot.send_message(chat_id=chat_id, text=f"–°—Ç—Ä. {page+1}/{pages}. –ü–æ–∫–∞–∑—ã–≤–∞—é {start + 1}‚Äì{end} –∏–∑ {total}.")
    chunk = results.iloc[start:end]
    for _, row in chunk.iterrows():
        await send_row_with_image_bot(bot, chat_id, row.to_dict(), format_row(row.to_dict()))
    if end < total:
        await bot.send_message(chat_id=chat_id, text="–ü–æ–∫–∞–∑–∞—Ç—å –µ—â—ë?", reply_markup=more_markup())

async def on_issue_click(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()

    uid = q.from_user.id
    code = q.data.split(":", 1)[1].strip().lower()

    ensure_fresh_data()
    df = get_df()
    found = None
    if df is not None and "–∫–æ–¥" in df.columns:
        hit = df[df["–∫–æ–¥"].astype(str).str.lower() == code]
        if not hit.empty:
            found = hit.iloc[0].to_dict()

    if not found:
        return await q.edit_message_text("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –¥–µ—Ç–∞–ª—å –ø–æ –∫–æ–¥—É. –í—ã–ø–æ–ª–Ω–∏—Ç–µ –ø–æ–∏—Å–∫ –∑–∞–Ω–æ–≤–æ.")

    issue_state[uid] = {"part": found}
    await q.message.reply_text("–°–∫–æ–ª—å–∫–æ —Å–ø–∏—Å–∞—Ç—å? –£–∫–∞–∂–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1 –∏–ª–∏ 2.5).", reply_markup=cancel_markup())
    return ASK_QUANTITY

async def handle_quantity(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.chat_data["suppress_next_search"] = True

    uid = update.effective_user.id
    text = (update.message.text or "").strip().replace(",", ".")
    try:
        qty = float(text)
        if not math.isfinite(qty) or qty <= 0 or qty > MAX_QTY:
            raise ValueError
        qty = float(f"{qty:.3f}")
    except Exception:
        return await update.message.reply_text(
            f"–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ > 0 –∏ ‚â§ {MAX_QTY}. –ü—Ä–∏–º–µ—Ä: 1 –∏–ª–∏ 2.5",
            reply_markup=cancel_markup()
        )

    st = issue_state.get(uid)
    if not st or "part" not in st:
        return await update.message.reply_text("–°–ø–∏—Å–∞–Ω–∏–µ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ ‚Äî –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ –∏–∑ –∫–∞—Ä—Ç–æ—á–∫–∏.")

    st["quantity"] = qty
    st["await_comment"] = True
    await update.message.reply_text("–î–æ–±–∞–≤—å—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (–Ω–∞–ø—Ä–∏–º–µ—Ä: –õ–∏–Ω–∏—è —Å–±–æ—Ä–∫–∏ CSS OP-1100).", reply_markup=cancel_markup())
    return ASK_COMMENT

async def handle_comment(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.chat_data["suppress_next_search"] = True

    uid = update.effective_user.id
    comment = (update.message.text or "").strip()
    st = issue_state.get(uid)
    if not st:
        return await update.message.reply_text("–°–ø–∏—Å–∞–Ω–∏–µ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ –∏–∑ –∫–∞—Ä—Ç–æ—á–∫–∏.")

    part = st.get("part")
    qty = st.get("quantity")
    if part is None or qty is None:
        issue_state.pop(uid, None)
        return await update.message.reply_text("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")

    st["comment"] = "" if comment == "-" else comment
    st["await_comment"] = False

    text = (
        "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–ø–∏—Å–∞—Ç—å –¥–µ—Ç–∞–ª—å?\n\n"
        f"üî¢ –ö–æ–¥: {val(part, '–∫–æ–¥')}\n"
        f"üì¶ –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ: {val(part, '–Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ')}\n"
        f"üì¶ –ö–æ–ª-–≤–æ: {qty}\n"
        f"üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {st['comment'] or '‚Äî'}"
    )
    await update.message.reply_text(text, reply_markup=confirm_markup())
    return ASK_CONFIRM

async def handle_confirm(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()
    uid = q.from_user.id

    if q.data == "confirm_yes":
        st = issue_state.get(uid)
        if not st or "part" not in st or "quantity" not in st:
            issue_state.pop(uid, None)
            return await q.message.reply_text("–î–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–ø–∏—Å–∞–Ω–∏—è –Ω–µ—Ç. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
        part = st["part"]
        qty = st["quantity"]
        comment = st.get("comment", "")

        try:
            await to_thread(save_issue_to_sheet_blocking, q.from_user, part, qty, comment)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ —Å–ø–∏—Å–∞–Ω–∏—è: {e}")
            for admin_id in get_admin_ids():
                try:
                    await context.bot.send_message(admin_id, f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–ø–∏—Å–∞–Ω–∏—è: {e}")
                except Exception:
                    pass

        issue_state.pop(uid, None)

        await q.message.reply_text(
            f"‚úÖ –°–ø–∏—Å–∞–Ω–æ: {qty}\n"
            f"üî¢ –ö–æ–¥: {val(part, '–∫–æ–¥')}\n"
            f"üì¶ –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ: {val(part, '–Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ')}\n"
            f"üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {comment or '‚Äî'}"
        )
        return ConversationHandler.END

    if q.data == "confirm_no":
        issue_state.pop(uid, None)
        await q.message.reply_text("‚ùå –°–ø–∏—Å–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
        return ConversationHandler.END

async def cancel_action(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()
    uid = q.from_user.id
    if uid in issue_state:
        issue_state.pop(uid, None)
        await q.message.reply_text("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è —Å–ø–∏—Å–∞–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    return ConversationHandler.END

async def handle_cancel_in_dialog(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await cancel_cmd(update, context)
    return ConversationHandler.END

async def on_more_click(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()
    uid = q.from_user.id
    st = user_state.get(uid, {})
    results = st.get("results", pd.DataFrame())
    if results.empty:
        return await q.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –ø–æ–∏—Å–∫.")
    st["page"] = st.get("page", 0) + 1
    chat_id = q.message.chat.id
    await send_page_via_bot(context.bot, chat_id, uid)

async def guard_msg(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    if user and not is_allowed(user.id):
        try:
            await update.effective_message.reply_text("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
        except Exception:
            pass
        raise ApplicationHandlerStop

async def guard_cb(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    if user and not is_allowed(user.id):
        try:
            await update.callback_query.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.", show_alert=True)
        except Exception:
            pass
        raise ApplicationHandlerStop

async def on_error(update: object, context: ContextTypes.DEFAULT_TYPE):
    logger.exception("Unhandled error: %s", context.error)
    msg = f"‚ùå –û—à–∏–±–∫–∞: {context.error}"
    for admin_id in get_admin_ids():
        try:
            await context.bot.send_message(admin_id, msg)
        except Exception:
            pass

def register_handlers(app):
    app.add_handler(MessageHandler(filters.ALL, guard_msg), group=-1)
    app.add_handler(CallbackQueryHandler(guard_cb, pattern=".*"), group=-1)

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_cmd))
    app.add_handler(CommandHandler("more", more_cmd))
    app.add_handler(CommandHandler("export", export_cmd))
    app.add_handler(CommandHandler("reload", reload_cmd))
    app.add_handler(CommandHandler("cancel", cancel_cmd))
    app.add_handler(CommandHandler("fileid", fileid_cmd))
    app.add_handler(CommandHandler("imgdebug", imgdebug_cmd))

    app.add_handler(MessageHandler(filters.ANIMATION | filters.VIDEO | filters.PHOTO, capture_fileid))

    app.add_handler(CallbackQueryHandler(menu_search_cb, pattern=r"^menu_search$"))
    app.add_handler(CallbackQueryHandler(menu_issue_help_cb, pattern=r"^menu_issue_help$"))
    app.add_handler(CallbackQueryHandler(menu_contact_cb, pattern=r"^menu_contact$"))

    app.add_handler(CallbackQueryHandler(on_more_click, pattern=r"^more$"))
    app.add_handler(CallbackQueryHandler(cancel_action, pattern=r"^cancel_action$"))

    conv = ConversationHandler(
        entry_points=[CallbackQueryHandler(on_issue_click, pattern=r"^issue:")],
        states={
            ASK_QUANTITY: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_quantity),
                CallbackQueryHandler(cancel_action, pattern=r"^cancel_action$")
            ],
            ASK_COMMENT: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_comment),
                CallbackQueryHandler(cancel_action, pattern=r"^cancel_action$")
            ],
            ASK_CONFIRM: [
                CallbackQueryHandler(handle_confirm, pattern=r"^confirm_(yes|no)$"),
                CallbackQueryHandler(cancel_action, pattern=r"^cancel_action$")
            ],
        },
        fallbacks=[CommandHandler("cancel", handle_cancel_in_dialog)],
        allow_reentry=True,
        per_chat=True,
        per_user=True,
        per_message=False,
    )
    app.add_handler(conv)

    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, search_text), group=1)
    app.add_error_handler(on_error)