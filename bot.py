import logging
import os
import pickle
import json
import gspread
import re
from datetime import datetime
from zoneinfo import ZoneInfo  # –í—Å—Ç—Ä–æ–µ–Ω–æ –≤ Python 3.9+
from google.oauth2.service_account import Credentials
from telegram import (
    Update,
    InputFile,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
)
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    ConversationHandler,
    ContextTypes,
    filters,
)
from pandas import DataFrame
import atexit
import signal

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –≠—Ç–∞–ø—ã –¥–∏–∞–ª–æ–≥–∞ —Å–ø–∏—Å–∞–Ω–∏—è
ASK_QUANTITY, ASK_COMMENT = range(2)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
user_state = {}
issue_state = {}  # –•—Ä–∞–Ω–∏—Ç: {user_id: {"part": ..., "quantity": ...}}
search_count = {}

# –ê–¥–º–∏–Ω—ã
ADMINS = {225177765}

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
SPREADSHEET_URL = os.getenv("SPREADSHEET_URL")
SCOPES = ["https://www.googleapis.com/auth/spreadsheets"]  # –ë–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤

if not TELEGRAM_TOKEN or not SPREADSHEET_URL:
    raise EnvironmentError("–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç TELEGRAM_TOKEN –∏–ª–∏ SPREADSHEET_URL –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")

# Google Sheets –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
def get_gsheet():
    creds_info = json.loads(os.getenv("GOOGLE_APPLICATION_CREDENTIALS_JSON"))
    creds = Credentials.from_service_account_info(creds_info, scopes=SCOPES)
    client = gspread.authorize(creds)
    return client.open_by_url(SPREADSHEET_URL)

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
def load_data():
    try:
        sheet = get_gsheet().worksheet("SAP")
        return sheet.get_all_records()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö SAP: {e}")
        return []

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–ø–∏—Å–∞–Ω–∏—è ‚Äî —Å –≤—Ä–µ–º–µ–Ω–µ–º –ø–æ –¢–∞—à–∫–µ–Ω—Ç—É
def save_issue_to_sheet(user, part, quantity, comment):
    try:
        # üîπ –í—Ä–µ–º—è –ø–æ –¢–∞—à–∫–µ–Ω—Ç—É (UTC+5)
        tz = ZoneInfo("Asia/Tashkent")
        now = datetime.now(tz).strftime("%Y-%m-%d %H:%M:%S")

        sheet = get_gsheet().worksheet("–ò—Å—Ç–æ—Ä–∏—è")
        sheet.append_row([
            now,
            user.id,
            user.full_name,
            part.get("–Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ", ""),
            part.get("–∫–æ–¥", ""),
            quantity,
            comment
        ])
        logger.info(f"‚úÖ –°–ø–∏—Å–∞–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ (–¢–∞—à–∫–µ–Ω—Ç): {now} | {part.get('–∫–æ–¥')} x{quantity}")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å–ø–∏—Å–∞–Ω–∏—è: {e}")
        for admin_id in ADMINS:
            try:
                # –ü–æ–ø—Ä–æ–±—É–µ–º —É–≤–µ–¥–æ–º–∏—Ç—å –∞–¥–º–∏–Ω–∞ (–µ—Å–ª–∏ –±–æ—Ç –µ—â—ë —Ä–∞–±–æ—Ç–∞–µ—Ç)
                import asyncio
                loop = asyncio.get_event_loop()
                loop.create_task(ContextTypes.DEFAULT_TYPE.bot.send_message(admin_id, f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–ø–∏—Å–∞–Ω–∏—è: {e}"))
            except:
                pass

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
raw_data = load_data()
df = DataFrame(raw_data)
df.columns = df.columns.str.strip().str.lower()
df["–∫–æ–¥"] = df["–∫–æ–¥"].astype(str).str.strip().str.lower()

# –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
if os.path.exists("state.pkl"):
    try:
        with open("state.pkl", "rb") as f:
            saved = pickle.load(f)
            user_state.update(saved.get("user_state", {}))
            search_count.update(saved.get("search_count", {}))
    except Exception as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å state.pkl: {e}")

# –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞
def normalize(text: str) -> str:
    return re.sub(r'[^\w\s]', '', text.lower()).strip()

# –ü–æ–∏—Å–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ –∫–æ–¥—É
def find_image_url_by_code(code: str) -> str:
    code_norm = normalize(code)
    for url in df["image"]:
        if isinstance(url, str) and code_norm in normalize(url):
            return url
    return ""

# –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
def format_row(row):
    return (
        f"üîπ –¢–∏–ø: {row['—Ç–∏–ø']}\n"
        f"üì¶ –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ: {row['–Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ']}\n"
        f"üî¢ –ö–æ–¥: {row['–∫–æ–¥']}\n"
        f"üì¶ –ö–æ–ª-–≤–æ: {row['–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ']}\n"
        f"üí∞ –¶–µ–Ω–∞: {row['—Ü–µ–Ω–∞']} {row['–≤–∞–ª—é—Ç–∞']}\n"
        f"üè≠ –ò–∑–≥–æ—Ç–æ–≤–∏—Ç–µ–ª—å: {row['–∏–∑–≥–æ—Ç–æ–≤–∏—Ç–µ–ª—å']}\n"
        f"‚öôÔ∏è OEM: {row['oem']}"
    )

# –û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ç—Ä–æ–∫–∏ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –∏ –∫–Ω–æ–ø–∫–æ–π
async def send_row_with_image(update: Update, row, text: str):
    if not update.message:
        return
    code = str(row.get("–∫–æ–¥", ""))
    image_url = find_image_url_by_code(code)
    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("üì¶ –í–∑—è—Ç—å –¥–µ—Ç–∞–ª—å", callback_data=f"issue:{code}")]
    ])
    if image_url:
        try:
            await update.message.reply_photo(photo=image_url, caption=text[:1024], reply_markup=keyboard)
            return
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ: {e}")
    await update.message.reply_text(text, reply_markup=keyboard)

# –ö–æ–º–∞–Ω–¥—ã
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user_state.pop(user_id, None)
    search_count.pop(user_id, None)
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –ò—Å—Ç–æ—Ä–∏—è –ø–æ–∏—Å–∫–∞ –æ—á–∏—â–µ–Ω–∞.\n–û—Ç–ø—Ä–∞–≤—å —Ç–∏–ø, –∫–æ–¥ –∏–ª–∏ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –¥–µ—Ç–∞–ª–∏.")

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üìå –ö–æ–º–∞–Ω–¥—ã:\n"
        "/start ‚Äî —Å–±—Ä–æ—Å –ø–æ–∏—Å–∫–∞\n"
        "/more ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –µ—â—ë\n"
        "/export ‚Äî —ç–∫—Å–ø–æ—Ä—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤\n"
        "/stats ‚Äî —Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ –∏—Å–∫–∞–ª–∏\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç ‚Äî –¥–ª—è –ø–æ–∏—Å–∫–∞."
    )

async def more(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    state = user_state.get(user_id)
    if not state:
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –ø–æ–∏—Å–∫.")
        return
    results = state["results"]
    offset = state["offset"]
    page = results.iloc[offset: offset + 5]
    if page.empty:
        await update.message.reply_text("–ë–æ–ª—å—à–µ –Ω–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.")
        return
    for _, row in page.iterrows():
        text = format_row(row)
        await send_row_with_image(update, row, text)
    new_offset = offset + 5
    user_state[user_id]["offset"] = new_offset
    if new_offset < len(results):
        await update.message.reply_text("–ù–∞–ø–∏—à–∏—Ç–µ /more –¥–ª—è —Å–ª–µ–¥—É—é—â–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.")
    else:
        await update.message.reply_text("–ë–æ–ª—å—à–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–µ—Ç.")

async def export(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    state = user_state.get(user_id)
    if not state or state["results"].empty:
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –ø–æ–∏—Å–∫.")
        return
    filename = f"export_{user_id}.xlsx"
    state["results"].to_excel(filename, index=False)
    try:
        with open(filename, "rb") as f:
            await update.message.reply_document(InputFile(f, filename))
    finally:
        if os.path.exists(filename):
            os.remove(filename)

async def stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    count = search_count.get(user_id, 0)
    await update.message.reply_text(f"üîç –í—ã —Å–¥–µ–ª–∞–ª–∏ {count} –ø–æ–∏—Å–∫–æ–≤ –∑–∞ —Å–µ—Å—Å–∏—é.")

# –ü–æ–∏—Å–∫
async def search(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    query = update.message.text.strip().lower()
    norm_query = normalize(query)

    if not norm_query:
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –±–æ–ª–µ–µ –æ—Å–º—ã—Å–ª–µ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å.")
        return

    def matches(value: str, query: str) -> bool:
        return query in value

    mask = df.apply(
        lambda row: any(
            matches(normalize(str(value)), norm_query)
            for value in [row.get("—Ç–∏–ø", ""), row.get("–Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ", ""), row.get("–∫–æ–¥", ""),
                          row.get("oem", ""), row.get("–∏–∑–≥–æ—Ç–æ–≤–∏—Ç–µ–ª—å", "")]
        ),
        axis=1
    )

    results = df[mask]

    if results.empty:
        await update.message.reply_text(f'–ü–æ –∑–∞–ø—Ä–æ—Å—É "{query}" –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.')
        return

    search_count[user_id] = search_count.get(user_id, 0) + 1
    user_state[user_id] = {
        "query": query,
        "offset": 5,
        "results": results
    }

    for _, row in results.head(5).iterrows():
        text = format_row(row)
        await send_row_with_image(update, row, text)

    if len(results) > 5:
        await update.message.reply_text("–ü–æ–∫–∞–∑–∞–Ω–æ 5 –ø–µ—Ä–≤—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤. –ù–∞–ø–∏—à–∏—Ç–µ /more –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è.")

# –°–ø–∏—Å–∞–Ω–∏–µ
async def handle_issue_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    code = query.data.split(":")[1]
    user_id = query.from_user.id

    part = df[df["–∫–æ–¥"] == code].to_dict(orient="records")
    if not part:
        await query.edit_message_text("‚ùó –î–µ—Ç–∞–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return ConversationHandler.END

    issue_state[user_id] = {"part": part[0]}
    await query.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:")
    return ASK_QUANTITY

async def handle_quantity(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    text = update.message.text.strip()

    if not text.isdigit():
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
        return ASK_QUANTITY

    issue_state[user_id]["quantity"] = int(text)
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (–∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–Ω–µ—Ç'):")
    return ASK_COMMENT

async def handle_comment(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    user_id = user.id
    comment = update.message.text.strip()
    data = issue_state.pop(user_id, {})

    part = data.get("part")
    quantity = data.get("quantity")

    if part and quantity:
        save_issue_to_sheet(user, part, quantity, comment)
        await update.message.reply_text("‚úÖ –°–ø–∏—Å–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ.")
    else:
        await update.message.reply_text("‚ö† –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫.")
    return ConversationHandler.END

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE):
    logger.error("–û—à–∏–±–∫–∞", exc_info=context.error)
    if isinstance(update, Update) and update.message:
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—É—Å–∫
def main():
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()

    # –ö–æ–º–∞–Ω–¥—ã
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(CommandHandler("more", more))
    app.add_handler(CommandHandler("export", export))
    app.add_handler(CommandHandler("stats", stats))

    # –°–ø–∏—Å–∞–Ω–∏–µ
    conv_handler = ConversationHandler(
        entry_points=[CallbackQueryHandler(handle_issue_button, pattern=r"^issue:")],
        states={
            ASK_QUANTITY: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_quantity)],
            ASK_COMMENT: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_comment)],
        },
        fallbacks=[],
    )
    app.add_handler(conv_handler)

    # –ü–æ–∏—Å–∫
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, search))
    app.add_error_handler(error_handler)

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ
    def save_state():
        with open("state.pkl", "wb") as f:
            pickle.dump({
                "user_state": user_state,
                "search_count": search_count
            }, f)
        logger.info("–°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ")

    atexit.register(save_state)
    signal.signal(signal.SIGINT, lambda s, f: (save_state(), exit(0)))
    signal.signal(signal.SIGTERM, lambda s, f: (save_state(), exit(0)))

    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    app.run_polling()

if __name__ == "__main__":
    main()
