import logging
import os
import pickle
import json
import re
import gspread
from google.oauth2.service_account import Credentials
from telegram import Update, InputFile, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    filters,
    ContextTypes,
)

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –¢–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")

# Google Sheets –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
SCOPES = ["https://www.googleapis.com/auth/spreadsheets.readonly"]
SPREADSHEET_URL = os.getenv("SPREADSHEET_URL")
SHEET_NAME = "SAP"

def load_data():
    creds_info = json.loads(os.getenv("GOOGLE_APPLICATION_CREDENTIALS_JSON"))
    creds = Credentials.from_service_account_info(creds_info, scopes=SCOPES)
    client = gspread.authorize(creds)
    sheet = client.open_by_url(SPREADSHEET_URL).worksheet(SHEET_NAME)
    records = sheet.get_all_records()
    return records

# –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ Google Sheets
raw_data = load_data()

# –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ DataFrame-–ø–æ–¥–æ–±–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É (—Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π)
from pandas import DataFrame

df = DataFrame(raw_data)
df.columns = df.columns.str.strip().str.lower()
df['–∫–æ–¥'] = df['–∫–æ–¥'].astype(str).str.strip().str.lower()

# –•—Ä–∞–Ω–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ (–ø–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–ø—Ä–æ—Å, —Å–º–µ—â–µ–Ω–∏–µ) –ø–æ user_id
user_state = {}
search_count = {}

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –µ—Å–ª–∏ –µ—Å—Ç—å
if os.path.exists("state.pkl"):
    with open("state.pkl", "rb") as f:
        user_state = pickle.load(f)

def generate_inline_keyboard(code: str):
    return InlineKeyboardMarkup([
        [
            InlineKeyboardButton("\U0001F4D6 –ò—Å—Ç–æ—Ä–∏—è", callback_data=f"history|{code}"),
            InlineKeyboardButton("\U0001F9FC –£—Ö–æ–¥", callback_data=f"care|{code}"),
        ],
        [
            InlineKeyboardButton("\U0001F4DD –û–ø–∏—Å–∞–Ω–∏–µ", callback_data=f"description|{code}"),
            InlineKeyboardButton("\U0001F3A5 –í–∏–¥–µ–æ", callback_data=f"video|{code}"),
        ]
    ])

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user_state.pop(user_id, None)
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –ò—Å—Ç–æ—Ä–∏—è –ø–æ–∏—Å–∫–∞ –æ—á–∏—â–µ–Ω–∞.\n–û—Ç–ø—Ä–∞–≤—å —Ç–∏–ø, –∫–æ–¥ –∏–ª–∏ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –¥–µ—Ç–∞–ª–∏.")

async def more(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    state = user_state.get(user_id)
    if not state:
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –ø–æ–∏—Å–∫.")
        return

    query, offset, results = state["query"], state["offset"], state["results"]
    page = results.iloc[offset: offset + 5]
    for _, row in page.iterrows():
        text = (
            f"\U0001F539 –¢–∏–ø: {row['—Ç–∏–ø']}\n"
            f"\U0001F4E6 –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ: {row['–Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ']}\n"
            f"\U0001F522 –ö–æ–¥: {row['–∫–æ–¥']}\n"
            f"\U0001F4E6 –ö–æ–ª-–≤–æ: {row['–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ']}\n"
            f"\U0001F4B0 –¶–µ–Ω–∞: {row['—Ü–µ–Ω–∞']} {row['–≤–∞–ª—é—Ç–∞']}\n"
            f"\U0001F3ED –ò–∑–≥–æ—Ç–æ–≤–∏—Ç–µ–ª—å: {row['–∏–∑–≥–æ—Ç–æ–≤–∏—Ç–µ–ª—å']}\n"
            f"\u2699 OEM: {row['oem']}")
        await update.message.reply_text(text, reply_markup=generate_inline_keyboard(str(row['–∫–æ–¥'])))

    new_offset = offset + 5
    user_state[user_id]["offset"] = new_offset
    if new_offset < len(results):
        await update.message.reply_text("–ù–∞–ø–∏—à–∏—Ç–µ /more –¥–ª—è —Å–ª–µ–¥—É—é—â–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.")
    else:
        await update.message.reply_text("–ë–æ–ª—å—à–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–µ—Ç.")

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "\U0001F4D6 –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/start ‚Äî –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ\n"
        "/more ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –µ—â—ë —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã\n"
        "/help ‚Äî —Å–ø—Ä–∞–≤–∫–∞\n"
        "–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç ‚Äî –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ —Ç–∏–ø—É, –∫–æ–¥—É, OEM, –Ω–∞–∑–≤–∞–Ω–∏—é –∏–ª–∏ –∏–∑–≥–æ—Ç–æ–≤–∏—Ç–µ–ª—é."
    )

async def stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    count = search_count.get(user_id, 0)
    await update.message.reply_text(f"\U0001F50D –í—ã —Å–¥–µ–ª–∞–ª–∏ {count} –ø–æ–∏—Å–∫–æ–≤ –∑–∞ —Å–µ—Å—Å–∏—é.")

async def export(update: Update, context: ContextTypes.DEFAULT_TYPE):
    import pandas as pd
    user_id = update.effective_user.id
    state = user_state.get(user_id)
    if not state:
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –ø–æ–∏—Å–∫.")
        return

    filename = f"export_{user_id}.xlsx"
    state["results"].to_excel(filename, index=False)
    with open(filename, "rb") as f:
        await update.message.reply_document(InputFile(f, filename))
    os.remove(filename)

async def search(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    query = update.message.text.strip().lower()
    query = re.sub(r"[()]", "", query)
    query = re.sub(r"\s{2,}", " ", query)
    words = query.split()

    if not words:
        await update.message.reply_text("–ü—É—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å.")
        return

    masks = []
    for word in words:
        mask = (
            df['—Ç–∏–ø'].str.contains(word, na=False) |
            df['–Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ'].str.contains(word, na=False) |
            df['–∫–æ–¥'].str.contains(word, na=False) |
            df['oem'].str.contains(word, na=False) |
            df['–∏–∑–≥–æ—Ç–æ–≤–∏—Ç–µ–ª—å'].str.contains(word, na=False)
        )
        masks.append(mask)

    combined_mask = masks[0]
    for m in masks[1:]:
        combined_mask |= m

    results = df[combined_mask]

    if results.empty:
        await update.message.reply_text(f'–ü–æ –∑–∞–ø—Ä–æ—Å—É "{query}" –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.')
        return

    user_state[user_id] = {
        "query": query,
        "offset": 5,
        "results": results
    }

    search_count[user_id] = search_count.get(user_id, 0) + 1
    logger.info(f"–ü–æ–∏—Å–∫ –æ—Ç {user_id}: {query} (–≤—Å–µ–≥–æ: {search_count[user_id]})")

    for _, row in results.head(5).iterrows():
        text = (
            f"üìç –¢–∏–ø: {row['—Ç–∏–ø']}\n"
            f"üì¶ –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ: {row['–Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ']}\n"
            f"üî¢ –ö–æ–¥: {row['–∫–æ–¥']}\n"
            f"üì¶ –ö–æ–ª-–≤–æ: {row['–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ']}\n"
            f"üí∞ –¶–µ–Ω–∞: {row['—Ü–µ–Ω–∞']} {row['–≤–∞–ª—é—Ç–∞']}\n"
            f"üè≠ –ò–∑–≥–æ—Ç–æ–≤–∏—Ç–µ–ª—å: {row['–∏–∑–≥–æ—Ç–æ–≤–∏—Ç–µ–ª—å']}\n"
            f"‚öôÔ∏è OEM: {row['oem']}")
        await update.message.reply_text(text, reply_markup=generate_inline_keyboard(str(row['–∫–æ–¥'])))

    if len(results) > 5:
        await update.message.reply_text("–ü–æ–∫–∞–∑–∞–Ω–æ 5 –ø–µ—Ä–≤—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤. –ù–∞–ø–∏—à–∏—Ç–µ /more –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è.")

async def handle_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    action, item_code = query.data.split("|", 1)

    if action == "history":
        await query.message.reply_text(f"\U0001F4D6 –ò—Å—Ç–æ—Ä–∏—è –¥–µ—Ç–∞–ª–∏: {item_code}")
    elif action == "care":
        await query.message.reply_text(f"\U0001F9FC –£—Ö–æ–¥ –∑–∞ –¥–µ—Ç–∞–ª—å—é: {item_code}")
    elif action == "description":
        await query.message.reply_text(f"\U0001F4DD –û–ø–∏—Å–∞–Ω–∏–µ –¥–µ—Ç–∞–ª–∏: {item_code}")
    elif action == "video":
        await query.message.reply_text(f"\U0001F3A5 –í–∏–¥–µ–æ–æ–±–∑–æ—Ä: {item_code}")
    else:
        await query.message.reply_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ.")

async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE):
    logger.error(msg="–û—à–∏–±–∫–∞ –≤ Telegram –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ", exc_info=context.error)
    if isinstance(update, Update) and update.message:
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

def main():
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("more", more))
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(CommandHandler("stats", stats))
    app.add_handler(CommandHandler("export", export))
    app.add_handler(CallbackQueryHandler(handle_callback))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, search))
    app.add_error_handler(error_handler)
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    app.run_polling()

    with open("state.pkl", "wb") as f:
        pickle.dump(user_state, f)

if __name__ == "__main__":
    main()


