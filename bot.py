# bot.py
import os
import re
import io
import json
import math
import time
import asyncio
from datetime import datetime
from zoneinfo import ZoneInfo
from typing import Optional, Dict, Any, Set, List, DefaultDict
from collections import defaultdict

import aiohttp
import gspread
import pandas as pd
from google.oauth2.service_account import Credentials
from pandas import DataFrame
from telegram import (
    Update, InputFile, InlineKeyboardMarkup, InlineKeyboardButton
)
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler, CallbackQueryHandler,
    ConversationHandler, ContextTypes, filters, ApplicationHandlerStop
)

# --------------------------- –õ–û–ì–ò ---------------------------
import logging
logging.basicConfig(level=logging.INFO, format="%(asctime)s %(levelname)s %(message)s")
logger = logging.getLogger("bot")

# -------------------------- –ù–ê–°–¢–†–û–ô–ö–ò -----------------------
ADMINS = {225177765}  # –ª–æ–∫–∞–ª—å–Ω—ã–µ –∞–¥–º–∏–Ω—ã

TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
SPREADSHEET_URL = os.getenv("SPREADSHEET_URL")
CREDS_JSON = os.getenv("GOOGLE_APPLICATION_CREDENTIALS_JSON")
WEBHOOK_URL = (os.getenv("WEBHOOK_URL") or "").rstrip("/")
WEBHOOK_PATH = os.getenv("WEBHOOK_PATH", "/webhook")
PORT = int(os.getenv("PORT", "8080"))
WEBHOOK_SECRET_TOKEN = os.getenv("WEBHOOK_SECRET_TOKEN", "")
SHEET_NAME = os.getenv("SHEET_NAME", "").strip()
MAX_QTY = float(os.getenv("MAX_QTY", "1000"))
TZ_NAME = os.getenv("TIMEZONE", "Europe/Moscow")
PAGE_SIZE = 5

# –ù–æ–≤—ã–µ ENV –¥–ª—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
WELCOME_ANIMATION_URL = os.getenv("WELCOME_ANIMATION_URL", "").strip()  # .gif –∏–ª–∏ .mp4 (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
WELCOME_PHOTO_URL = os.getenv("WELCOME_PHOTO_URL", "").strip()          # –∑–∞–ø–∞—Å–Ω–∞—è –∫–∞—Ä—Ç–∏–Ω–∫–∞ (–µ—Å–ª–∏ –Ω–µ—Ç –∞–Ω–∏–º–∞—Ü–∏–∏)
SUPPORT_CONTACT = os.getenv("SUPPORT_CONTACT", "üë®‚Äçüíª –ü–æ–¥–¥–µ—Ä–∂–∫–∞: @your_support")

if not all([TELEGRAM_TOKEN, SPREADSHEET_URL, CREDS_JSON, WEBHOOK_URL]):
    raise RuntimeError("ENV –Ω—É–∂–Ω—ã: TELEGRAM_TOKEN, SPREADSHEET_URL, GOOGLE_APPLICATION_CREDENTIALS_JSON, WEBHOOK_URL")

SCOPES = ["https://www.googleapis.com/auth/spreadsheets"]
DATA_TTL = 300
USERS_TTL = 300

def now_local_str(fmt: str = "%Y-%m-%d %H:%M:%S") -> str:
    try:
        return datetime.now(ZoneInfo(TZ_NAME)).strftime(fmt)
    except Exception:
        return datetime.utcnow().strftime(fmt)

# ---------------------- –ì–õ–û–ë–ê–õ–¨–ù–´–ï –°–û–°–¢–û–Ø–ù–ò–Ø ----------------
df: Optional[DataFrame] = None
_last_load_ts = 0.0
_search_index: Optional[Dict[str, Set[int]]] = None
_image_index: Optional[Dict[str, str]] = None

# –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
SHEET_ALLOWED: Set[int] = set()
SHEET_ADMINS: Set[int] = set()
SHEET_BLOCKED: Set[int] = set()
_last_users_ts = 0.0

# —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–∏—Å–∫–∞ –∏ —Å–ø–∏—Å–∞–Ω–∏—è
user_state: Dict[int, Dict[str, Any]] = {}
issue_state: Dict[int, Dict[str, Any]] = {}

# —Ñ–ª–∞–≥–∏ —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á
_loading_data = False
_loading_users = False

# —à–∞–≥–∏ –¥–∏–∞–ª–æ–≥–∞
ASK_QUANTITY, ASK_COMMENT, ASK_CONFIRM = range(3)

# ------------------------- –ö–ù–û–ü–ö–ò ---------------------------
def cancel_markup():
    return InlineKeyboardMarkup([[InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_action")]])

def confirm_markup():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("‚úÖ –î–∞, —Å–ø–∏—Å–∞—Ç—å", callback_data="confirm_yes"),
         InlineKeyboardButton("‚ùå –ù–µ—Ç", callback_data="confirm_no")],
        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_action")]
    ])

def more_markup():
    return InlineKeyboardMarkup([[InlineKeyboardButton("‚è≠ –ï—â—ë", callback_data="more")]])

def main_menu_markup():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üîç –ü–æ–∏—Å–∫", callback_data="menu_search")],
        [InlineKeyboardButton("üì¶ –ö–∞–∫ —Å–ø–∏—Å–∞—Ç—å –¥–µ—Ç–∞–ª—å", callback_data="menu_issue_help")],
        [InlineKeyboardButton("üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data="menu_contact")],
    ])

# ------------------------- –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–û–ï -------------------
async def _to_thread(fn, *args, **kwargs):
    return await asyncio.to_thread(fn, *args, **kwargs)

# ------------------------- GOOGLE SHEETS ---------------------
def get_gs_client():
    creds_info = json.loads(CREDS_JSON)
    creds = Credentials.from_service_account_info(creds_info, scopes=SCOPES)
    return gspread.authorize(creds)

def _open_data_worksheet(client):
    sh = client.open_by_url(SPREADSHEET_URL)
    if SHEET_NAME:
        try:
            return sh.worksheet(SHEET_NAME)
        except gspread.WorksheetNotFound:
            logger.warning(f"–õ–∏—Å—Ç {SHEET_NAME!r} –Ω–µ –Ω–∞–π–¥–µ–Ω, fallback –Ω–∞ sheet1")
    return sh.sheet1

def load_data_blocking() -> list[dict]:
    client = get_gs_client()
    ws = _open_data_worksheet(client)
    return ws.get_all_records()

SEARCH_FIELDS = ["—Ç–∏–ø", "–Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ", "–∫–æ–¥", "oem", "–∏–∑–≥–æ—Ç–æ–≤–∏—Ç–µ–ª—å"]

def build_search_index(df: DataFrame) -> Dict[str, Set[int]]:
    """–ò–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∏–Ω–¥–µ–∫—Å: —Ç–æ–∫–µ–Ω -> –º–Ω–æ–∂–µ—Å—Ç–≤–æ –∏–Ω–¥–µ–∫—Å–æ–≤ —Å—Ç—Ä–æ–∫."""
    index: DefaultDict[str, Set[int]] = defaultdict(set)
    for col in SEARCH_FIELDS:
        if col not in df.columns:
            continue
        for idx, val in df[col].astype(str).str.lower().items():
            for t in re.findall(r'\w+', val):
                if t:
                    index[t].add(idx)
    return dict(index)

def build_image_index(df: DataFrame) -> Dict[str, str]:
    """'–∫–æ–¥' -> —Å—ã—Ä–æ–π URL (–±–µ–∑ —Å–µ—Ç–µ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤)."""
    if "image" not in df.columns:
        return {}
    index = {}
    for _, row in df.iterrows():
        code = str(row.get("–∫–æ–¥", "")).strip().lower()
        if code:
            url = str(row.get("image", "")).strip()
            if url:
                index[code] = url
    return index

def initial_load():
    global df, _last_load_ts, _search_index, _image_index
    data = load_data_blocking()
    new_df = DataFrame(data)
    new_df.columns = new_df.columns.str.strip().str.lower()

    for col in ("–∫–æ–¥", "oem"):
        if col in new_df.columns:
            new_df[col] = new_df[col].astype(str).str.strip().str.lower()
    if "image" in new_df.columns:
        new_df["image"] = new_df["image"].astype(str).str.strip()

    df = new_df
    _search_index = build_search_index(df)
    _image_index = build_image_index(df)
    _last_load_ts = time.time()
    logger.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ (startup) {len(df)} —Å—Ç—Ä–æ–∫ –∏ –∏–Ω–¥–µ–∫—Å—ã")

    allowed, admins, blocked = load_users_from_sheet()
    global SHEET_ALLOWED, SHEET_ADMINS, SHEET_BLOCKED, _last_users_ts
    SHEET_ALLOWED, SHEET_ADMINS, SHEET_BLOCKED = allowed, admins, blocked
    _last_users_ts = time.time()
    logger.info(f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ (startup): allowed={len(allowed)}, admins={len(admins)}, blocked={len(blocked)}")

async def ensure_fresh_data_async(force: bool = False):
    global df, _last_load_ts, _search_index, _image_index, _loading_data
    if not force and df is not None and (time.time() - _last_load_ts <= DATA_TTL):
        return
    if _loading_data:
        return
    _loading_data = True
    try:
        data = await _to_thread(load_data_blocking)
        new_df = DataFrame(data)
        new_df.columns = new_df.columns.str.strip().str.lower()
        for col in ("–∫–æ–¥", "oem"):
            if col in new_df.columns:
                new_df[col] = new_df[col].astype(str).str.strip().str.lower()
        if "image" in new_df.columns:
            new_df["image"] = new_df["image"].astype(str).str.strip()

        df = new_df
        _search_index = build_search_index(df)
        _image_index = build_image_index(df)
        _last_load_ts = time.time()
        logger.info(f"‚úÖ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω–æ {len(df)} —Å—Ç—Ä–æ–∫ –∏ –∏–Ω–¥–µ–∫—Å—ã")
    finally:
        _loading_data = False

def ensure_fresh_data(force: bool = False):
    if not force and df is not None and (time.time() - _last_load_ts <= DATA_TTL):
        return
    asyncio.create_task(ensure_fresh_data_async(force=True))

# ------------------------- –£–¢–ò–õ–ò–¢–´ --------------------------
def val(row: dict, key: str, default: str = "‚Äî") -> str:
    v = row.get(key)
    if v is None or (isinstance(v, float) and pd.isna(v)):
        return default
    s = str(v).strip()
    return s if s else default

def format_row(row: dict) -> str:
    return (
        f"üîπ –¢–∏–ø: {val(row, '—Ç–∏–ø')}\n"
        f"üì¶ –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ: {val(row, '–Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ')}\n"
        f"üî¢ –ö–æ–¥: {val(row, '–∫–æ–¥')}\n"
        f"üì¶ –ö–æ–ª-–≤–æ: {val(row, '–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ')}\n"
        f"üí∞ –¶–µ–Ω–∞: {val(row, '—Ü–µ–Ω–∞')} {val(row, '–≤–∞–ª—é—Ç–∞')}\n"
        f"üè≠ –ò–∑–≥–æ—Ç–æ–≤–∏—Ç–µ–ª—å: {val(row, '–∏–∑–≥–æ—Ç–æ–≤–∏—Ç–µ–ª—å')}\n"
        f"‚öôÔ∏è OEM: {val(row, 'oem')}"
    )

def normalize(text: str) -> str:
    return re.sub(r"[^\w\s]", " ", (text or "")).lower().strip()

def squash(text: str) -> str:
    return re.sub(r"[\W_]+", "", (text or "").lower(), flags=re.UNICODE)

# ---------- –†–∞–±–æ—Ç–∞ —Å–æ —Å—Å—ã–ª–∫–∞–º–∏ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è ----------
def normalize_drive_url(url: str) -> str:
    m = re.search(r'drive\.google\.com/(?:file/d/([-\w]{20,})|open\?id=([-\w]{20,}))', url)
    if m:
        file_id = m.group(1) or m.group(2)
        return f'https://drive.google.com/uc?export=download&id={file_id}'
    return url

async def resolve_ibb_direct_async(url: str) -> str:
    """–ò–∑ ibb.co/* HTML-—Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–æ—Å—Ç–∞—ë–º og:image (i.ibb.co/...) ‚Äî –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ."""
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(url, timeout=12) as resp:
                if resp.status != 200:
                    return url
                html = await resp.text()
        m = re.search(r'<meta[^>]+property=["\']og:image["\'][^>]+content=["\']([^"\']+)["\']', html, re.I)
        return m.group(1) if m else url
    except Exception as e:
        logger.warning(f"resolve_ibb_direct_async fail: {e}")
        return url

async def resolve_image_url_async(u: str) -> str:
    u = (u or "").strip()
    if not u:
        return u
    if "drive.google.com" in u:
        return normalize_drive_url(u)
    if re.match(r"^https?://(www\.)?ibb\.co/", u, re.I):
        return await resolve_ibb_direct_async(u)
    return u

async def find_image_by_code_async(code: str) -> str:
    if not code or _image_index is None:
        return ""
    return _image_index.get(code.strip().lower(), "")

async def _download_image_async(url: str) -> Optional[io.BytesIO]:
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(url, timeout=12) as resp:
                if resp.status != 200:
                    return None
                data = await resp.read()
                if len(data) > 5_000_000:
                    return None
                bio = io.BytesIO(data)
                bio.name = "image"
                return bio
    except Exception as e:
        logger.warning(f"Download failed: {e}")
        return None

async def send_row_with_image(update: Update, row: dict, text: str):
    code = str(row.get("–∫–æ–¥", "")).strip()
    kb = InlineKeyboardMarkup([[InlineKeyboardButton("üì¶ –í–∑—è—Ç—å –¥–µ—Ç–∞–ª—å", callback_data=f"issue:{code.lower()}")]])
    url_raw = await find_image_by_code_async(code)
    url = await resolve_image_url_async(url_raw)

    if url:
        try:
            await update.message.reply_photo(photo=url, caption=text, reply_markup=kb)
            return
        except Exception as e:
            logger.warning(f"URL —Ñ–æ—Ç–æ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª ({url}): {e}")
            bio = await _download_image_async(url)
            if bio:
                try:
                    await update.message.reply_photo(photo=bio, caption=text, reply_markup=kb)
                    return
                except Exception as e2:
                    logger.warning(f"–°–∫–∞—á–∏–≤–∞–Ω–∏–µ/–æ—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ç–æ –Ω–µ —É–¥–∞–ª–æ—Å—å: {e2} (src: {url})")

    await update.message.reply_text(text, reply_markup=kb)

async def send_row_with_image_bot(bot, chat_id: int, row: dict, text: str):
    code = str(row.get("–∫–æ–¥", "")).strip()
    kb = InlineKeyboardMarkup([[InlineKeyboardButton("üì¶ –í–∑—è—Ç—å –¥–µ—Ç–∞–ª—å", callback_data=f"issue:{code.lower()}")]])
    url_raw = await find_image_by_code_async(code)
    url = await resolve_image_url_async(url_raw)
    if url:
        try:
            await bot.send_photo(chat_id=chat_id, photo=url, caption=text, reply_markup=kb)
            return
        except Exception as e:
            logger.warning(f"URL —Ñ–æ—Ç–æ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª ({url}): {e}")
            bio = await _download_image_async(url)
            if bio:
                try:
                    await bot.send_photo(chat_id=chat_id, photo=bio, caption=text, reply_markup=kb)
                    return
                except Exception as e2:
                    logger.warning(f"–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–∫–∞—á–∞–Ω–Ω–æ–≥–æ —Ñ–æ—Ç–æ –Ω–µ —É–¥–∞–ª–∞—Å—å: {e2} (src: {url})")
    await bot.send_message(chat_id=chat_id, text=text, reply_markup=kb)

# --------------------- –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ò -------------------------
def _truthy(x) -> bool:
    s = str(x).strip().lower()
    return s in {"1", "true", "yes", "y", "–¥–∞", "–∏—Å—Ç–∏–Ω–∞", "ok", "–æ–∫", "allowed", "—Ä–∞–∑—Ä–µ—à–µ–Ω", "—Ä–∞–∑—Ä–µ—à–µ–Ω–æ"} or (s.isdigit() and int(s) > 0)

def _to_int_or_none(x):
    try:
        if x is None or (isinstance(x, float) and pd.isna(x)):
            return None
        s = str(x).strip()
        if not s:
            return None
        m = re.search(r"-?\d+", s)
        return int(m.group(0)) if m else None
    except Exception:
        return None

def load_users_from_sheet():
    client = get_gs_client()
    sh = client.open_by_url(SPREADSHEET_URL)
    try:
        ws = sh.worksheet("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏")
    except gspread.WorksheetNotFound:
        try:
            ws = sh.worksheet("Users")
        except gspread.WorksheetNotFound:
            logger.info("–õ–∏—Å—Ç '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏' –Ω–µ –Ω–∞–π–¥–µ–Ω ‚Äî –¥–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à—ë–Ω –≤—Å–µ–º.")
            return set(), set(), set()

    rows = ws.get_all_records()
    if not rows:
        logger.info("–õ–∏—Å—Ç '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏' –ø—É—Å—Ç ‚Äî –¥–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à—ë–Ω –≤—Å–µ–º.")
        return set(), set(), set()

    allowed, admins, blocked = set(), set(), set()
    for row in rows:
        r = {str(k).strip().lower(): v for k, v in row.items()}
        uid = (
            _to_int_or_none(r.get("user_id"))
            or _to_int_or_none(r.get("userid"))
            or _to_int_or_none(r.get("id"))
            or _to_int_or_none(r.get("uid"))
            or _to_int_or_none(r.get("—Ç–µ–ª–µ–≥—Ä–∞–º id"))
            or _to_int_or_none(r.get("–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"))
        )
        if not uid:
            continue

        role = str(r.get("role") or r.get("—Ä–æ–ª—å") or "").strip().lower()
        is_admin = role in {"admin", "–∞–¥–º–∏–Ω", "administrator", "–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä"} or _truthy(r.get("admin"))
        is_allowed = _truthy(r.get("allowed") or r.get("–¥–æ—Å—Ç—É–ø") or (not role or role == "user"))
        is_blocked = _truthy(r.get("blocked") or r.get("ban") or r.get("–∑–∞–ø—Ä–µ—Ç"))

        if is_blocked:
            blocked.add(uid)
        if is_admin:
            admins.add(uid)
            is_allowed = True
        if is_allowed:
            allowed.add(uid)

    return allowed, admins, blocked

async def ensure_users_async(force: bool = False):
    global SHEET_ALLOWED, SHEET_ADMINS, SHEET_BLOCKED, _last_users_ts, _loading_users
    if not force and (time.time() - _last_users_ts <= USERS_TTL):
        return
    if _loading_users:
        return
    _loading_users = True
    try:
        allowed, admins, blocked = await _to_thread(load_users_from_sheet)
        SHEET_ALLOWED, SHEET_ADMINS, SHEET_BLOCKED = allowed, admins, blocked
        _last_users_ts = time.time()
        logger.info(f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: allowed={len(allowed)}, admins={len(admins)}, blocked={len(blocked)}")
    finally:
        _loading_users = False

def ensure_users(force: bool = False):
    if not force and (time.time() - _last_users_ts <= USERS_TTL):
        return
    asyncio.create_task(ensure_users_async(force=True))

def is_admin(uid: int) -> bool:
    ensure_users()
    return uid in SHEET_ADMINS or uid in ADMINS

def is_allowed(uid: int) -> bool:
    ensure_users()
    if uid in SHEET_BLOCKED:
        return False
    if SHEET_ALLOWED:
        return (uid in SHEET_ALLOWED) or (uid in SHEET_ADMINS) or (uid in ADMINS)
    return True

# --------------------- –ì–í–ê–†–î–´ -----------------------
async def guard_msg(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    if user and not is_allowed(user.id):
        try:
            await update.effective_message.reply_text("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
        except Exception:
            pass
        raise ApplicationHandlerStop

async def guard_cb(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    if user and not is_allowed(user.id):
        try:
            await update.callback_query.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.", show_alert=True)
        except Exception:
            pass
        raise ApplicationHandlerStop

# --------------------- –°–û–•–†–ê–ù–ï–ù–ò–ï –°–ü–ò–°–ê–ù–ò–ô -------------------
def save_issue_to_sheet_blocking(bot, user, part: dict, quantity, comment: str):
    client = get_gs_client()
    sh = client.open_by_url(SPREADSHEET_URL)
    try:
        ws = sh.worksheet("–ò—Å—Ç–æ—Ä–∏—è")
    except gspread.WorksheetNotFound:
        ws = sh.add_worksheet(title="–ò—Å—Ç–æ—Ä–∏—è", rows=1000, cols=12)
        ws.append_row(["–î–∞—Ç–∞", "ID", "–ò–º—è", "–¢–∏–ø", "–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ", "–ö–æ–¥", "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ", "–ö–æ–º–µ–Ω—Ç–∞—Ä–∏–π"])

    headers_raw = ws.row_values(1)
    headers = [h.strip() for h in headers_raw]
    norm = [h.lower() for h in headers]

    full_name = f"{(user.first_name or '').strip()} {(user.last_name or '').strip()}".strip()
    display_name = full_name or (f"@{user.username}" if user.username else str(user.id))
    ts = now_local_str()

    values_by_key = {
        "–¥–∞—Ç–∞": ts, "timestamp": ts,
        "id": user.id, "user_id": user.id,
        "–∏–º—è": display_name, "name": display_name,
        "—Ç–∏–ø": str(part.get("—Ç–∏–ø", "")), "type": str(part.get("—Ç–∏–ø", "")),
        "–Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ": str(part.get("–Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ", "")), "name_item": str(part.get("–Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ", "")),
        "–∫–æ–¥": str(part.get("–∫–æ–¥", "")), "code": str(part.get("–∫–æ–¥", "")),
        "Êï∞Èáè": str(quantity), "–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ": str(quantity), "qty": str(quantity),
        "–∫–æ–º–µ–Ω—Ç–∞—Ä–∏–π": comment or "", "–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π": comment or "", "comment": comment or "",
    }

    row = [values_by_key.get(hn, "") for hn in norm]
    ws.append_row(row, value_input_option="USER_ENTERED")
    logger.info("üíæ –°–ø–∏—Å–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∞–Ω–æ –≤ '–ò—Å—Ç–æ—Ä–∏—è'")

async def save_issue_to_sheet(bot, user, part: dict, quantity, comment: str):
    try:
        await _to_thread(save_issue_to_sheet_blocking, bot, user, part, quantity, comment)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ —Å–ø–∏—Å–∞–Ω–∏—è: {e}")
        async def notify():
            for admin_id in (SHEET_ADMINS | ADMINS):
                try:
                    await bot.send_message(admin_id, f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–ø–∏—Å–∞–Ω–∏—è: {e}")
                except Exception:
                    pass
        asyncio.create_task(notify())

# ------------------------- –ü–†–ò–í–ï–¢–°–¢–í–ò–ï -----------------------
async def send_welcome_sequence(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    user = update.effective_user
    first = (user.first_name or "").strip() or "–∫–æ–ª–ª–µ–≥–∞"

    # 1) –ú–µ–¥–∏–∞-–ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
    sent_visual = False
    try:
        if WELCOME_ANIMATION_URL:
            await context.bot.send_animation(
                chat_id=chat_id,
                animation=WELCOME_ANIMATION_URL,
                caption=f"‚öôÔ∏è –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {first}! ‚öôÔ∏è",
                parse_mode="Markdown"
            )
            sent_visual = True
        elif WELCOME_PHOTO_URL:
            await context.bot.send_photo(
                chat_id=chat_id,
                photo=WELCOME_PHOTO_URL,
                caption=f"‚öôÔ∏è –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {first}! ‚öôÔ∏è",
                parse_mode="Markdown"
            )
            sent_visual = True
    except Exception as e:
        logger.warning(f"Welcome media failed: {e}")

    # 2) –¢–µ–∫—Å—Ç –∏ –º–µ–Ω—é
    text_intro = (
        f"‚öôÔ∏è *–ü—Ä–∏–≤–µ—Ç, {first}!* \n\n"
        "–≠—Ç–æ –∏–Ω–∂–µ–Ω–µ—Ä–Ω—ã–π –±–æ—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏ —Å–ø–∏—Å–∞–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π.\n"
        "‚Äî –í–≤–µ–¥–∏—Ç–µ *–Ω–∞–∑–≤–∞–Ω–∏–µ*, *–∫–æ–¥* –∏–ª–∏ *–º–æ–¥–µ–ª—å*.\n"
        "‚Äî –î–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ.\n\n"
        "–£–¥–∞—á–Ω–æ–π —Ä–∞–±–æ—Ç—ã! üöÄ"
    )
    if sent_visual:
        await asyncio.sleep(0.5)

    await context.bot.send_message(
        chat_id=chat_id,
        text=text_intro,
        parse_mode="Markdown",
        reply_markup=main_menu_markup()
    )

# ------------------------- –ö–û–ú–ê–ù–î–´ --------------------------
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    issue_state.pop(uid, None)
    user_state.pop(uid, None)

    # –ö—Ä–∞—Å–æ—á–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
    await send_welcome_sequence(update, context)

    # –ü–æ–¥—Å–∫–∞–∑–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º
    if update.message:
        await asyncio.sleep(0.2)
        await update.message.reply_text(
            "–ö–æ–º–∞–Ω–¥—ã:\n"
            "‚Ä¢ /help ‚Äî –ø–æ–º–æ—â—å\n"
            "‚Ä¢ /more ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –µ—â—ë\n"
            "‚Ä¢ /export ‚Äî –≤—ã–≥—Ä—É–∑–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ (XLSX/CSV)\n"
            "‚Ä¢ /cancel ‚Äî –æ—Ç–º–µ–Ω–∏—Ç—å —Å–ø–∏—Å–∞–Ω–∏–µ\n"
            "‚Ä¢ /reload ‚Äî –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω)",
            parse_mode="Markdown"
        )

async def help_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "1) –í—ã–ø–æ–ª–Ω–∏—Ç–µ –ø–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é/–º–æ–¥–µ–ª–∏/–∫–æ–¥—É.\n"
        "2) –í –∫–∞—Ä—Ç–æ—á–∫–µ –Ω–∞–∂–º–∏—Ç–µ ¬´üì¶ –í–∑—è—Ç—å –¥–µ—Ç–∞–ª—å¬ª ‚Äî –±–æ—Ç —Å–ø—Ä–æ—Å–∏—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π,\n"
        "   –∑–∞—Ç–µ–º –ø–æ–ø—Ä–æ—Å–∏—Ç –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Å–ø–∏—Å–∞–Ω–∏–µ (–î–∞/–ù–µ—Ç).\n"
        "–£ –í–ê–° –í–°–ï –ü–û–õ–£–ß–ò–¢–°–Ø.",
        parse_mode="Markdown"
    )

async def reload_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    if not is_admin(uid):
        return await update.message.reply_text("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
    ensure_fresh_data(force=True)
    ensure_users(force=True)
    await update.message.reply_text("‚úÖ –î–∞–Ω–Ω—ã–µ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω—ã (–≤ —Ñ–æ–Ω–µ).")

async def cancel_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    if issue_state.pop(uid, None):
        await update.message.reply_text("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è —Å–ø–∏—Å–∞–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    else:
        await update.message.reply_text("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏.")

async def export_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    st = user_state.get(uid, {})
    results = st.get("results", DataFrame())
    if results.empty:
        return await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –ø–æ–∏—Å–∫.")

    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    try:
        import openpyxl  # noqa: F401
        buf = await _to_thread(_df_to_xlsx, results, f"export_{timestamp}.xlsx")
        await update.message.reply_document(InputFile(buf, filename=f"export_{timestamp}.xlsx"))
    except Exception as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å XLSX (fallback CSV): {e}")
        csv = results.to_csv(index=False, encoding="utf-8-sig")
        await update.message.reply_document(
            InputFile(io.BytesIO(csv.encode("utf-8-sig")), filename=f"export_{timestamp}.csv")
        )

def _df_to_xlsx(df: DataFrame, name: str) -> io.BytesIO:
    buf = io.BytesIO()
    with pd.ExcelWriter(buf, engine="openpyxl") as w:
        df.to_excel(w, index=False)
    buf.seek(0)
    buf.name = name
    return buf

# –ú–µ–Ω—é –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è ‚Äî callbacks
async def menu_search_cb(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()
    await q.message.reply_text("üîç –í–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å: –Ω–∞–∑–≤–∞–Ω–∏–µ/–º–æ–¥–µ–ª—å/–∫–æ–¥. –ü—Ä–∏–º–µ—Ä: `PI 8808 DRG 500`", parse_mode="Markdown")

async def menu_issue_help_cb(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()
    await q.message.reply_text(
        "–ö–∞–∫ —Å–ø–∏—Å–∞—Ç—å –¥–µ—Ç–∞–ª—å:\n"
        "1) –í—ã–ø–æ–ª–Ω–∏—Ç–µ –ø–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é/–∫–æ–¥—É.\n"
        "2) –í –∫–∞—Ä—Ç–æ—á–∫–µ –Ω–∞–∂–º–∏—Ç–µ ¬´üì¶ –í–∑—è—Ç—å –¥–µ—Ç–∞–ª—å¬ª.\n"
        "3) –£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π.\n"
        "4) –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Å–ø–∏—Å–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–æ–π ¬´–î–∞¬ª.",
        parse_mode="Markdown"
    )

async def menu_contact_cb(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()
    await q.message.reply_text(f"{SUPPORT_CONTACT}")

# ------------------------- –ü–û–ò–°–ö -----------------------------
def match_row_by_index(tokens: List[str]) -> Set[int]:
    """–¢–æ—á–Ω—ã–π –±—ã—Å—Ç—Ä—ã–π –º–∞—Ç—á –ø–æ –∏–Ω–¥–µ–∫—Å—É (–≤—Å–µ —Ç–æ–∫–µ–Ω—ã –∫–∞–∫ —Å–ª–æ–≤–∞)."""
    if not _search_index:
        return set()
    result = None
    for t in tokens:
        indices = _search_index.get(t, set())
        if result is None:
            result = indices.copy()
        else:
            result &= indices
        if not result:
            break
    return result or set()

def _safe_col(df: DataFrame, col: str) -> Optional[pd.Series]:
    return df[col].astype(str).str.lower() if col in df.columns else None

def _relevance_score(row: dict, tokens: List[str], q_squash: str) -> int:
    """–°–∫–æ—Ä–∏–Ω–≥ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏: —Ç–æ—á–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã > –ø–æ–¥—Å—Ç—Ä–æ–∫–∏; boost –∫–æ–¥/oem; —Å–ª–∏—Ç–Ω—ã–π –º–∞—Ç—á."""
    score = 0
    for f in SEARCH_FIELDS:
        val = str(row.get(f, "")).lower()
        if not val:
            continue
        words = set(re.findall(r'\w+', val))
        tok_hit = sum(1 for t in tokens if t in words)
        sub_hit = sum(1 for t in tokens if t and t in val)
        sq = re.sub(r'[\W_]+', '', val)
        squash_hit = 1 if q_squash and q_squash in sq else 0
        weight = 2 if f in ("–∫–æ–¥", "oem") else 1
        score += weight * (2 * tok_hit + sub_hit) + 3 * squash_hit * weight
    return score

async def search_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    ensure_fresh_data()
    if update.message is None:
        return

    if context.chat_data.pop("suppress_next_search", False):
        return

    uid = update.effective_user.id
    st_issue = issue_state.get(uid)
    if st_issue:
        if "quantity" not in st_issue:
            return await update.message.reply_text(
                "–í—ã –≤–≤–æ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ ¬´–û—Ç–º–µ–Ω–∏—Ç—å¬ª.",
                reply_markup=cancel_markup()
            )
        if st_issue.get("await_comment"):
            return await update.message.reply_text(
                "–í—ã –≤–≤–æ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π. –ù–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç –∏–ª–∏ ¬´-¬ª, –ª–∏–±–æ –Ω–∞–∂–º–∏—Ç–µ ¬´–û—Ç–º–µ–Ω–∏—Ç—å¬ª.",
                reply_markup=cancel_markup()
            )

    q = update.message.text.strip()
    if not q:
        return await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å.")
    tokens = normalize(q).split()
    if not tokens:
        return await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –±–æ–ª–µ–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å.")
    q_squash = squash(q)

    if df is None:
        await ensure_fresh_data_async(force=True)
        if df is None:
            return await update.message.reply_text("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö.")

    # 1) –±—ã—Å—Ç—Ä—ã–π —Ç–æ—á–Ω—ã–π –∏–Ω–¥–µ–∫—Å
    matched_indices = match_row_by_index(tokens)

    # 2) –ø–æ–¥—Å—Ç—Ä–æ–∫–∏ –ø–æ –ª—é–±–æ–º—É –ø–æ–ª—é (–≤—Å–µ —Ç–æ–∫–µ–Ω—ã –¥–æ–ª–∂–Ω—ã –≤—Å—Ç—Ä–µ—Ç–∏—Ç—å—Å—è –≤ –æ–¥–Ω–æ–º –ø–æ–ª–µ)
    if not matched_indices:
        mask_any = pd.Series(False, index=df.index)
        for col in SEARCH_FIELDS:
            series = _safe_col(df, col)
            if series is None:
                continue
            field_mask = pd.Series(True, index=df.index)
            for t in tokens:
                if t:
                    field_mask &= series.str.contains(re.escape(t), na=False)
            mask_any |= field_mask
        matched_indices = set(df.index[mask_any])

    # 3) ¬´—Å–ª–∏—Ç–Ω—ã–π¬ª —Ñ–æ–ª–±—ç–∫ –ø–æ –≤—Å–µ–º –ø–æ–ª—è–º
    if not matched_indices and q_squash:
        mask_any = pd.Series(False, index=df.index)
        for col in SEARCH_FIELDS:
            series = _safe_col(df, col)
            if series is None:
                continue
            series_sq = series.str.replace(r'[\W_]+', '', regex=True)
            mask_any |= series_sq.str.contains(re.escape(q_squash), na=False)
        matched_indices = set(df.index[mask_any])

    if not matched_indices:
        return await update.message.reply_text(f"–ü–æ –∑–∞–ø—Ä–æ—Å—É ¬´{q}¬ª –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")

    # –†–∞–Ω–∂–∏—Ä—É–µ–º –ø–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏
    idx_list = list(matched_indices)
    results_df = df.loc[idx_list].copy()

    scores: List[int] = []
    for _, r in results_df.iterrows():
        scores.append(_relevance_score(r.to_dict(), tokens, q_squash))
    results_df["__score"] = scores

    if "–∫–æ–¥" in results_df.columns:
        results_df = results_df.sort_values(
            by=["__score", "–∫–æ–¥"],
            ascending=[False, True],
            key=lambda s: s if s.name != "–∫–æ–¥" else s.astype(str).str.len()
        )
    else:
        results_df = results_df.sort_values(by=["__score"], ascending=False)
    results_df = results_df.drop(columns="__score")

    st = user_state.setdefault(uid, {})
    st["query"] = q
    st["results"] = results_df
    st["page"] = 0

    await send_page(update, uid)

async def more_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    st = user_state.get(uid, {})
    results = st.get("results", DataFrame())
    if results.empty:
        return await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –ø–æ–∏—Å–∫.")
    st["page"] = st.get("page", 0) + 1
    await send_page(update, uid)

async def send_page(update: Update, uid: int):
    st = user_state.get(uid, {})
    results: DataFrame = st.get("results", DataFrame())
    page = st.get("page", 0)

    total = len(results)
    if total == 0:
        return await update.message.reply_text("–†–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –±–æ–ª—å—à–µ –Ω–µ—Ç.")
    pages = max(1, math.ceil(total / PAGE_SIZE))
    if page >= pages:
        st["page"] = pages - 1
        return await update.message.reply_text("–ë–æ–ª—å—à–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–µ—Ç.")

    start = page * PAGE_SIZE
    end = min(start + PAGE_SIZE, total)

    await update.message.reply_text(f"–°—Ç—Ä. {page+1}/{pages}. –ü–æ–∫–∞–∑—ã–≤–∞—é {start + 1}‚Äì{end} –∏–∑ {total}.")
    for _, row in results.iloc[start:end].iterrows():
        await send_row_with_image(update, row.to_dict(), format_row(row.to_dict()))
    if end < total:
        await update.message.reply_text("–ü–æ–∫–∞–∑–∞—Ç—å –µ—â—ë?", reply_markup=more_markup())

async def send_page_via_bot(bot, chat_id: int, uid: int):
    st = user_state.get(uid, {})
    results: DataFrame = st.get("results", DataFrame())
    page = st.get("page", 0)
    total = len(results)
    if total == 0:
        return await bot.send_message(chat_id=chat_id, text="–†–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –±–æ–ª—å—à–µ –Ω–µ—Ç.")
    pages = max(1, math.ceil(total / PAGE_SIZE))
    if page >= pages:
        st["page"] = pages - 1
        return await bot.send_message(chat_id=chat_id, text="–ë–æ–ª—å—à–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–µ—Ç.")
    start = page * PAGE_SIZE
    end = min(start + PAGE_SIZE, total)
    await bot.send_message(chat_id=chat_id, text=f"–°—Ç—Ä. {page+1}/{pages}. –ü–æ–∫–∞–∑—ã–≤–∞—é {start + 1}‚Äì{end} –∏–∑ {total}.")
    chunk = results.iloc[start:end]
    for _, row in chunk.iterrows():
        await send_row_with_image_bot(bot, chat_id, row.to_dict(), format_row(row.to_dict()))
    if end < total:
        await bot.send_message(chat_id=chat_id, text="–ü–æ–∫–∞–∑–∞—Ç—å –µ—â—ë?", reply_markup=more_markup())

# ------------------ –°–ü–ò–°–ê–ù–ò–ï (–î–∏–∞–ª–æ–≥) -----------------------
async def on_issue_click(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()

    uid = q.from_user.id
    code = q.data.split(":", 1)[1].strip().lower()

    ensure_fresh_data()
    found = None
    if df is not None and "–∫–æ–¥" in df.columns:
        hit = df[df["–∫–æ–¥"].astype(str).str.lower() == code]
        if not hit.empty:
            found = hit.iloc[0].to_dict()

    if not found:
        return await q.edit_message_text("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –¥–µ—Ç–∞–ª—å –ø–æ –∫–æ–¥—É. –í—ã–ø–æ–ª–Ω–∏—Ç–µ –ø–æ–∏—Å–∫ –∑–∞–Ω–æ–≤–æ.")

    issue_state[uid] = {"part": found}
    await q.message.reply_text("–°–∫–æ–ª—å–∫–æ —Å–ø–∏—Å–∞—Ç—å? –£–∫–∞–∂–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1 –∏–ª–∏ 2.5).", reply_markup=cancel_markup())
    return ASK_QUANTITY

async def handle_quantity(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.chat_data["suppress_next_search"] = True

    uid = update.effective_user.id
    text = (update.message.text or "").strip().replace(",", ".")
    try:
        qty = float(text)
        if not math.isfinite(qty) or qty <= 0 or qty > MAX_QTY:
            raise ValueError
        qty = float(f"{qty:.3f}")
    except Exception:
        return await update.message.reply_text(
            f"–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ > 0 –∏ ‚â§ {MAX_QTY}. –ü—Ä–∏–º–µ—Ä: 1 –∏–ª–∏ 2.5",
            reply_markup=cancel_markup()
        )

    st = issue_state.get(uid)
    if not st or "part" not in st:
        return await update.message.reply_text("–°–ø–∏—Å–∞–Ω–∏–µ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ ‚Äî –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ –∏–∑ –∫–∞—Ä—Ç–æ—á–∫–∏.")

    st["quantity"] = qty
    st["await_comment"] = True
    await update.message.reply_text("–î–æ–±–∞–≤—å—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (–Ω–∞–ø—Ä–∏–º–µ—Ä: –õ–∏–Ω–∏—è —Å–±–æ—Ä–∫–∏ CSS OP-1100).", reply_markup=cancel_markup())
    return ASK_COMMENT

async def handle_comment(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.chat_data["suppress_next_search"] = True

    uid = update.effective_user.id
    comment = (update.message.text or "").strip()
    st = issue_state.get(uid)
    if not st:
        return await update.message.reply_text("–°–ø–∏—Å–∞–Ω–∏–µ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ –∏–∑ –∫–∞—Ä—Ç–æ—á–∫–∏.")

    part = st.get("part")
    qty = st.get("quantity")
    if part is None or qty is None:
        issue_state.pop(uid, None)
        return await update.message.reply_text("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")

    st["comment"] = "" if comment == "-" else comment
    st["await_comment"] = False

    text = (
        "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–ø–∏—Å–∞—Ç—å –¥–µ—Ç–∞–ª—å?\n\n"
        f"üî¢ –ö–æ–¥: {val(part, '–∫–æ–¥')}\n"
        f"üì¶ –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ: {val(part, '–Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ')}\n"
        f"üì¶ –ö–æ–ª-–≤–æ: {qty}\n"
        f"üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {st['comment'] or '‚Äî'}"
    )
    await update.message.reply_text(text, reply_markup=confirm_markup())
    return ASK_CONFIRM

async def handle_confirm(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()
    uid = q.from_user.id

    if q.data == "confirm_yes":
        st = issue_state.get(uid)
        if not st or "part" not in st or "quantity" not in st:
            issue_state.pop(uid, None)
            return await q.message.reply_text("–î–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–ø–∏—Å–∞–Ω–∏—è –Ω–µ—Ç. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
        part = st["part"]
        qty = st["quantity"]
        comment = st.get("comment", "")

        await save_issue_to_sheet(context.bot, q.from_user, part, qty, comment)
        issue_state.pop(uid, None)

        await q.message.reply_text(
            f"‚úÖ –°–ø–∏—Å–∞–Ω–æ: {qty}\n"
            f"üî¢ –ö–æ–¥: {val(part, '–∫–æ–¥')}\n"
            f"üì¶ –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ: {val(part, '–Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ')}\n"
            f"üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {comment or '‚Äî'}"
        )
        return ConversationHandler.END

    if q.data == "confirm_no":
        issue_state.pop(uid, None)
        await q.message.reply_text("‚ùå –°–ø–∏—Å–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
        return ConversationHandler.END

async def cancel_action(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()
    uid = q.from_user.id
    if uid in issue_state:
        issue_state.pop(uid, None)
        await q.message.reply_text("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è —Å–ø–∏—Å–∞–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    return ConversationHandler.END

async def handle_cancel_in_dialog(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await cancel_cmd(update, context)
    return ConversationHandler.END

async def on_more_click(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()
    uid = q.from_user.id
    st = user_state.get(uid, {})
    results = st.get("results", DataFrame())
    if results.empty:
        return await q.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –ø–æ–∏—Å–∫.")
    st["page"] = st.get("page", 0) + 1
    chat_id = q.message.chat.id
    await send_page_via_bot(context.bot, chat_id, uid)

# --------------------- ERROR HANDLER -------------------------
async def on_error(update: object, context: ContextTypes.DEFAULT_TYPE):
    logger.exception("Unhandled error: %s", context.error)
    msg = f"‚ùå –û—à–∏–±–∫–∞: {context.error}"
    for admin_id in (SHEET_ADMINS | ADMINS):
        try:
            await context.bot.send_message(admin_id, msg)
        except Exception:
            pass

# --------------------- APP / WEBHOOK ------------------------
def build_app():
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()

    app.add_handler(MessageHandler(filters.ALL, guard_msg), group=-1)
    app.add_handler(CallbackQueryHandler(guard_cb, pattern=".*"), group=-1)

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_cmd))
    app.add_handler(CommandHandler("more", more_cmd))
    app.add_handler(CommandHandler("export", export_cmd))
    app.add_handler(CommandHandler("reload", reload_cmd))
    app.add_handler(CommandHandler("cancel", cancel_cmd))

    # –ú–µ–Ω—é –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
    app.add_handler(CallbackQueryHandler(menu_search_cb, pattern=r"^menu_search$"))
    app.add_handler(CallbackQueryHandler(menu_issue_help_cb, pattern=r"^menu_issue_help$"))
    app.add_handler(CallbackQueryHandler(menu_contact_cb, pattern=r"^menu_contact$"))

    app.add_handler(CallbackQueryHandler(on_more_click, pattern=r"^more$"))
    app.add_handler(CallbackQueryHandler(cancel_action, pattern=r"^cancel_action$"))

    conv = ConversationHandler(
        entry_points=[CallbackQueryHandler(on_issue_click, pattern=r"^issue:")],
        states={
            ASK_QUANTITY: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_quantity),
                CallbackQueryHandler(cancel_action, pattern=r"^cancel_action$")
            ],
            ASK_COMMENT: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_comment),
                CallbackQueryHandler(cancel_action, pattern=r"^cancel_action$")
            ],
            ASK_CONFIRM: [
                CallbackQueryHandler(handle_confirm, pattern=r"^confirm_(yes|no)$"),
                CallbackQueryHandler(cancel_action, pattern=r"^cancel_action$")
            ],
        },
        fallbacks=[CommandHandler("cancel", handle_cancel_in_dialog)],
        allow_reentry=True,
        # –Ø–≤–Ω–æ —Ñ–∏–∫—Å–∏—Ä—É–µ–º per_* (–º–æ–∂–µ—Ç –ø–æ–∫–∞–∑–∞—Ç—å warning –æ—Ç PTB ‚Äî —ç—Ç–æ –æ–∫)
        per_chat=True,
        per_user=True,
        per_message=False,
    )
    app.add_handler(conv)

    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, search_text), group=1)
    app.add_error_handler(on_error)

    return app

if __name__ == "__main__":
    logger.info(f"‚åö –ò—Å–ø–æ–ª—å–∑—É–µ–º —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å: {TZ_NAME}")
    if not WEBHOOK_SECRET_TOKEN:
        logger.warning("WEBHOOK_SECRET_TOKEN –Ω–µ –∑–∞–¥–∞–Ω ‚Äî —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –≤–∫–ª—é—á–∏—Ç—å –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞.")

    initial_load()
    application = build_app()

    full_webhook = f"{WEBHOOK_URL}{WEBHOOK_PATH}"
    logger.info(f"üöÄ –°—Ç–∞—Ä—Ç—É–µ–º webhook-—Å–µ—Ä–≤–µ—Ä –Ω–∞ 0.0.0.0:{PORT}")
    logger.info(f"üåê –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º webhook: {full_webhook}")

    application.run_webhook(
        listen="0.0.0.0",
        port=PORT,
        secret_token=WEBHOOK_SECRET_TOKEN or None,
        webhook_url=full_webhook,
        url_path=WEBHOOK_PATH.lstrip("/"),
        drop_pending_updates=True,
        allowed_updates=None,
    )
