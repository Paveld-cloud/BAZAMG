import os
import re
import io
import json
import math
import time
import asyncio
import logging
from datetime import datetime
from io import BytesIO
from zoneinfo import ZoneInfo  # –ª–æ–∫–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è –ò—Å—Ç–æ—Ä–∏–∏

import requests
import gspread
import pandas as pd
from google.oauth2.service_account import Credentials
from pandas import DataFrame
from telegram import (
    Update, InputFile, InlineKeyboardMarkup, InlineKeyboardButton
)
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler, CallbackQueryHandler,
    ConversationHandler, ContextTypes, filters, ApplicationHandlerStop
)

# --------------------------- –õ–û–ì–ò ---------------------------
logging.basicConfig(level=logging.INFO, format="%(asctime)s %(levelname)s %(message)s")
logger = logging.getLogger("bot")

# -------------------------- –ù–ê–°–¢–†–û–ô–ö–ò -----------------------
ADMINS = {225177765}  # –ª–æ–∫–∞–ª—å–Ω—ã–µ –∞–¥–º–∏–Ω—ã (–¥–æ–±–∞–≤–∫–∞ –∫ –ª–∏—Å—Ç—É)

TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
SPREADSHEET_URL = os.getenv("SPREADSHEET_URL")
CREDS_JSON = os.getenv("GOOGLE_APPLICATION_CREDENTIALS_JSON")

WEBHOOK_URL = (os.getenv("WEBHOOK_URL") or "").rstrip("/")
WEBHOOK_PATH = os.getenv("WEBHOOK_PATH", "/webhook")
PORT = int(os.getenv("PORT", "8080"))
WEBHOOK_SECRET_TOKEN = os.getenv("WEBHOOK_SECRET_TOKEN", "")

# –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å –¥–ª—è –∑–∞–ø–∏—Å–∏ –≤ –ò—Å—Ç–æ—Ä–∏—é
TZ_NAME = os.getenv("TIMEZONE", "Europe/Moscow")
def now_local_str(fmt: str = "%Y-%m-%d %H:%M:%S") -> str:
    try:
        return datetime.now(ZoneInfo(TZ_NAME)).strftime(fmt)
    except Exception:
        return datetime.utcnow().strftime(fmt)

if not TELEGRAM_TOKEN or not SPREADSHEET_URL or not CREDS_JSON or not WEBHOOK_URL:
    raise RuntimeError(
        "ENV –Ω—É–∂–Ω—ã: TELEGRAM_TOKEN, SPREADSHEET_URL, GOOGLE_APPLICATION_CREDENTIALS_JSON, WEBHOOK_URL"
    )

SCOPES = ["https://www.googleapis.com/auth/spreadsheets"]
DATA_TTL = 300          # TTL –¥–ª—è –¥–∞–Ω–Ω—ã—Ö
USERS_TTL = 300         # TTL –¥–ª—è –ª–∏—Å—Ç–∞ ¬´–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏¬ª
PAGE_SIZE = 5

# —à–∞–≥–∏ –¥–∏–∞–ª–æ–≥–∞
ASK_QUANTITY, ASK_COMMENT, ASK_CONFIRM = range(3)

# ---------------------- –ì–õ–û–ë–ê–õ–¨–ù–´–ï –°–û–°–¢–û–Ø–ù–ò–Ø ----------------
df: DataFrame | None = None
_last_load_ts = 0.0

# –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∏–∑ –ª–∏—Å—Ç–∞
SHEET_ALLOWED: set[int] = set()
SHEET_ADMINS: set[int] = set()
SHEET_BLOCKED: set[int] = set()
_last_users_ts = 0.0

# —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–∏—Å–∫–∞/–≤—ã–¥–∞—á–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
user_state: dict[int, dict] = {}   # { user_id: { "query": str, "results": DataFrame, "page": int } }

def get_user_state(user_id: int) -> dict:
    return user_state.setdefault(user_id, {"query": "", "results": DataFrame(), "page": 0})

# —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å–ø–∏—Å–∞–Ω–∏—è
issue_state: dict[int, dict] = {}  # { user_id: {"part": dict, "quantity": float, "comment": str, "await_comment": bool} }

# ------------------------- –ö–ù–û–ü–ö–ò ---------------------------
def cancel_markup():
    return InlineKeyboardMarkup([[InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_action")]])

def confirm_markup():
    return InlineKeyboardMarkup([
        [
            InlineKeyboardButton("‚úÖ –î–∞, —Å–ø–∏—Å–∞—Ç—å", callback_data="confirm_yes"),
            InlineKeyboardButton("‚ùå –ù–µ—Ç", callback_data="confirm_no"),
        ],
        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_action")]
    ])

def more_markup():
    return InlineKeyboardMarkup([[InlineKeyboardButton("‚è≠ –ï—â—ë", callback_data="more")]])

# ------------------------- GOOGLE SHEETS ---------------------
def get_gs_client():
    creds_info = json.loads(CREDS_JSON)
    creds = Credentials.from_service_account_info(creds_info, scopes=SCOPES)
    return gspread.authorize(creds)

def load_data() -> list[dict]:
    client = get_gs_client()
    sheet = client.open_by_url(SPREADSHEET_URL)
    ws = sheet.sheet1   # –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –∑–∞–º–µ–Ω–∏ –Ω–∞ worksheet("SAP")
    return ws.get_all_records()

def ensure_fresh_data(force: bool = False):
    global df, _last_load_ts
    if force or df is None or (time.time() - _last_load_ts > DATA_TTL):
        data = load_data()
        new_df = DataFrame(data)
        new_df.columns = new_df.columns.str.strip().str.lower()
        for col in ("–∫–æ–¥", "oem"):
            if col in new_df.columns:
                new_df[col] = new_df[col].astype(str).str.strip().str.lower()
        if "image" in new_df.columns:
            new_df["image"] = new_df["image"].astype(str).str.strip()
        df = new_df
        _last_load_ts = time.time()
        logger.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(df)} —Å—Ç—Ä–æ–∫ –∏–∑ Google Sheet")

# ------------------------- –£–¢–ò–õ–ò–¢–´ --------------------------
def val(row: dict, key: str, default: str = "‚Äî") -> str:
    v = row.get(key)
    if v is None:
        return default
    try:
        if isinstance(v, float) and pd.isna(v):
            return default
    except Exception:
        pass
    s = str(v).strip()
    return s if s else default

def format_row(row: dict) -> str:
    return (
        f"üîπ –¢–∏–ø: {val(row, '—Ç–∏–ø')}\n"
        f"üì¶ –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ: {val(row, '–Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ')}\n"
        f"üî¢ –ö–æ–¥: {val(row, '–∫–æ–¥')}\n"
        f"üì¶ –ö–æ–ª-–≤–æ: {val(row, '–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ')}\n"
        f"üí∞ –¶–µ–Ω–∞: {val(row, '—Ü–µ–Ω–∞')} {val(row, '–≤–∞–ª—é—Ç–∞')}\n"
        f"üè≠ –ò–∑–≥–æ—Ç–æ–≤–∏—Ç–µ–ª—å: {val(row, '–∏–∑–≥–æ—Ç–æ–≤–∏—Ç–µ–ª—å')}\n"
        f"‚öôÔ∏è OEM: {val(row, 'oem')}"
    )

# ---------- –†–∞–±–æ—Ç–∞ —Å–æ —Å—Å—ã–ª–∫–∞–º–∏ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è ----------
def normalize_drive_url(url: str) -> str:
    m = re.search(r'drive\.google\.com/(?:file/d/([-\w]{20,})|open\?id=([-\w]{20,}))', url)
    if m:
        file_id = m.group(1) or m.group(2)
        return f'https://drive.google.com/uc?export=download&id={file_id}'
    return url

def resolve_ibb_direct(url: str) -> str:
    """–ò–∑ ibb.co/* HTML-—Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–æ—Å—Ç–∞—ë–º og:image (i.ibb.co/...)."""
    try:
        resp = requests.get(url, timeout=12)
        resp.raise_for_status()
        html = resp.text
        m = re.search(r'<meta[^>]+property=["\']og:image["\'][^>]+content=["\']([^"\']+)["\']', html, re.I)
        if m:
            return m.group(1)
    except Exception as e:
        logger.warning(f"resolve_ibb_direct fail: {e}")
    return url

def resolve_image_url(url: str) -> str:
    u = (url or "").strip()
    if not u:
        return u
    if "drive.google.com" in u:
        return normalize_drive_url(u)
    if re.match(r"^https?://(www\.)?ibb\.co/", u, re.I):
        return resolve_ibb_direct(u)
    return u

def find_image_by_code(code: str) -> str:
    """
    –ò—â–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ —Ñ–æ—Ç–æ –ø–æ –ö–û–î–£ –≤ —Å—Ç–æ–ª–±—Ü–µ image (–ø–æ –≤—Å–µ–º—É –ª–∏—Å—Ç—É).
    1) –¢–æ—á–Ω–µ–µ: –∫–æ–¥ –∫–∞–∫ —Ç–æ–∫–µ–Ω –≤ URL/–∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ (/, _, -, –∏–ª–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ .png/.jpg –∏ —Ç.–ø.).
    2) –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ ‚Äî –ø—Ä–æ—Å—Ç–æ–π contains (case-insensitive).
    """
    if df is None or "image" not in df.columns:
        return ""
    code_raw = (code or "").strip()
    if not code_raw:
        return ""

    col = df["image"].astype(str)

    # 1) ¬´–ø–æ—á—Ç–∏ —Ç–æ—á–Ω–æ–µ¬ª —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –∫–æ–¥–∞ –∫–∞–∫ —Ç–æ–∫–µ–Ω–∞
    pat = r'(?i)(?:^|[\/_\-])' + re.escape(code_raw) + r'(?:\.[a-z0-9]{2,5}(?:\?.*)?$|[\/_\-?#])'
    mask_token = col.str.contains(pat, regex=True, na=False)
    if mask_token.any():
        url = str(col[mask_token].iloc[0]).strip()
        return resolve_image_url(url)

    # 2) –§–æ–ª–±—ç–∫: –ø—Ä–æ—Å—Ç–æ–µ –≤—Ö–æ–∂–¥–µ–Ω–∏–µ –∫–æ–¥–∞
    mask_contains = col.str.contains(re.escape(code_raw), case=False, na=False)
    if mask_contains.any():
        url = str(col[mask_contains].iloc[0]).strip()
        return resolve_image_url(url)

    return ""

async def send_row_with_image(update: Update, row: dict, text: str):
    code = str(row.get("–∫–æ–¥", "")).strip()
    kb = InlineKeyboardMarkup([[InlineKeyboardButton("üì¶ –í–∑—è—Ç—å –¥–µ—Ç–∞–ª—å", callback_data=f"issue:{code.lower()}")]])
    url = find_image_by_code(code)

    if url:
        try:
            await update.message.reply_photo(photo=url, caption=text, reply_markup=kb)
            return
        except Exception as e:
            logger.warning(f"URL —Ñ–æ—Ç–æ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª ({url}): {e}")
            try:
                r = requests.get(url, timeout=15, allow_redirects=True)
                r.raise_for_status()
                bio = BytesIO(r.content)
                ctype = r.headers.get("Content-Type", "").lower()
                if "image" not in ctype:
                    logger.warning(f"–ü–æ–ª—É—á–∏–ª–∏ non-image Content-Type ({ctype}) —Å {url}")
                bio.name = "image"
                await update.message.reply_photo(photo=bio, caption=text, reply_markup=kb)
                return
            except Exception as e2:
                logger.warning(f"–°–∫–∞—á–∏–≤–∞–Ω–∏–µ/–æ—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ç–æ –Ω–µ —É–¥–∞–ª–æ—Å—å: {e2} (src: {url})")

    await update.message.reply_text(text, reply_markup=kb)

async def send_row_with_image_bot(bot, chat_id: int, row: dict, text: str):
    code = str(row.get("–∫–æ–¥", "")).strip()
    kb = InlineKeyboardMarkup([[InlineKeyboardButton("üì¶ –í–∑—è—Ç—å –¥–µ—Ç–∞–ª—å", callback_data=f"issue:{code.lower()}")]])
    url = find_image_by_code(code)
    if url:
        try:
            await bot.send_photo(chat_id=chat_id, photo=url, caption=text, reply_markup=kb)
            return
        except Exception as e:
            logger.warning(f"URL —Ñ–æ—Ç–æ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª ({url}): {e}")
            try:
                r = requests.get(url, timeout=15, allow_redirects=True)
                r.raise_for_status()
                bio = BytesIO(r.content); bio.name = "image"
                await bot.send_photo(chat_id=chat_id, photo=bio, caption=text, reply_markup=kb)
                return
            except Exception as e2:
                logger.warning(f"–°–∫–∞—á–∏–≤–∞–Ω–∏–µ/–æ—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ç–æ –Ω–µ —É–¥–∞–ª–æ—Å—å: {e2} (src: {url})")
    await bot.send_message(chat_id=chat_id, text=text, reply_markup=kb)

# --------------------- –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ò (–ª–∏—Å—Ç ¬´–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏¬ª) ----
def _truthy(x) -> bool:
    s = str(x).strip().lower()
    return s in {"1", "true", "yes", "y", "–¥–∞", "–∏—Å—Ç–∏–Ω–∞", "ok", "–æ–∫", "allowed", "—Ä–∞–∑—Ä–µ—à–µ–Ω", "—Ä–∞–∑—Ä–µ—à–µ–Ω–æ"} or (s.isdigit() and int(s) > 0)

def _to_int_or_none(x):
    try:
        if x is None or (isinstance(x, float) and pd.isna(x)):
            return None
        s = str(x).strip()
        if not s:
            return None
        m = re.search(r"-?\d+", s)
        return int(m.group(0)) if m else None
    except Exception:
        return None

def load_users_from_sheet():
    """–ß–∏—Ç–∞–µ—Ç –ª–∏—Å—Ç '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏' (–∏–ª–∏ 'Users') –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç—Ä–∏ —Å–µ—Ç–∞: allowed, admins, blocked."""
    client = get_gs_client()
    sh = client.open_by_url(SPREADSHEET_URL)
    try:
        ws = sh.worksheet("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏")
    except gspread.WorksheetNotFound:
        try:
            ws = sh.worksheet("Users")
        except gspread.WorksheetNotFound:
            logger.info("–õ–∏—Å—Ç '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏' –Ω–µ –Ω–∞–π–¥–µ–Ω ‚Äî –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ —é–∑–µ—Ä–∞–º –æ—Ç–∫–ª—é—á–µ–Ω–æ (—Ä–∞–∑—Ä–µ—à–∞–µ–º –≤—Å–µ–º).")
            return set(), set(), set()

    rows = ws.get_all_records()
    if not rows:
        logger.info("–õ–∏—Å—Ç '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏' –ø—É—Å—Ç ‚Äî –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ —é–∑–µ—Ä–∞–º –æ—Ç–∫–ª—é—á–µ–Ω–æ (—Ä–∞–∑—Ä–µ—à–∞–µ–º –≤—Å–µ–º).")
        return set(), set(), set()

    allowed, admins, blocked = set(), set(), set()

    for row in rows:
        r = {str(k).strip().lower(): v for k, v in row.items()}
        uid = (
            _to_int_or_none(r.get("user_id"))
            or _to_int_or_none(r.get("userid"))
            or _to_int_or_none(r.get("id"))
            or _to_int_or_none(r.get("uid"))
            or _to_int_or_none(r.get("—Ç–µ–ª–µ–≥—Ä–∞–º id"))
            or _to_int_or_none(r.get("–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"))
        )
        if not uid:
            continue

        role = str(r.get("role") or r.get("—Ä–æ–ª—å") or "").strip().lower()
        is_admin_flag = role in {"admin", "–∞–¥–º–∏–Ω", "administrator", "–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä"} or _truthy(r.get("admin"))
        is_allowed_flag = _truthy(r.get("allowed") or r.get("–¥–æ—Å—Ç—É–ø") or (not role or role == "user"))
        is_blocked_flag = _truthy(r.get("blocked") or r.get("ban") or r.get("–∑–∞–ø—Ä–µ—Ç"))

        if is_blocked_flag:
            blocked.add(uid)
        if is_admin_flag:
            admins.add(uid)
            is_allowed_flag = True  # –∞–¥–º–∏–Ω –≤—Å–µ–≥–¥–∞ —Ä–∞–∑—Ä–µ—à—ë–Ω
        if is_allowed_flag:
            allowed.add(uid)

    return allowed, admins, blocked

def ensure_users(force: bool = False):
    """–ö—ç—à–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –ª–∏—Å—Ç–∞ '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏' —Å TTL."""
    global SHEET_ALLOWED, SHEET_ADMINS, SHEET_BLOCKED, _last_users_ts
    if force or (time.time() - _last_users_ts > USERS_TTL):
        SHEET_ALLOWED, SHEET_ADMINS, SHEET_BLOCKED = load_users_from_sheet()
        _last_users_ts = time.time()
        logger.info(
            f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: allowed={len(SHEET_ALLOWED)}, admins={len(SHEET_ADMINS)}, blocked={len(SHEET_BLOCKED)}"
        )

def is_admin(uid: int) -> bool:
    ensure_users()
    return uid in SHEET_ADMINS or uid in ADMINS

def is_allowed(uid: int) -> bool:
    """
    –õ–æ–≥–∏–∫–∞:
    - –µ—Å–ª–∏ –ª–∏—Å—Ç –ø—É—Å—Ç/–Ω–µ—Ç ‚Äî —Ä–∞–∑—Ä–µ—à–∞–µ–º –≤—Å–µ–º (–∫–∞–∫ —Å–µ–π—á–∞—Å);
    - –µ—Å–ª–∏ –µ—Å—Ç—å allowed ‚Äî whitelist: —Ç–æ–ª—å–∫–æ allowed –∏–ª–∏ –∞–¥–º–∏–Ω;
    - blocked –≤—Å–µ–≥–¥–∞ –∑–∞–ø—Ä–µ—â—ë–Ω.
    """
    ensure_users()
    if uid in SHEET_BLOCKED:
        return False
    if SHEET_ALLOWED:
        return (uid in SHEET_ALLOWED) or (uid in SHEET_ADMINS) or (uid in ADMINS)
    return True

# --------------------- –ì–í–ê–†–î–´ –î–û –í–°–ï–ì–û -----------------------
async def guard_msg(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    if user and not is_allowed(user.id):
        try:
            await update.effective_message.reply_text("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
        except Exception:
            pass
        raise ApplicationHandlerStop

async def guard_cb(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    if user and not is_allowed(user.id):
        try:
            await update.callback_query.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.", show_alert=True)
        except Exception:
            pass
        raise ApplicationHandlerStop

# --------------------- –°–û–•–†–ê–ù–ï–ù–ò–ï –°–ü–ò–°–ê–ù–ò–ô -------------------
def save_issue_to_sheet(bot, user, part: dict, quantity, comment: str):
    """
    –ü–∏—à–µ–º –≤ –ª–∏—Å—Ç '–ò—Å—Ç–æ—Ä–∏—è' —Å—Ç—Ä–æ–≥–æ –ø–æ –µ–≥–æ —Ç–µ–∫—É—â–∏–º –∑–∞–≥–æ–ª–æ–≤–∫–∞–º.
    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º —Ä–∞–∑–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∏ –ø–æ—Ä—è–¥–æ–∫ –∫–æ–ª–æ–Ω–æ–∫.
    –û–∂–∏–¥–∞–µ–º—ã–µ –∫–ª—é—á–∏: –î–∞—Ç–∞|ID|–ò–º—è|–¢–∏–ø|–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ|–ö–æ–¥|–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ|–ö–æ–º–µ–Ω—Ç–∞—Ä–∏–π/–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π/Comment
    """
    try:
        client = get_gs_client()
        sh = client.open_by_url(SPREADSHEET_URL)
        try:
            ws = sh.worksheet("–ò—Å—Ç–æ—Ä–∏—è")
        except gspread.WorksheetNotFound:
            ws = sh.add_worksheet(title="–ò—Å—Ç–æ—Ä–∏—è", rows=1000, cols=12)
            ws.append_row(["–î–∞—Ç–∞", "ID", "–ò–º—è", "–¢–∏–ø", "–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ", "–ö–æ–¥", "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ", "–ö–æ–º–µ–Ω—Ç–∞—Ä–∏–π"])

        # –ó–∞–≥–æ–ª–æ–≤–∫–∏ –ª–∏—Å—Ç–∞ (–∫–∞–∫ –µ—Å—Ç—å)
        headers_raw = ws.row_values(1)
        headers = [h.strip() for h in headers_raw]
        norm = [h.lower() for h in headers]

        # –ò–º—è –¥–ª—è –ø–µ—á–∞—Ç–∏
        full_name = f"{(user.first_name or '').strip()} {(user.last_name or '').strip()}".strip()
        display_name = full_name or (f"@{user.username}" if user.username else str(user.id))

        ts = now_local_str()  # –ª–æ–∫–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –ø–æ TIMEZONE

        # –ú–∞–ø–ø–∏–Ω–≥ –∑–Ω–∞—á–µ–Ω–∏–π –ø–æ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–º –∫–ª—é—á–∞–º
        values_by_key = {
            "–¥–∞—Ç–∞": ts,
            "timestamp": ts,

            "id": user.id,
            "user_id": user.id,

            "–∏–º—è": display_name,
            "name": display_name,

            "—Ç–∏–ø": str(part.get("—Ç–∏–ø", "")),
            "type": str(part.get("—Ç–∏–ø", "")),

            "–Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ": str(part.get("–Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ", "")),
            "name_item": str(part.get("–Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ", "")),

            "–∫–æ–¥": str(part.get("–∫–æ–¥", "")),
            "code": str(part.get("–∫–æ–¥", "")),

            "–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ": str(quantity),
            "qty": str(quantity),

            # –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π ‚Äî —Å –æ–¥–Ω–æ–π/–¥–≤—É–º—è ¬´–º¬ª, –ø–ª—é—Å –∞–Ω–≥–ª–∏–π—Å–∫–∏–π
            "–∫–æ–º–µ–Ω—Ç–∞—Ä–∏–π": comment or "",
            "–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π": comment or "",
            "comment": comment or "",
        }

        # –°—Ç—Ä–æ–∫–∞ –ø–æ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–æ–º—É –ø–æ—Ä—è–¥–∫—É –∫–æ–ª–æ–Ω–æ–∫
        row = [values_by_key.get(hn, "") for hn in norm]

        ws.append_row(row, value_input_option="USER_ENTERED")
        logger.info("üíæ –°–ø–∏—Å–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∞–Ω–æ –≤ '–ò—Å—Ç–æ—Ä–∏—è' –ø–æ —Ç–µ–∫—É—â–∏–º –∑–∞–≥–æ–ª–æ–≤–∫–∞–º")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ —Å–ø–∏—Å–∞–Ω–∏—è: {e}")
        async def notify():
            for admin_id in (SHEET_ADMINS | ADMINS):
                try:
                    await bot.send_message(admin_id, f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–ø–∏—Å–∞–Ω–∏—è: {e}")
                except Exception:
                    pass
        asyncio.create_task(notify())

# ------------------------- –ö–û–ú–ê–ù–î–´ --------------------------
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    issue_state.pop(uid, None)
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –ù–∞–ø–∏—à–∏ –∑–∞–ø—Ä–æ—Å (–Ω–∞–ø—Ä–∏–º–µ—Ä: `–§–ò–õ–¨–¢–†` –∏–ª–∏ –ø–æ —Ç–∏–ø—É –¥–µ—Ç–∞–ª–∏ `PI8808DRG500`).\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "‚Ä¢ /help ‚Äî –ø–æ–º–æ—â—å\n"
        "‚Ä¢ /more ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –µ—â—ë\n"
        "‚Ä¢ /export ‚Äî –≤—ã–≥—Ä—É–∑–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ (XLSX/CSV)\n"
        "‚Ä¢ /cancel ‚Äî –æ—Ç–º–µ–Ω–∏—Ç—å —Å–ø–∏—Å–∞–Ω–∏–µ (–∏–ª–∏ –∫–Ω–æ–ø–∫–æ–π ¬´–û—Ç–º–µ–Ω–∏—Ç—å¬ª)\n"
        "‚Ä¢ /reload ‚Äî –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω)",
        parse_mode="Markdown"
    )

async def help_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "1) –í—ã–ø–æ–ª–Ω–∏—Ç–µ –ø–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é/–º–æ–¥–µ–ª–∏/–∫–æ–¥—É.\n"
        "2) –í –∫–∞—Ä—Ç–æ—á–∫–µ –Ω–∞–∂–º–∏—Ç–µ ¬´üì¶ –í–∑—è—Ç—å –¥–µ—Ç–∞–ª—å¬ª ‚Äî –±–æ—Ç —Å–ø—Ä–æ—Å–∏—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π, "
        "–∞ –∑–∞—Ç–µ–º –ø–æ–ø—Ä–æ—Å–∏—Ç –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Å–ø–∏—Å–∞–Ω–∏–µ (–î–∞/–ù–µ—Ç).\n"
        " –£ –í–ê–° –í–°–ï –ü–û–õ–£–ß–ò–¢–°–Ø.",
        parse_mode="Markdown"
    )

async def reload_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    if not is_admin(uid):
        return await update.message.reply_text("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
    ensure_fresh_data(force=True)
    ensure_users(force=True)
    await update.message.reply_text("‚úÖ –î–∞–Ω–Ω—ã–µ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω—ã.")

async def cancel_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    if issue_state.pop(uid, None):
        await update.message.reply_text("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è —Å–ø–∏—Å–∞–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    else:
        await update.message.reply_text("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏.")

async def export_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    st = get_user_state(uid)
    results = st.get("results")
    if not isinstance(results, DataFrame):
        results = DataFrame()
    if results.empty:
        return await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –ø–æ–∏—Å–∫.")
    try:
        buf = io.BytesIO()
        with pd.ExcelWriter(buf, engine="openpyxl") as w:
            results.to_excel(w, index=False)
        buf.seek(0)
        await update.message.reply_document(InputFile(buf, filename=f"export_{uid}.xlsx"))
    except Exception as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å XLSX, —à–ª—ë–º CSV: {e}")
        csv = results.to_csv(index=False, encoding="utf-8-sig")
        await update.message.reply_document(InputFile(io.BytesIO(csv.encode("utf-8-sig")), filename=f"export_{uid}.csv"))

# ------------------------- –ü–û–ò–°–ö -----------------------------
SEARCH_FIELDS = ["—Ç–∏–ø", "–Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ", "–∫–æ–¥", "oem", "–∏–∑–≥–æ—Ç–æ–≤–∏—Ç–µ–ª—å"]  # image –ù–ï –∏—â–µ–º

def normalize(text: str) -> str:
    return re.sub(r"[^\w\s]", " ", (text or "")).lower().strip()

def match_row(row: dict, tokens: list[str]) -> int:
    score = 0
    for f in SEARCH_FIELDS:
        val = normalize(str(row.get(f, "")))
        if val and all(t in val for t in tokens):
            score += 2 if f in ("–∫–æ–¥", "oem") else 1
    return score

async def search_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    ensure_fresh_data()
    if update.message is None:
        return

    if context.chat_data.pop("suppress_next_search", False):
        return

    uid = update.effective_user.id
    st_issue = issue_state.get(uid)
    if st_issue:
        if "quantity" not in st_issue:
            return await update.message.reply_text(
                "–í—ã –≤–≤–æ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ ¬´–û—Ç–º–µ–Ω–∏—Ç—å¬ª.",
                reply_markup=cancel_markup()
            )
        if st_issue.get("await_comment"):
            return await update.message.reply_text(
                "–í—ã –≤–≤–æ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π. –ù–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç –∏–ª–∏ ¬´-¬ª, –ª–∏–±–æ –Ω–∞–∂–º–∏—Ç–µ ¬´–û—Ç–º–µ–Ω–∏—Ç—å¬ª.",
                reply_markup=cancel_markup()
            )

    q = update.message.text.strip()
    if not q:
        return await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å.")
    tokens = normalize(q).split()
    if not tokens:
        return await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –±–æ–ª–µ–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å.")

    matches = []
    for _, row in df.iterrows():
        rd = row.to_dict()
        s = match_row(rd, tokens)
        if s > 0:
            matches.append((s, rd))

    if not matches:
        return await update.message.reply_text(f"–ü–æ –∑–∞–ø—Ä–æ—Å—É ¬´{q}¬ª –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")

    matches.sort(key=lambda x: x[0], reverse=True)
    results_df = DataFrame([r for _, r in matches])

    st = get_user_state(uid)
    st["query"] = q
    st["results"] = results_df
    st["page"] = 0

    await send_page(update, uid)

async def more_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    st = get_user_state(uid)
    results = st.get("results")
    if not isinstance(results, DataFrame):
        results = DataFrame()
    if results.empty:
        return await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –ø–æ–∏—Å–∫.")
    st["page"] += 1
    await send_page(update, uid)

async def send_page(update: Update, uid: int):
    st = get_user_state(uid)
    results: DataFrame = st["results"]
    page = st["page"]

    total = len(results)
    pages = math.ceil(total / PAGE_SIZE)
    if page >= pages:
        st["page"] = pages - 1
        return await update.message.reply_text("–ë–æ–ª—å—à–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–µ—Ç.")

    start = page * PAGE_SIZE
    end = min(start + PAGE_SIZE, total)
    chunk = results.iloc[start:end]

    await update.message.reply_text(f"–ù–∞–π–¥–µ–Ω–æ: {total}. –ü–æ–∫–∞–∑—ã–≤–∞—é {start + 1}‚Äì{end} –∏–∑ {total}.")
    for _, row in chunk.iterrows():
        await send_row_with_image(update, row.to_dict(), format_row(row.to_dict()))
    if end < total:
        await update.message.reply_text("–ü–æ–∫–∞–∑–∞—Ç—å –µ—â—ë?", reply_markup=more_markup())

async def send_page_via_bot(bot, chat_id: int, uid: int):
    st = get_user_state(uid)
    results: DataFrame = st["results"]
    page = st["page"]
    total = len(results)
    pages = math.ceil(total / PAGE_SIZE)
    if page >= pages:
        st["page"] = pages - 1
        return await bot.send_message(chat_id=chat_id, text="–ë–æ–ª—å—à–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–µ—Ç.")
    start = page * PAGE_SIZE
    end = min(start + PAGE_SIZE, total)
    await bot.send_message(chat_id=chat_id, text=f"–ü–æ–∫–∞–∑—ã–≤–∞—é {start + 1}‚Äì{end} –∏–∑ {total}.")
    chunk = results.iloc[start:end]
    for _, row in chunk.iterrows():
        await send_row_with_image_bot(bot, chat_id, row.to_dict(), format_row(row.to_dict()))
    if end < total:
        await bot.send_message(chat_id=chat_id, text="–ü–æ–∫–∞–∑–∞—Ç—å –µ—â—ë?", reply_markup=more_markup())

# ------------------ –°–ü–ò–°–ê–ù–ò–ï (–î–∏–∞–ª–æ–≥) -----------------------
async def on_issue_click(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()

    uid = q.from_user.id
    code = q.data.split(":", 1)[1].strip().lower()

    ensure_fresh_data()
    found = None
    if df is not None and "–∫–æ–¥" in df.columns:
        hit = df[df["–∫–æ–¥"].astype(str).str.lower() == code]
        if not hit.empty:
            found = hit.iloc[0].to_dict()

    if not found:
        return await q.edit_message_text("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –¥–µ—Ç–∞–ª—å –ø–æ –∫–æ–¥—É. –í—ã–ø–æ–ª–Ω–∏—Ç–µ –ø–æ–∏—Å–∫ –∑–∞–Ω–æ–≤–æ.")

    issue_state[uid] = {"part": found}
    await q.message.reply_text("–°–∫–æ–ª—å–∫–æ —Å–ø–∏—Å–∞—Ç—å? –£–∫–∞–∂–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1 –∏–ª–∏ 2.5).", reply_markup=cancel_markup())
    return ASK_QUANTITY

async def handle_quantity(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.chat_data["suppress_next_search"] = True

    uid = update.effective_user.id
    text = (update.message.text or "").strip().replace(",", ".")
    try:
        qty = float(text)
        if qty <= 0:
            raise ValueError
    except Exception:
        return await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä: 1 –∏–ª–∏ 2.5", reply_markup=cancel_markup())

    st = issue_state.get(uid)
    if not st or "part" not in st:
        return await update.message.reply_text("–°–ø–∏—Å–∞–Ω–∏–µ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ ‚Äî –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ –∏–∑ –∫–∞—Ä—Ç–æ—á–∫–∏.")

    st["quantity"] = qty
    st["await_comment"] = True
    await update.message.reply_text("–î–æ–±–∞–≤—å—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ü—Ä–∏–º–µ—Ä: (–õ–∏–Ω–∏—è —Å–±–æ—Ä–∫–∏ CSS OP-1100).", reply_markup=cancel_markup())
    return ASK_COMMENT

async def handle_comment(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.chat_data["suppress_next_search"] = True

    uid = update.effective_user.id
    comment = (update.message.text or "").strip()
    st = issue_state.get(uid)
    if not st:
        return await update.message.reply_text("–°–ø–∏—Å–∞–Ω–∏–µ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ –∏–∑ –∫–∞—Ä—Ç–æ—á–∫–∏.")

    part = st.get("part")
    qty = st.get("quantity")
    if part is None or qty is None:
        issue_state.pop(uid, None)
        return await update.message.reply_text("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")

    st["comment"] = "" if comment == "-" else comment
    st["await_comment"] = False

    text = (
        "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–ø–∏—Å–∞—Ç—å –¥–µ—Ç–∞–ª—å?\n\n"
        f"üî¢ –ö–æ–¥: {val(part, '–∫–æ–¥')}\n"
        f"üì¶ –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ: {val(part, '–Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ')}\n"
        f"üì¶ –ö–æ–ª-–≤–æ: {qty}\n"
        f"üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {st['comment'] or '‚Äî'}"
    )
    await update.message.reply_text(text, reply_markup=confirm_markup())
    return ASK_CONFIRM

async def handle_confirm(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()
    uid = q.from_user.id

    if q.data == "confirm_yes":
        st = issue_state.get(uid)
        if not st or "part" not in st or "quantity" not in st:
            issue_state.pop(uid, None)
            return await q.message.reply_text("–î–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–ø–∏—Å–∞–Ω–∏—è –Ω–µ—Ç. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
        part = st["part"]
        qty = st["quantity"]
        comment = st.get("comment", "")

        save_issue_to_sheet(context.bot, q.from_user, part, qty, comment)

        issue_state.pop(uid, None)   # user_state –ù–ï —Ç—Ä–æ–≥–∞–µ–º

        await q.message.reply_text(
            f"‚úÖ –°–ø–∏—Å–∞–Ω–æ: {qty}\n"
            f"üî¢ –ö–æ–¥: {val(part, '–∫–æ–¥')}\n"
            f"üì¶ –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ: {val(part, '–Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ')}\n"
            f"üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {comment or '‚Äî'}"
        )
        return ConversationHandler.END

    if q.data == "confirm_no":
        issue_state.pop(uid, None)
        await q.message.reply_text("‚ùå –°–ø–∏—Å–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
        return ConversationHandler.END

async def cancel_action(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()
    uid = q.from_user.id

    if uid not in issue_state:
        return
    issue_state.pop(uid, None)
    await q.message.reply_text("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è —Å–ø–∏—Å–∞–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    return ConversationHandler.END

async def handle_cancel_in_dialog(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await cancel_cmd(update, context)
    return ConversationHandler.END

async def on_more_click(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()
    uid = q.from_user.id
    st = get_user_state(uid)
    results = st.get("results")
    if not isinstance(results, DataFrame):
        results = DataFrame()
    if results.empty:
        return await q.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –ø–æ–∏—Å–∫.")
    st["page"] += 1
    chat_id = q.message.chat.id
    await send_page_via_bot(context.bot, chat_id, uid)

# --------------------- ERROR HANDLER -------------------------
async def on_error(update: object, context: ContextTypes.DEFAULT_TYPE):
    logger.exception("Unhandled error: %s", context.error)
    msg = f"‚ùå –û—à–∏–±–∫–∞: {context.error}"
    for admin_id in (SHEET_ADMINS | ADMINS):
        try:
            await context.bot.send_message(admin_id, msg)
        except Exception:
            pass

# --------------------- APP / WEBHOOK ------------------------
def build_app():
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()

    # –ì–≤–∞—Ä–¥—ã –¥–æ –ª—é–±—ã—Ö —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤
    app.add_handler(MessageHandler(filters.ALL, guard_msg), group=-1)
    app.add_handler(CallbackQueryHandler(guard_cb, pattern=".*"), group=-1)

    # –ö–æ–º–∞–Ω–¥—ã
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_cmd))
    app.add_handler(CommandHandler("more", more_cmd))
    app.add_handler(CommandHandler("export", export_cmd))
    app.add_handler(CommandHandler("reload", reload_cmd))
    app.add_handler(CommandHandler("cancel", cancel_cmd))

    # –ö–Ω–æ–ø–∫–∞ ¬´–ï—â—ë¬ª
    app.add_handler(CallbackQueryHandler(on_more_click, pattern=r"^more$"))

    # –î–∏–∞–ª–æ–≥ —Å–ø–∏—Å–∞–Ω–∏—è
    conv = ConversationHandler(
        entry_points=[
            CallbackQueryHandler(on_issue_click, pattern=r"^issue:"),
            CallbackQueryHandler(cancel_action, pattern=r"^cancel_action$"),
        ],
        states={
            ASK_QUANTITY: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_quantity),
                CallbackQueryHandler(cancel_action, pattern=r"^cancel_action$"),
            ],
            ASK_COMMENT: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_comment),
                CallbackQueryHandler(cancel_action, pattern=r"^cancel_action$"),
            ],
            ASK_CONFIRM: [
                CallbackQueryHandler(handle_confirm, pattern=r"^confirm_(yes|no)$"),
                CallbackQueryHandler(cancel_action, pattern=r"^cancel_action$"),
            ],
        },
        fallbacks=[
            CommandHandler("cancel", handle_cancel_in_dialog),
            CallbackQueryHandler(cancel_action, pattern=r"^cancel_action$"),
        ],
        allow_reentry=True,
    )
    app.add_handler(conv)

    # –ü–æ–∏—Å–∫ ‚Äî –≤ –≥—Ä—É–ø–ø–µ 1, —á—Ç–æ–±—ã –¥–∏–∞–ª–æ–≥ ¬´—Å—ä–µ–¥–∞–ª¬ª –∞–ø–¥–µ–π—Ç—ã –ø–µ—Ä–≤—ã–º
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, search_text), group=1)

    # Error handler
    app.add_error_handler(on_error)

    return app

if __name__ == "__main__":
    logger.info(f"‚åö –ò—Å–ø–æ–ª—å–∑—É–µ–º —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å: {TZ_NAME}")
    ensure_fresh_data(force=True)
    ensure_users(force=True)
    application = build_app()

    full_webhook = f"{WEBHOOK_URL}{WEBHOOK_PATH}"
    logger.info(f"üöÄ –°—Ç–∞—Ä—Ç—É–µ–º webhook-—Å–µ—Ä–≤–µ—Ä –Ω–∞ 0.0.0.0:{PORT}")
    logger.info(f"üåê –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º webhook: {full_webhook}")

    application.run_webhook(
        listen="0.0.0.0",
        port=PORT,
        secret_token=WEBHOOK_SECRET_TOKEN or None,
        webhook_url=full_webhook,
        url_path=WEBHOOK_PATH.lstrip("/"),
        drop_pending_updates=True,
        allowed_updates=None,
    )
