import os
import re
import io
import json
import math
import time
import asyncio
import logging
from datetime import datetime

import gspread
import pandas as pd
from google.oauth2.service_account import Credentials
from pandas import DataFrame
from telegram import (
    Update, InputFile, InlineKeyboardMarkup, InlineKeyboardButton
)
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler, CallbackQueryHandler,
    ConversationHandler, ContextTypes, filters
)

# --------------------------- –õ–û–ì–ò ---------------------------
logging.basicConfig(level=logging.INFO, format="%(asctime)s %(levelname)s %(message)s")
logger = logging.getLogger("bot")

# -------------------------- –ù–ê–°–¢–†–û–ô–ö–ò -----------------------
ADMINS = {225177765}  # –ø–æ–º–µ–Ω—è–π –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏

TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
SPREADSHEET_URL = os.getenv("SPREADSHEET_URL")
CREDS_JSON = os.getenv("GOOGLE_APPLICATION_CREDENTIALS_JSON")

WEBHOOK_URL = (os.getenv("WEBHOOK_URL") or "").rstrip("/")
WEBHOOK_PATH = os.getenv("WEBHOOK_PATH", "/webhook")
PORT = int(os.getenv("PORT", "8080"))
WEBHOOK_SECRET_TOKEN = os.getenv("WEBHOOK_SECRET_TOKEN", "")

if not TELEGRAM_TOKEN or not SPREADSHEET_URL or not CREDS_JSON or not WEBHOOK_URL:
    raise RuntimeError(
        "ENV –Ω—É–∂–Ω—ã: TELEGRAM_TOKEN, SPREADSHEET_URL, GOOGLE_APPLICATION_CREDENTIALS_JSON, WEBHOOK_URL"
    )

SCOPES = ["https://www.googleapis.com/auth/spreadsheets"]
DATA_TTL = 300
PAGE_SIZE = 5

ASK_QUANTITY, ASK_COMMENT = range(2)

# ---------------------- –ì–õ–û–ë–ê–õ–¨–ù–´–ï –°–û–°–¢–û–Ø–ù–ò–Ø ----------------
df: DataFrame | None = None
_last_load_ts = 0.0

user_state: dict[int, dict] = {}   # { user_id: { "query": str, "results": DataFrame, "page": int } }
issue_state: dict[int, dict] = {}  # { user_id: {"part": dict, "quantity": float, "await_comment": bool} }

# ------------------------- –£–¢–ò–õ–ò–¢–´ --------------------------
def cancel_markup():
    return InlineKeyboardMarkup([[InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_action")]])

def get_gs_client():
    creds_info = json.loads(CREDS_JSON)
    creds = Credentials.from_service_account_info(creds_info, scopes=SCOPES)
    return gspread.authorize(creds)

def load_data() -> list[dict]:
    client = get_gs_client()
    sheet = client.open_by_url(SPREADSHEET_URL)
    ws = sheet.sheet1   # –µ—Å–ª–∏ –Ω—É–∂–µ–Ω –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –ª–∏—Å—Ç, –∑–∞–º–µ–Ω–∏ –Ω–∞ worksheet("SAP")
    return ws.get_all_records()

def ensure_fresh_data(force: bool = False):
    global df, _last_load_ts
    if force or df is None or (time.time() - _last_load_ts > DATA_TTL):
        data = load_data()
        new_df = DataFrame(data)
        new_df.columns = new_df.columns.str.strip().str.lower()
        for col in ("–∫–æ–¥", "oem"):
            if col in new_df.columns:
                new_df[col] = new_df[col].astype(str).str.strip().str.lower()
        df = new_df
        _last_load_ts = time.time()
        logger.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(df)} —Å—Ç—Ä–æ–∫ –∏–∑ Google Sheet")

def val(row: dict, key: str, default: str = "‚Äî") -> str:
    v = row.get(key)
    if v is None:
        return default
    try:
        if isinstance(v, float) and pd.isna(v):
            return default
    except Exception:
        pass
    s = str(v).strip()
    return s if s else default

def format_row(row: dict) -> str:
    return (
        f"üîπ –¢–∏–ø: {val(row, '—Ç–∏–ø')}\n"
        f"üì¶ –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ: {val(row, '–Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ')}\n"
        f"üî¢ –ö–æ–¥: {val(row, '–∫–æ–¥')}\n"
        f"üì¶ –ö–æ–ª-–≤–æ: {val(row, '–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ')}\n"
        f"üí∞ –¶–µ–Ω–∞: {val(row, '—Ü–µ–Ω–∞')} {val(row, '–≤–∞–ª—é—Ç–∞')}\n"
        f"üè≠ –ò–∑–≥–æ—Ç–æ–≤–∏—Ç–µ–ª—å: {val(row, '–∏–∑–≥–æ—Ç–æ–≤–∏—Ç–µ–ª—å')}\n"
        f"‚öôÔ∏è OEM: {val(row, 'oem')}"
    )

def get_row_image(row: dict) -> str:
    for key in ("image", "–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", "photo", "—Ñ–æ—Ç–æ"):
        url = row.get(key)
        if isinstance(url, str) and url.strip():
            return url.strip()
    return ""

async def send_row_with_image(update: Update, row: dict, text: str):
    code = str(row.get("–∫–æ–¥", "")).strip().lower()
    kb = InlineKeyboardMarkup([[InlineKeyboardButton("üì¶ –í–∑—è—Ç—å –¥–µ—Ç–∞–ª—å", callback_data=f"issue:{code}")]])
    img = get_row_image(row)
    if img:
        try:
            await update.message.reply_photo(photo=img, caption=text, reply_markup=kb)
            return
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ: {e}")
    await update.message.reply_text(text, reply_markup=kb)

def get_user_state(user_id: int) -> dict:
    return user_state.setdefault(user_id, {"query": "", "results": DataFrame(), "page": 0})

# --------------------- –°–û–•–†–ê–ù–ï–ù–ò–ï –°–ü–ò–°–ê–ù–ò–ô -------------------
def save_issue_to_sheet(bot, user, part: dict, quantity, comment: str):
    try:
        client = get_gs_client()
        sh = client.open_by_url(SPREADSHEET_URL)
        try:
            ws = sh.worksheet("–ò—Å—Ç–æ—Ä–∏—è")
        except gspread.WorksheetNotFound:
            ws = sh.add_worksheet(title="–ò—Å—Ç–æ—Ä–∏—è", rows=1000, cols=12)
            ws.append_row([
                "timestamp", "user_id", "username", "name",
                "–∫–æ–¥", "–Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ", "–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ(—Å–ø–∏—Å–∞–Ω–æ)", "–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π"
            ])
        ws.append_row([
            datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
            user.id,
            user.username or "",
            f"{user.first_name or ''} {user.last_name or ''}".strip(),
            str(part.get("–∫–æ–¥", "")),
            str(part.get("–Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ", "")),
            str(quantity),
            comment or "",
        ])
        logger.info("üíæ –°–ø–∏—Å–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∞–Ω–æ –≤ '–ò—Å—Ç–æ—Ä–∏—è'")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ —Å–ø–∏—Å–∞–Ω–∏—è: {e}")
        async def notify():
            for admin_id in ADMINS:
                try:
                    await bot.send_message(admin_id, f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–ø–∏—Å–∞–Ω–∏—è: {e}")
                except Exception:
                    pass
        asyncio.create_task(notify())

# ------------------------- –ö–û–ú–ê–ù–î–´ --------------------------
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    issue_state.pop(uid, None)
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –ù–∞–ø–∏—à–∏ –∑–∞–ø—Ä–æ—Å (–Ω–∞–ø—Ä–∏–º–µ—Ä: `—Ñ–∏–ª—å—Ç—Ä –º–∞—Å–ª–∞` –∏–ª–∏ `96353000`).\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "‚Ä¢ /help ‚Äî –ø–æ–º–æ—â—å\n"
        "‚Ä¢ /more ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –µ—â—ë\n"
        "‚Ä¢ /export ‚Äî –≤—ã–≥—Ä—É–∑–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ (XLSX/CSV)\n"
        "‚Ä¢ /cancel ‚Äî –æ—Ç–º–µ–Ω–∏—Ç—å —Å–ø–∏—Å–∞–Ω–∏–µ (–∏–ª–∏ –∫–Ω–æ–ø–∫–æ–π ¬´–û—Ç–º–µ–Ω–∏—Ç—å¬ª)\n"
        "‚Ä¢ /reload ‚Äî –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω)",
        parse_mode="Markdown"
    )

async def help_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "1) –í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ (–º–æ–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ).\n"
        "2) –í –∫–∞—Ä—Ç–æ—á–∫–µ –Ω–∞–∂–º–∏—Ç–µ ¬´üì¶ –í–∑—è—Ç—å –¥–µ—Ç–∞–ª—å¬ª ‚Äî –±–æ—Ç —Å–ø—Ä–æ—Å–∏—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π.\n"
        "–ö–æ–º–∞–Ω–¥—ã: /more, /export, /cancel, /reload (–¥–ª—è –∞–¥–º–∏–Ω–∞)."
    )

async def reload_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id not in ADMINS:
        return await update.message.reply_text("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
    ensure_fresh_data(force=True)
    await update.message.reply_text("‚úÖ –î–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω—ã.")

async def cancel_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    if issue_state.pop(uid, None):
        user_state.pop(uid, None)
        await update.message.reply_text("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è —Å–ø–∏—Å–∞–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    else:
        await update.message.reply_text("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏.")

async def export_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    st = get_user_state(uid)
    results: DataFrame = st.get("results") or DataFrame()
    if results.empty:
        return await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –ø–æ–∏—Å–∫.")
    try:
        buf = io.BytesIO()
        with pd.ExcelWriter(buf, engine="openpyxl") as w:
            results.to_excel(w, index=False)
        buf.seek(0)
        await update.message.reply_document(InputFile(buf, filename=f"export_{uid}.xlsx"))
    except Exception as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å XLSX, —à–ª—ë–º CSV: {e}")
        csv = results.to_csv(index=False, encoding="utf-8-sig")
        await update.message.reply_document(InputFile(io.BytesIO(csv.encode("utf-8-sig")), filename=f"export_{uid}.csv"))

# ------------------------- –ü–û–ò–°–ö -----------------------------
SEARCH_FIELDS = ["—Ç–∏–ø", "–Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ", "–∫–æ–¥", "oem", "–∏–∑–≥–æ—Ç–æ–≤–∏—Ç–µ–ª—å"]
def normalize(text: str) -> str:
    return re.sub(r"[^\w\s]", " ", (text or "")).lower().strip()

def match_row(row: dict, tokens: list[str]) -> int:
    score = 0
    for f in SEARCH_FIELDS:
        val = normalize(str(row.get(f, "")))
        if val and all(t in val for t in tokens):
            score += 2 if f in ("–∫–æ–¥", "oem") else 1
    return score

async def search_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    ensure_fresh_data()
    if update.message is None:
        return

    # –µ—Å–ª–∏ –ø—Ä–æ—à–ª—ã–π —Ö–µ–Ω–¥–ª–µ—Ä –ø–æ–º–µ—Ç–∏–ª "–Ω–µ –∏—Å–∫–∞—Ç—å" ‚Äî –≤—ã—Ö–æ–¥–∏–º —Ç–∏—Ö–æ
    if context.chat_data.pop("suppress_next_search", False):
        return

    uid = update.effective_user.id
    st_issue = issue_state.get(uid)
    if st_issue:
        if "quantity" not in st_issue:
            return await update.message.reply_text(
                "–í—ã –≤–≤–æ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ ¬´–û—Ç–º–µ–Ω–∏—Ç—å¬ª.",
                reply_markup=cancel_markup()
            )
        if st_issue.get("await_comment"):
            return await update.message.reply_text(
                "–í—ã –≤–≤–æ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π. –ù–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç –∏–ª–∏ ¬´-¬ª, –ª–∏–±–æ –Ω–∞–∂–º–∏—Ç–µ ¬´–û—Ç–º–µ–Ω–∏—Ç—å¬ª.",
                reply_markup=cancel_markup()
            )

    q = update.message.text.strip()
    if not q:
        return await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å.")
    tokens = normalize(q).split()
    if not tokens:
        return await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –±–æ–ª–µ–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å.")

    matches = []
    for _, row in df.iterrows():
        rd = row.to_dict()
        s = match_row(rd, tokens)
        if s > 0:
            matches.append((s, rd))

    if not matches:
        return await update.message.reply_text(f"–ü–æ –∑–∞–ø—Ä–æ—Å—É ¬´{q}¬ª –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")

    matches.sort(key=lambda x: x[0], reverse=True)
    results_df = DataFrame([r for _, r in matches])

    st = get_user_state(uid)
    st["query"] = q
    st["results"] = results_df
    st["page"] = 0

    await send_page(update, uid)

async def more_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    st = get_user_state(uid)
    results: DataFrame = st.get("results") or DataFrame()
    if results.empty:
        return await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –ø–æ–∏—Å–∫.")
    st["page"] += 1
    await send_page(update, uid)

async def send_page(update: Update, uid: int):
    st = get_user_state(uid)
    results: DataFrame = st["results"]
    page = st["page"]

    total = len(results)
    pages = math.ceil(total / PAGE_SIZE)
    if page >= pages:
        st["page"] = pages - 1
        return await update.message.reply_text("–ë–æ–ª—å—à–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–µ—Ç.")

    start = page * PAGE_SIZE
    end = min(start + PAGE_SIZE, total)
    chunk = results.iloc[start:end]

    await update.message.reply_text(f"–ù–∞–π–¥–µ–Ω–æ: {total}. –ü–æ–∫–∞–∑—ã–≤–∞—é {start + 1}‚Äì{end} –∏–∑ {total}.")
    for _, row in chunk.iterrows():
        await send_row_with_image(update, row.to_dict(), format_row(row.to_dict()))
    if end < total:
        await update.message.reply_text("–ù–∞–∂–º–∏—Ç–µ /more, —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å –µ—â—ë.")

# ------------------ –°–ü–ò–°–ê–ù–ò–ï (–î–∏–∞–ª–æ–≥) -----------------------
async def on_issue_click(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()

    uid = q.from_user.id
    code = q.data.split(":", 1)[1].strip().lower()

    ensure_fresh_data()
    found = None
    if df is not None and "–∫–æ–¥" in df.columns:
        hit = df[df["–∫–æ–¥"].astype(str).str.lower() == code]
        if not hit.empty:
            found = hit.iloc[0].to_dict()

    if not found:
        return await q.edit_message_text("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –¥–µ—Ç–∞–ª—å –ø–æ –∫–æ–¥—É. –í—ã–ø–æ–ª–Ω–∏—Ç–µ –ø–æ–∏—Å–∫ –∑–∞–Ω–æ–≤–æ.")

    issue_state[uid] = {"part": found}
    await q.message.reply_text("–°–∫–æ–ª—å–∫–æ —Å–ø–∏—Å–∞—Ç—å? –£–∫–∞–∂–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1 –∏–ª–∏ 2.5).", reply_markup=cancel_markup())
    return ASK_QUANTITY

async def handle_quantity(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –ø–æ–¥–∞–≤–∏–º –ø–æ–∏—Å–∫ –¥–ª—è —ç—Ç–æ–≥–æ –∞–ø–¥–µ–π—Ç–∞
    context.chat_data["suppress_next_search"] = True

    uid = update.effective_user.id
    text = (update.message.text or "").strip().replace(",", ".")
    try:
        qty = float(text)
        if qty <= 0:
            raise ValueError
    except Exception:
        return await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä: 1 –∏–ª–∏ 2.5", reply_markup=cancel_markup())

    st = issue_state.get(uid)
    if not st or "part" not in st:
        return await update.message.reply_text("–°–ø–∏—Å–∞–Ω–∏–µ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ ‚Äî –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ –∏–∑ –∫–∞—Ä—Ç–æ—á–∫–∏.")

    st["quantity"] = qty
    st["await_comment"] = True
    await update.message.reply_text("–î–æ–±–∞–≤—å—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (–∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ ¬´-¬ª, –µ—Å–ª–∏ –±–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è).", reply_markup=cancel_markup())
    return ASK_COMMENT

async def handle_comment(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –ø–æ–¥–∞–≤–∏–º –ø–æ–∏—Å–∫ –¥–ª—è —ç—Ç–æ–≥–æ –∞–ø–¥–µ–π—Ç–∞
    context.chat_data["suppress_next_search"] = True

    uid = update.effective_user.id
    comment = (update.message.text or "").strip()
    st = issue_state.get(uid)
    if not st:
        return await update.message.reply_text("–°–ø–∏—Å–∞–Ω–∏–µ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ –∏–∑ –∫–∞—Ä—Ç–æ—á–∫–∏.")

    part = st.get("part")
    qty = st.get("quantity")
    if part is None or qty is None:
        issue_state.pop(uid, None)
        return await update.message.reply_text("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")

    save_issue_to_sheet(context.bot, update.effective_user, part, qty, "" if comment == "-" else comment)
    issue_state.pop(uid, None)
    user_state.pop(uid, None)

    await update.message.reply_text(
        f"‚úÖ –°–ø–∏—Å–∞–Ω–æ: {qty}\n"
        f"üî¢ –ö–æ–¥: {val(part, '–∫–æ–¥')}\n"
        f"üì¶ –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ: {val(part, '–Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ')}\n"
        f"üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {comment if comment != '-' else '‚Äî'}"
    )
    return ConversationHandler.END

async def cancel_action(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()
    uid = q.from_user.id

    if uid not in issue_state:
        return  # —Ç–∏—Ö–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å—Ç–∞—Ä—ã–µ –∫–Ω–æ–ø–∫–∏

    issue_state.pop(uid, None)
    user_state.pop(uid, None)
    context.chat_data["suppress_next_search"] = True
    await q.message.reply_text("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è —Å–ø–∏—Å–∞–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    return ConversationHandler.END

async def handle_cancel_in_dialog(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await cancel_cmd(update, context)
    return ConversationHandler.END

# --------------------- APP / WEBHOOK ------------------------
def build_app():
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_cmd))
    app.add_handler(CommandHandler("more", more_cmd))
    app.add_handler(CommandHandler("export", export_cmd))
    app.add_handler(CommandHandler("reload", reload_cmd))
    app.add_handler(CommandHandler("cancel", cancel_cmd))

    conv = ConversationHandler(
        entry_points=[
            CallbackQueryHandler(on_issue_click, pattern=r"^issue:"),
            CallbackQueryHandler(cancel_action, pattern=r"^cancel_action$"),
        ],
        states={
            ASK_QUANTITY: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_quantity),
                CallbackQueryHandler(cancel_action, pattern=r"^cancel_action$"),
            ],
            ASK_COMMENT: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_comment),
                CallbackQueryHandler(cancel_action, pattern=r"^cancel_action$"),
            ],
        },
        fallbacks=[
            CommandHandler("cancel", handle_cancel_in_dialog),
            CallbackQueryHandler(cancel_action, pattern=r"^cancel_action$"),
        ],
        allow_reentry=True,
    )
    app.add_handler(conv)

    # –ø–æ–∏—Å–∫ ‚Äî –≤ –≥—Ä—É–ø–ø–µ 1, —á—Ç–æ–±—ã –¥–∏–∞–ª–æ–≥ ¬´—Å—ä–µ–¥–∞–ª¬ª –∞–ø–¥–µ–π—Ç—ã –ø–µ—Ä–≤—ã–º
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, search_text), group=1)

    return app

if __name__ == "__main__":
    ensure_fresh_data(force=True)
    application = build_app()

    full_webhook = f"{WEBHOOK_URL}{WEBHOOK_PATH}"
    logger.info(f"üöÄ –°—Ç–∞—Ä—Ç—É–µ–º webhook-—Å–µ—Ä–≤–µ—Ä –Ω–∞ 0.0.0.0:{PORT}")
    logger.info(f"üåê –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º webhook: {full_webhook}")

    application.run_webhook(
        listen="0.0.0.0",
        port=PORT,
        secret_token=WEBHOOK_SECRET_TOKEN or None,
        webhook_url=full_webhook,
        url_path=WEBHOOK_PATH.lstrip("/"),
        drop_pending_updates=True,
        allowed_updates=None,
    )
