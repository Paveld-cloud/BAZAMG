import logging
import pandas as pd
import os
from telegram import Update
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    filters,
    ContextTypes,
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ß–∏—Ç–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è (–∏–ª–∏ –≤—Å—Ç–∞–≤—å—Ç–µ —Å—Ç—Ä–æ–∫–æ–π)
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN", "–í–ê–®_–¢–û–ö–ï–ù_–ó–î–ï–°–¨")

# –ó–∞–≥—Ä—É–∂–∞–µ–º –∏ –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∫–æ–ª–æ–Ω–∫–∏
df = pd.read_excel("data.xlsx")
df.columns = df.columns.str.strip().str.lower()

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å —Ç–∏–ø –∏–ª–∏ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –¥–µ—Ç–∞–ª–∏, –∏ —è –≤–µ—Ä–Ω—É —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è."
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π ‚Äî –ø–æ–∏—Å–∫
async def search(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.message.text.strip().lower()
    mask = (
        df['—Ç–∏–ø'].astype(str).str.contains(query, case=False, na=False)
        | df['–Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ'].astype(str).str.contains(query, case=False, na=False)
    )
    results = df[mask]

    if results.empty:
        await update.message.reply_text(f'–ü–æ –∑–∞–ø—Ä–æ—Å—É "{query}" –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.')
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –ø–æ –ø–µ—Ä–≤—ã–º 5 —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è–º
    for _, row in results.head(5).iterrows():
        text = (
            f"üîπ –¢–∏–ø: {row['—Ç–∏–ø']}\n"
            f"üì¶ –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ: {row['–Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ']}\n"
            f"üî¢ –ö–æ–¥: {row['–∫–æ–¥']}\n"
            f"üì¶ –ö–æ–ª-–≤–æ: {row['–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ']}\n"
            f"üí∞ –¶–µ–Ω–∞: {row['—Ü–µ–Ω–∞']} {row['–≤–∞–ª—é—Ç–∞']}\n"
            f"üè≠ –ò–∑–≥–æ—Ç–æ–≤–∏—Ç–µ–ª—å: {row['–∏–∑–≥–æ—Ç–æ–≤–∏—Ç–µ–ª—å']}\n"
            f"‚öô OEM: {row['oem']}"
        )
        await update.message.reply_text(text)

    # –ï—Å–ª–∏ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –±–æ–ª—å—à–µ 5 ‚Äî –ø–æ–¥—Å–∫–∞–∑—ã–≤–∞–µ–º
    if len(results) > 5:
        await update.message.reply_text("–ü–æ–∫–∞–∑–∞–Ω–æ 5 –ø–µ—Ä–≤—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤. –ï—Å–ª–∏ –Ω—É–∂–Ω–æ –±–æ–ª—å—à–µ ‚Äî –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /–µ—â—ë",)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ /–µ—â—ë –¥–ª—è –ø–æ–∫–∞–∑–∞ —Å–ª–µ–¥—É—é—â–∏—Ö 5 (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
user_index = {}
async def more(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = context.user_data.get("last_query")
    if not query:
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∑–∞–ø—Ä–æ—Å.")
        return

    mask = (
        df['—Ç–∏–ø'].astype(str).str.contains(query, case=False, na=False)
        | df['–Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ'].astype(str).str.contains(query, case=False, na=False)
    )
    results = df[mask]
    start = user_index.get(update.effective_user.id, 5)
    end = start + 5

    if start >= len(results):
        await update.message.reply_text("–ë–æ–ª—å—à–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–µ—Ç.")
        return

    for _, row in results.iloc[start:end].iterrows():
        text = (
            f"üîπ –¢–∏–ø: {row['—Ç–∏–ø']}\n"
            f"üì¶ –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ: {row['–Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ']}\n"
            f"üî¢ –ö–æ–¥: {row['–∫–æ–¥']}\n"
            f"üì¶ –ö–æ–ª-–≤–æ: {row['–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ']}\n"
            f"üí∞ –¶–µ–Ω–∞: {row['—Ü–µ–Ω–∞']} {row['–≤–∞–ª—é—Ç–∞']}\n"
            f"üè≠ –ò–∑–≥–æ—Ç–æ–≤–∏—Ç–µ–ª—å: {row['–∏–∑–≥–æ—Ç–æ–≤–∏—Ç–µ–ª—å']}\n"
            f"‚öô OEM: {row['oem']}"
        )
        await update.message.reply_text(text)

    user_index[update.effective_user.id] = end
    if end < len(results):
        await update.message.reply_text("–ù–∞–ø–∏—à–∏—Ç–µ /–µ—â—ë –¥–ª—è —Å–ª–µ–¥—É—é—â–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.")

def main():
    app = ApplicationBuilder().token(7574993294:AAGcnWNkh_A10JSaxDi0m4KjSKtSQgIdPuk).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("–µ—â—ë", more))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, search))

    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    app.run_polling()

if __name__ == "__main__":
    main()
