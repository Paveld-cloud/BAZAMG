import logging
import os
import pickle
import json
import gspread
import re
from datetime import datetime
from zoneinfo import ZoneInfo  # Python 3.9+
from google.oauth2.service_account import Credentials
from telegram import (
    Update,
    InputFile,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
)
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    ConversationHandler,
    ContextTypes,
    filters,
)
from pandas import DataFrame
import atexit
import signal

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –≠—Ç–∞–ø—ã –¥–∏–∞–ª–æ–≥–∞ —Å–ø–∏—Å–∞–Ω–∏—è
ASK_QUANTITY, ASK_COMMENT = range(2)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
user_state = {}          # –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–∏—Å–∫–∞
issue_state = {}         # –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–ø–∏—Å–∞–Ω–∏—è
search_count = {}        # –°—á—ë—Ç—á–∏–∫ –ø–æ–∏—Å–∫–æ–≤

# –ê–¥–º–∏–Ω—ã
ADMINS = {225177765}

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
SPREADSHEET_URL = os.getenv("SPREADSHEET_URL")
SCOPES = ["https://www.googleapis.com/auth/spreadsheets"]

if not TELEGRAM_TOKEN or not SPREADSHEET_URL:
    raise EnvironmentError("–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç TELEGRAM_TOKEN –∏–ª–∏ SPREADSHEET_URL –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")

# Google Sheets –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
def get_gsheet():
    creds_info = json.loads(os.getenv("GOOGLE_APPLICATION_CREDENTIALS_JSON"))
    creds = Credentials.from_service_account_info(creds_info, scopes=SCOPES)
    client = gspread.authorize(creds)
    return client.open_by_url(SPREADSHEET_URL)

# --- –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ---
_allowed_users = None
_last_users_update = 0

def get_allowed_users():
    global _allowed_users, _last_users_update
    now = datetime.now().timestamp()
    if _allowed_users is None or now - _last_users_update > 300:
        try:
            sheet = get_gsheet().worksheet("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏")
            rows = sheet.get_all_values()
            _allowed_users = {int(row[0]) for row in rows if row and len(row) > 0 and row[0].strip().isdigit()}
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
            _allowed_users = set()
        _last_users_update = now
    return _allowed_users

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
def load_data():
    try:
        sheet = get_gsheet().worksheet("SAP")
        return sheet.get_all_records()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö SAP: {e}")
        return []

# –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–ø–∏—Å–∞–Ω–∏—è
async def save_issue_to_sheet(context: ContextTypes.DEFAULT_TYPE, user, part, quantity, comment):
    try:
        # üîπ –í—Ä–µ–º—è –ø–æ –¢–∞—à–∫–µ–Ω—Ç—É
        tz = ZoneInfo("Asia/Tashkent")
        now = datetime.now(tz).strftime("%Y-%m-%d %H:%M:%S")

        sheet = get_gsheet().worksheet("–ò—Å—Ç–æ—Ä–∏—è")
        sheet.append_row([
            now,
            user.id,
            user.full_name,
            part.get("—Ç–∏–ø", ""),
            part.get("–Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ", ""),
            part.get("–∫–æ–¥", ""),
            quantity,
            comment
        ])
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å–ø–∏—Å–∞–Ω–∏—è: {e}")
        for admin_id in ADMINS:
            try:
                await context.bot.send_message(admin_id, f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–ø–∏—Å–∞–Ω–∏—è: {e}")
            except Exception as send_err:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω—É {admin_id}: {send_err}")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
raw_data = load_data()
df = DataFrame(raw_data)
df.columns = df.columns.str.strip().str.lower()
df["–∫–æ–¥"] = df["–∫–æ–¥"].astype(str).str.strip().str.lower()

# --- üîç –ü–æ–∏—Å–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: –∫–æ–¥ —Å–æ–¥–µ—Ä–∂–∏—Ç—Å—è –≤ URL (–∫–∞–∫ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º –∫–æ–¥–µ) ---
def find_image_url_by_code(code: str) -> str:
    """
    –ò—â–µ—Ç –≤ —Å—Ç–æ–ª–±—Ü–µ 'image' URL, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π –∫–æ–¥ –¥–µ—Ç–∞–ª–∏.
    –ü—Ä–∏–º–µ—Ä: –∫–æ–¥ 'uzcss06503' ‚Üí –Ω–∞–π–¥—ë—Ç URL, –≤ –∫–æ—Ç–æ—Ä–æ–º –≤—Å—Ç—Ä–µ—á–∞–µ—Ç—Å—è —ç—Ç–æ—Ç –∫–æ–¥.
    """
    code_norm = re.sub(r'[^\w\s]', '', code.lower().strip())
    image_col = df["image"].astype(str)
    for url in image_col[image_col != "nan"]:
        url_norm = re.sub(r'[^\w\s]', '', url.lower().strip())
        if code_norm in url_norm:
            return url
    return ""

# –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
def format_row(row):
    return (
        f"üîπ –¢–∏–ø: {row['—Ç–∏–ø']}\n"
        f"üì¶ –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ: {row['–Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ']}\n"
        f"üî¢ –ö–æ–¥: {row['–∫–æ–¥']}\n"
        f"üì¶ –ö–æ–ª-–≤–æ: {row['–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ']}\n"
        f"üí∞ –¶–µ–Ω–∞: {row['—Ü–µ–Ω–∞']} {row['–≤–∞–ª—é—Ç–∞']}\n"
        f"üè≠ –ò–∑–≥–æ—Ç–æ–≤–∏—Ç–µ–ª—å: {row['–∏–∑–≥–æ—Ç–æ–≤–∏—Ç–µ–ª—å']}\n"
        f"‚öôÔ∏è OEM: {row['oem']}"
    )

# –û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ç—Ä–æ–∫–∏ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –∏ –∫–Ω–æ–ø–∫–æ–π
async def send_row_with_image(update: Update, row, text: str):
    if not update.message:
        return

    code = str(row.get("–∫–æ–¥", ""))
    image_url = find_image_url_by_code(code)
    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("üì¶ –í–∑—è—Ç—å –¥–µ—Ç–∞–ª—å", callback_data=f"issue:{code}")]
    ])

    caption = text[:1021] + "..." if len(text) > 1024 else text

    if image_url:
        try:
            await update.message.reply_photo(photo=image_url, caption=caption, reply_markup=keyboard)
            return
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ: {e}")

    await update.message.reply_text(text, reply_markup=keyboard)

# --- –ö–æ–º–∞–Ω–¥—ã ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user_state.pop(user_id, None)
    search_count.pop(user_id, None)
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å –Ω–∞–∑–≤–∞–Ω–∏–µ, –∫–æ–¥ –∏–ª–∏ OEM –¥–µ—Ç–∞–ª–∏.")

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üîç –ë–æ—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏ —Å–ø–∏—Å–∞–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π\n\n"
        "üìå –ö–æ–º–∞–Ω–¥—ã:\n"
        "/start ‚Äî –Ω–∞—á–∞—Ç—å\n"
        "/help ‚Äî —Å–ø—Ä–∞–≤–∫–∞\n"
        "/cancel ‚Äî –æ—Ç–º–µ–Ω–∏—Ç—å —Å–ø–∏—Å–∞–Ω–∏–µ\n\n"
        "–ê–¥–º–∏–Ω:\n"
        "/adduser 123456789 ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
    )

async def add_user(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id not in ADMINS:
        await update.message.reply_text("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    if not context.args or not context.args[0].isdigit():
        await update.message.reply_text("‚ö† –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /adduser 123456789")
        return

    new_user_id = int(context.args[0])
    if new_user_id <= 0:
        await update.message.reply_text("‚ö† –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π user_id.")
        return

    try:
        sheet = get_gsheet().worksheet("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏")
        existing = {int(row[0]) for row in sheet.get_all_values() if row and row[0].isdigit()}
        if new_user_id in existing:
            await update.message.reply_text("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤ —Å–ø–∏—Å–∫–µ.")
        else:
            sheet.append_row([str(new_user_id)])
            get_allowed_users()  # –û–±–Ω–æ–≤–∏—Ç—å –∫—ç—à
            await update.message.reply_text(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {new_user_id} –¥–æ–±–∞–≤–ª–µ–Ω.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")

# --- –ü–æ–∏—Å–∫ ---
async def search(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message or not update.message.text:
        return

    user_id = update.effective_user.id
    if user_id not in get_allowed_users():
        await update.message.reply_text("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
        return

    query = update.message.text.strip()
    if not query:
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å.")
        return

    norm_query = re.sub(r'[^\w\s]', '', query.lower())

    mask = (
        df["—Ç–∏–ø"].astype(str).apply(lambda x: norm_query in re.sub(r'[^\w\s]', '', x.lower())) |
        df["–Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ"].astype(str).apply(lambda x: norm_query in re.sub(r'[^\w\s]', '', x.lower())) |
        df["–∫–æ–¥"].astype(str).apply(lambda x: norm_query in re.sub(r'[^\w\s]', '', x.lower())) |
        df["oem"].astype(str).apply(lambda x: norm_query in re.sub(r'[^\w\s]', '', x.lower())) |
        df["–∏–∑–≥–æ—Ç–æ–≤–∏—Ç–µ–ª—å"].astype(str).apply(lambda x: norm_query in re.sub(r'[^\w\s]', '', x.lower()))
    )

    results = df[mask].copy()

    if results.empty:
        await update.message.reply_text(f'‚ùå –ü–æ –∑–∞–ø—Ä–æ—Å—É "{query}" –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.')
        return

    user_state[user_id] = {
        "query": query,
        "offset": 5,
        "results": results
    }

    for _, row in results.head(5).iterrows():
        text = format_row(row)
        await send_row_with_image(update, row, text)

    if len(results) > 5:
        await update.message.reply_text("–ü–æ–∫–∞–∑–∞–Ω–æ 5 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤. –ù–∞–ø–∏—à–∏—Ç–µ /more –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è.")

# --- –°–ø–∏—Å–∞–Ω–∏–µ ---
async def handle_issue_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = query.from_user.id

    logger.info(f"–ü–æ–ª—É—á–µ–Ω callback: {query.data} –æ—Ç user_id={user_id}")

    if user_id not in get_allowed_users():
        await query.answer("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω", show_alert=True)
        return ConversationHandler.END

    await query.answer()

    try:
        code = query.data.split(":", 1)[1]
    except IndexError:
        await query.message.reply_text("‚ö† –û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –¥–µ—Ç–∞–ª–∏.")
        return ConversationHandler.END

    part = df[df["–∫–æ–¥"] == code.lower().strip()].to_dict(orient="records")
    if not part:
        await query.edit_message_text("‚ùó –î–µ—Ç–∞–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return ConversationHandler.END

    issue_state[user_id] = {"part": part[0]}
    await query.message.reply_text("üî¢ –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:")
    return ASK_QUANTITY

async def handle_quantity(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    text = update.message.text.strip()

    if not text.isdigit() or int(text) <= 0:
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ.")
        return ASK_QUANTITY

    issue_state[user_id]["quantity"] = int(text)
    await update.message.reply_text("üí¨ –í–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (–∏–ª–∏ '–Ω–µ—Ç'):")
    return ASK_COMMENT

async def handle_comment(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    user_id = user.id
    comment = update.message.text.strip()
    data = issue_state.pop(user_id, {})

    part = data.get("part")
    quantity = data.get("quantity")

    logger.info(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–ø–∏—Å–∞–Ω–∏—è: –∫–æ–¥={part.get('–∫–æ–¥')}, –∫–æ–ª-–≤–æ={quantity}, –∫–æ–º–º–µ–Ω—Ç={comment}")

    if part and quantity:
        await save_issue_to_sheet(context, user, part, quantity, comment)
        await update.message.reply_text("‚úÖ –°–ø–∏—Å–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ.")
    else:
        await update.message.reply_text("‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–ø–∏—Å–∞–Ω–∏–∏.")
    return ConversationHandler.END

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    issue_state.pop(user_id, None)
    await update.message.reply_text("‚ùå –°–ø–∏—Å–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    return ConversationHandler.END

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ ---
async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE):
    logger.error("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", exc_info=context.error)
    if isinstance(update, Update) and update.message:
        await update.message.reply_text("‚ö† –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# --- –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—É—Å–∫ ---
def main():
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()

    # –ö–æ–º–∞–Ω–¥—ã
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(CommandHandler("adduser", add_user))
    app.add_handler(CommandHandler("cancel", cancel))

    # –°–ø–∏—Å–∞–Ω–∏–µ
    conv_handler = ConversationHandler(
        entry_points=[CallbackQueryHandler(handle_issue_button, pattern=r"^issue:")],
        states={
            ASK_QUANTITY: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_quantity)],
            ASK_COMMENT: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_comment)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
        per_message=True  # –ó–∞—â–∏—Ç–∞ –æ—Ç —Å—Ç–∞—Ä—ã—Ö –∫–Ω–æ–ø–æ–∫
    )
    app.add_handler(conv_handler)

    # –ü–æ–∏—Å–∫ (–≤–∞–∂–Ω–æ: –ø–æ—Å–ª–µ ConversationHandler!)
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, search))

    # –û—à–∏–±–∫–∏
    app.add_error_handler(error_handler)

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ
    def save_state():
        with open("state.pkl", "wb") as f:
            pickle.dump(user_state, f)
        logger.info("–°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ")

    atexit.register(save_state)
    signal.signal(signal.SIGINT, lambda s, f: (save_state(), exit(0)))
    signal.signal(signal.SIGTERM, lambda s, f: (save_state(), exit(0)))

    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    app.run_polling()

if __name__ == "__main__":
    main()
