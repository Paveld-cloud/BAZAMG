import logging
import os
import pickle
import json
import gspread
import re
from google.oauth2.service_account import Credentials
from telegram import Update, InputFile
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    filters,
    ContextTypes,
)

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ê–¥–º–∏–Ω—ã
ADMINS = {225177765}  # ‚Üê —Å—é–¥–∞ –¥–æ–±–∞–≤—å—Ç–µ —Å–≤–æ–π Telegram user_id

# –°–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è/—Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è)
ALLOWED_USERS_FILE = "allowed_users.pkl"
if os.path.exists(ALLOWED_USERS_FILE):
    with open(ALLOWED_USERS_FILE, "rb") as f:
        allowed_users = pickle.load(f)
else:
    allowed_users = set()

# –¢–æ–∫–µ–Ω –∏ Google Sheets –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
SCOPES = ["https://www.googleapis.com/auth/spreadsheets.readonly"]
SPREADSHEET_URL = os.getenv("SPREADSHEET_URL")
SHEET_NAME = "SAP"

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Google Sheets
def load_data():
    creds_info = json.loads(os.getenv("GOOGLE_APPLICATION_CREDENTIALS_JSON"))
    creds = Credentials.from_service_account_info(creds_info, scopes=SCOPES)
    client = gspread.authorize(creds)
    sheet = client.open_by_url(SPREADSHEET_URL).worksheet(SHEET_NAME)
    return sheet.get_all_records()

raw_data = load_data()

from pandas import DataFrame

df = DataFrame(raw_data)
df.columns = df.columns.str.strip().str.lower()
df["–∫–æ–¥"] = df["–∫–æ–¥"].astype(str).str.strip().str.lower()

# –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_state = {}
search_count = {}

if os.path.exists("state.pkl"):
    with open("state.pkl", "rb") as f:
        user_state = pickle.load(f)

def normalize(text: str) -> str:
    return re.sub(r'[\W_]+', '', text.lower())

def is_allowed(user_id: int) -> bool:
    return user_id in ADMINS or user_id in allowed_users

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if not is_allowed(user_id):
        await update.message.reply_text("‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É.")
        return
    user_state.pop(user_id, None)
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –ò—Å—Ç–æ—Ä–∏—è –ø–æ–∏—Å–∫–∞ –æ—á–∏—â–µ–Ω–∞.\n–û—Ç–ø—Ä–∞–≤—å —Ç–∏–ø, –∫–æ–¥ –∏–ª–∏ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –¥–µ—Ç–∞–ª–∏.")

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_allowed(update.effective_user.id):
        await update.message.reply_text("‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É.")
        return
    await update.message.reply_text(
        "üìò –ö–æ–º–∞–Ω–¥—ã:\n"
        "/start ‚Äî —Å–±—Ä–æ—Å –ø–æ–∏—Å–∫–∞\n"
        "/more ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –µ—â—ë\n"
        "/help ‚Äî —Å–ø—Ä–∞–≤–∫–∞\n"
        "/export ‚Äî —ç–∫—Å–ø–æ—Ä—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤\n"
        "/stats ‚Äî —Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ –∏—Å–∫–∞–ª–∏\n"
        "/add_user <id> ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
        "/list_users ‚Äî —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
        "–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç ‚Äî –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ —Ç–∏–ø—É, –∫–æ–¥—É, OEM, –Ω–∞–∑–≤–∞–Ω–∏—é –∏–ª–∏ –∏–∑–≥–æ—Ç–æ–≤–∏—Ç–µ–ª—é."
    )

async def add_user(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id not in ADMINS:
        await update.message.reply_text("‚õîÔ∏è –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω –º–æ–∂–µ—Ç –¥–æ–±–∞–≤–ª—è—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
        return
    if not context.args:
        await update.message.reply_text("–£–∫–∞–∂–∏—Ç–µ user_id: /add_user 123456789")
        return
    try:
        user_id = int(context.args[0])
        allowed_users.add(user_id)
        with open(ALLOWED_USERS_FILE, "wb") as f:
            pickle.dump(allowed_users, f)
        await update.message.reply_text(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –¥–æ–±–∞–≤–ª–µ–Ω.")
    except ValueError:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç user_id.")

async def list_users(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id not in ADMINS:
        await update.message.reply_text("‚õîÔ∏è –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω –º–æ–∂–µ—Ç –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
        return
    if not allowed_users:
        await update.message.reply_text("–ù–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
    else:
        users = "\n".join(str(uid) for uid in allowed_users)
        await update.message.reply_text(f"üë• –†–∞–∑—Ä–µ—à—ë–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:\n{users}")

async def more(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if not is_allowed(user_id):
        await update.message.reply_text("‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É.")
        return
    state = user_state.get(user_id)
    if not state:
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –ø–æ–∏—Å–∫.")
        return
    query, offset, results = state["query"], state["offset"], state["results"]
    page = results.iloc[offset: offset + 5]
    for _, row in page.iterrows():
        text = format_row(row)
        await send_row_with_image(update, row, text)
    offset += 5
    user_state[user_id]["offset"] = offset
    if offset < len(results):
        await update.message.reply_text("–ù–∞–ø–∏—à–∏—Ç–µ /more –¥–ª—è —Å–ª–µ–¥—É—é—â–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.")
    else:
        await update.message.reply_text("–ë–æ–ª—å—à–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–µ—Ç.")

def format_row(row):
    return (
        f"üîπ –¢–∏–ø: {row['—Ç–∏–ø']}\n"
        f"üì¶ –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ: {row['–Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ']}\n"
        f"üî¢ –ö–æ–¥: {row['–∫–æ–¥']}\n"
        f"üì¶ –ö–æ–ª-–≤–æ: {row['–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ']}\n"
        f"üí∞ –¶–µ–Ω–∞: {row['—Ü–µ–Ω–∞']} {row['–≤–∞–ª—é—Ç–∞']}\n"
        f"üè≠ –ò–∑–≥–æ—Ç–æ–≤–∏—Ç–µ–ª—å: {row['–∏–∑–≥–æ—Ç–æ–≤–∏—Ç–µ–ª—å']}\n"
        f"‚öôÔ∏è OEM: {row['oem']}"
    )

async def send_row_with_image(update: Update, row, text: str):
    code = row.get("–∫–æ–¥", "").upper()
    image_url = f"https://i.ibb.co/{code}.jpg"  # –∏–ª–∏ –¥—Ä—É–≥–æ–π —à–∞–±–ª–æ–Ω, –µ—Å–ª–∏ –∏–∑–≤–µ—Å—Ç–µ–Ω
    try:
        await update.message.reply_photo(photo=image_url, caption=text[:1024])
    except:
        await update.message.reply_text(text)

async def export(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if not is_allowed(user_id):
        await update.message.reply_text("‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É.")
        return
    from pandas import ExcelWriter
    state = user_state.get(user_id)
    if not state:
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –ø–æ–∏—Å–∫.")
        return
    filename = f"export_{user_id}.xlsx"
    state["results"].to_excel(filename, index=False)
    with open(filename, "rb") as f:
        await update.message.reply_document(InputFile(f, filename))
    os.remove(filename)

async def stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if not is_allowed(user_id):
        await update.message.reply_text("‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É.")
        return
    count = search_count.get(user_id, 0)
    await update.message.reply_text(f"üîç –í—ã —Å–¥–µ–ª–∞–ª–∏ {count} –ø–æ–∏—Å–∫–æ–≤ –∑–∞ —Å–µ—Å—Å–∏—é.")

async def search(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if not is_allowed(user_id):
        await update.message.reply_text("‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É.")
        return
    query = update.message.text.strip().lower()
    norm_query = normalize(query)

    mask = df.apply(
        lambda row: any(norm_query in normalize(str(value)) for value in [
            row.get("—Ç–∏–ø", ""), row.get("–Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ", ""), row.get("–∫–æ–¥", ""),
            row.get("oem", ""), row.get("–∏–∑–≥–æ—Ç–æ–≤–∏—Ç–µ–ª—å", "")
        ]),
        axis=1
    )

    results = df[mask]

    if results.empty:
        await update.message.reply_text(f'–ü–æ –∑–∞–ø—Ä–æ—Å—É "{query}" –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.')
        return

    search_count[user_id] = search_count.get(user_id, 0) + 1
    user_state[user_id] = {
        "query": query,
        "offset": 5,
        "results": results
    }

    for _, row in results.head(5).iterrows():
        text = format_row(row)
        await send_row_with_image(update, row, text)

    if len(results) > 5:
        await update.message.reply_text("–ü–æ–∫–∞–∑–∞–Ω–æ 5 –ø–µ—Ä–≤—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤. –ù–∞–ø–∏—à–∏—Ç–µ /more –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è.")

async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE):
    logger.error("–û—à–∏–±–∫–∞", exc_info=context.error)
    if isinstance(update, Update) and update.message:
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

def main():
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(CommandHandler("more", more))
    app.add_handler(CommandHandler("export", export))
    app.add_handler(CommandHandler("stats", stats))
    app.add_handler(CommandHandler("add_user", add_user))
    app.add_handler(CommandHandler("list_users", list_users))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, search))
    app.add_error_handler(error_handler)
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    app.run_polling()

    with open("state.pkl", "wb") as f:
        pickle.dump(user_state, f)

if __name__ == "__main__":
    main()
