import logging
import os
import json
import re
import io
from datetime import datetime, timedelta
from zoneinfo import ZoneInfo

import gspread
from google.oauth2.service_account import Credentials
from telegram import (
    Update, InlineKeyboardMarkup, InlineKeyboardButton, InputFile
)
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler,
    CallbackQueryHandler, ConversationHandler, ContextTypes, filters
)
import pandas as pd

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã —ç—Ç–∞–ø–æ–≤
ASK_QUANTITY, ASK_COMMENT, ASK_CONFIRM = range(3)

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
SPREADSHEET_URL = os.getenv("SPREADSHEET_URL")
SCOPES = ["https://www.googleapis.com/auth/spreadsheets"]
DATA_TTL = 300  # –∫—ç—à 5 –º–∏–Ω—É—Ç

# –ö—ç—à –¥–∞–Ω–Ω—ã—Ö
DATA_CACHE = {"data": None, "timestamp": None}

# –°–æ—Å—Ç–æ—è–Ω–∏—è —Å–ø–∏—Å–∞–Ω–∏—è {user_id: {...}}
user_state = {}
suppress_next_search = set()

# –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è Google Sheets
def get_gs_client():
    creds_info = json.loads(os.getenv("GOOGLE_APPLICATION_CREDENTIALS_JSON"))
    creds = Credentials.from_service_account_info(creds_info, scopes=SCOPES)
    return gspread.authorize(creds)

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
def load_data(force=False):
    now = datetime.now()
    if not force and DATA_CACHE["data"] and DATA_CACHE["timestamp"] and (now - DATA_CACHE["timestamp"]).total_seconds() < DATA_TTL:
        return DATA_CACHE["data"]

    client = get_gs_client()
    sheet = client.open_by_url(SPREADSHEET_URL).worksheet("SAP")
    data = sheet.get_all_records()
    DATA_CACHE["data"] = data
    DATA_CACHE["timestamp"] = now
    logger.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(data)} —Å—Ç—Ä–æ–∫ –∏–∑ Google Sheet")
    return data

# –ü–æ–∏—Å–∫ –¥–µ—Ç–∞–ª–µ–π
def search_parts(query):
    query = query.strip().lower()
    if not query:
        return []
    data = load_data()
    results = []
    for row in data:
        text = " ".join([str(row.get(k, "")).lower() for k in ["—Ç–∏–ø", "–Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ", "–∫–æ–¥", "oem", "–∏–∑–≥–æ—Ç–æ–≤–∏—Ç–µ–ª—å"]])
        if query in text:
            results.append(row)
    return results

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üîç –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–∏—Å–∫–∞ –¥–µ—Ç–∞–ª–∏.\n–î–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /export.")

# –≠–∫—Å–ø–æ—Ä—Ç –≤ Excel
async def export_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    data = load_data()
    df = pd.DataFrame(data)
    bio = io.BytesIO()
    bio.name = "data.xlsx"
    df.to_excel(bio, index=False)
    bio.seek(0)
    await update.message.reply_document(InputFile(bio, filename="data.xlsx"))

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∏—Å–∫–∞
async def search_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id in suppress_next_search:
        suppress_next_search.remove(user_id)
        return

    query = update.message.text.strip()
    results = search_parts(query)

    if not results:
        await update.message.reply_text("‚ùå –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return

    for part in results[:10]:
        caption = f"üì¶ *{part.get('–Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ','')}*\n–ö–æ–¥: `{part.get('–∫–æ–¥','')}`\nOEM: {part.get('oem','')}"
        keyboard = [[InlineKeyboardButton("üì• –í–∑—è—Ç—å –¥–µ—Ç–∞–ª—å", callback_data=f"take|{part.get('–∫–æ–¥')}")]]
        await update.message.reply_text(
            caption, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode="Markdown"
        )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–í–∑—è—Ç—å –¥–µ—Ç–∞–ª—å"
async def take_part_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    part_code = query.data.split("|")[1]
    user_state[query.from_user.id] = {"part_code": part_code}
    suppress_next_search.add(query.from_user.id)
    await query.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:")
    return ASK_QUANTITY

# –í–≤–æ–¥ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
async def quantity_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        qty = int(update.message.text.strip())
    except ValueError:
        await update.message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
        return ASK_QUANTITY
    user_state[update.effective_user.id]["quantity"] = qty
    suppress_next_search.add(update.effective_user.id)
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:")
    return ASK_COMMENT

# –í–≤–æ–¥ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
async def comment_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    comment = update.message.text.strip()
    st = user_state[update.effective_user.id]
    st["comment"] = comment

    # –ö–Ω–æ–ø–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    keyboard = [
        [InlineKeyboardButton("‚úÖ –î–∞", callback_data="confirm_yes"),
         InlineKeyboardButton("‚ùå –ù–µ—Ç", callback_data="confirm_no")]
    ]
    text = (f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–ø–∏—Å–∞—Ç—å –¥–µ—Ç–∞–ª—å?\n\n"
            f"üì¶ –ö–æ–¥: {st['part_code']}\n"
            f"üî¢ –ö–æ–ª-–≤–æ: {st['quantity']}\n"
            f"üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {st['comment']}")
    await update.message.reply_text(text, reply_markup=InlineKeyboardMarkup(keyboard))
    return ASK_CONFIRM

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
async def confirm_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    uid = query.from_user.id
    if query.data == "confirm_yes":
        st = user_state.pop(uid, None)
        if st:
            client = get_gs_client()
            ws = client.open_by_url(SPREADSHEET_URL).worksheet("–ò—Å—Ç–æ—Ä–∏—è")
            ws.append_row([
                datetime.now(ZoneInfo("Asia/Tashkent")).strftime("%Y-%m-%d %H:%M:%S"),
                query.from_user.username or "",
                st["part_code"], st["quantity"], st["comment"]
            ])
            await query.message.reply_text("‚úÖ –î–µ—Ç–∞–ª—å —Å–ø–∏—Å–∞–Ω–∞ –∏ –∑–∞–ø–∏—Å–∞–Ω–∞ –≤ –∏—Å—Ç–æ—Ä–∏—é.")
    else:
        user_state.pop(uid, None)
        await query.message.reply_text("‚ùå –°–ø–∏—Å–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    return ConversationHandler.END

# –û—Ç–º–µ–Ω–∞
async def cancel_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_state.pop(update.effective_user.id, None)
    await update.message.reply_text("‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    return ConversationHandler.END

# –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
def build_app():
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()

    conv = ConversationHandler(
        entry_points=[CallbackQueryHandler(take_part_callback, pattern=r"^take\|")],
        states={
            ASK_QUANTITY: [MessageHandler(filters.TEXT & ~filters.COMMAND, quantity_handler)],
            ASK_COMMENT: [MessageHandler(filters.TEXT & ~filters.COMMAND, comment_handler)],
            ASK_CONFIRM: [CallbackQueryHandler(confirm_handler, pattern=r"^confirm_")]
        },
        fallbacks=[
            CommandHandler("cancel", cancel_cmd),
            MessageHandler(filters.Regex("^–û—Ç–º–µ–Ω–∏—Ç—å$"), cancel_cmd)
        ],
    )
    app.add_handler(CommandHandler("start", start_cmd))
    app.add_handler(CommandHandler("export", export_cmd))
    app.add_handler(conv)
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, search_handler))
    return app

if __name__ == "__main__":
    app = build_app()
    PORT = int(os.environ.get("PORT", "8080"))
    WEBHOOK_URL = os.getenv("WEBHOOK_URL")
    app.run_webhook(listen="0.0.0.0", port=PORT, url_path="", webhook_url=WEBHOOK_URL)
