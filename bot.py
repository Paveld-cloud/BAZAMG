import os
import re
import io
import json
import math
import time
import asyncio
import logging
from datetime import datetime

import gspread
from google.oauth2.service_account import Credentials
from telegram import (
    Update,
    InputFile,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
)
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    ConversationHandler,
    ContextTypes,
    filters,
)
import pandas as pd
from pandas import DataFrame

# ===================== –õ–û–ì–ò–†–û–í–ê–ù–ò–ï =====================
logging.basicConfig(level=logging.INFO, format="%(asctime)s %(levelname)s %(message)s")
logger = logging.getLogger("bot")

# ===================== –ù–ê–°–¢–†–û–ô–ö–ò =====================
# –ê–¥–º–∏–Ω—ã (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–∏ ID)
ADMINS = {225177765}

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
SPREADSHEET_URL = os.getenv("SPREADSHEET_URL")
CREDS_JSON = os.getenv("GOOGLE_APPLICATION_CREDENTIALS_JSON")

if not TELEGRAM_TOKEN or not SPREADSHEET_URL or not CREDS_JSON:
    raise RuntimeError("–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è: TELEGRAM_TOKEN / SPREADSHEET_URL / GOOGLE_APPLICATION_CREDENTIALS_JSON")

# Google Sheets SCOPES ‚Äî –¥–æ—Å—Ç—É–ø –Ω–∞ —á—Ç–µ–Ω–∏–µ/–∑–∞–ø–∏—Å—å
SCOPES = ["https://www.googleapis.com/auth/spreadsheets"]

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–∞–Ω–Ω—ã—Ö/–ø–æ–∏—Å–∫–∞/–≤—ã–≤–æ–¥–∞
DATA_TTL = 300  # —Å–µ–∫, 5 –º–∏–Ω—É—Ç –¥–æ –∞–≤—Ç–æ-–ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã
PAGE_SIZE = 5   # —Å–∫–æ–ª—å–∫–æ –∫–∞—Ä—Ç–æ—á–µ–∫ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É

# –≠—Ç–∞–ø—ã –¥–∏–∞–ª–æ–≥–∞ —Å–ø–∏—Å–∞–Ω–∏—è
ASK_QUANTITY, ASK_COMMENT = range(2)

# ===================== –ì–õ–û–ë–ê–õ–¨–ù–´–ï –°–û–°–¢–û–Ø–ù–ò–Ø =====================
df: DataFrame | None = None
_last_load_ts = 0.0

# user_state: —Ö—Ä–∞–Ω–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–æ–∏—Å–∫–∞ –∏ –ø–æ–∑–∏—Ü–∏—é –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
# { user_id: { "query": str, "results": DataFrame, "page": int } }
user_state: dict[int, dict] = {}

# issue_state: —Ö—Ä–∞–Ω–∏—Ç –ø—Ä–æ—Ü–µ—Å—Å —Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
# { user_id: {"part": dict(row), "quantity": float|int} }
issue_state: dict[int, dict] = {}


# ===================== –£–¢–ò–õ–ò–¢–´ GOOGLE SHEETS =====================
def get_gs_client():
    creds_info = json.loads(CREDS_JSON)
    creds = Credentials.from_service_account_info(creds_info, scopes=SCOPES)
    client = gspread.authorize(creds)
    return client

def load_data() -> list[dict]:
    """–°—á–∏—Ç—ã–≤–∞–µ—Ç –ü–ï–†–í–´–ô –ª–∏—Å—Ç –≤ —Ç–∞–±–ª–∏—Ü–µ SPREADSHEET_URL –ø–æ—Å—Ç—Ä–æ—á–Ω–æ –∫–∞–∫ dict."""
    client = get_gs_client()
    sheet = client.open_by_url(SPREADSHEET_URL)
    ws = sheet.sheet1  # –ø–µ—Ä–≤—ã–π –ª–∏—Å—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    rows = ws.get_all_records()
    return rows

def ensure_fresh_data(force: bool = False):
    """–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –∫—ç—à–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Google Sheet –ø–æ TTL –∏–ª–∏ –ø–æ –∑–∞–ø—Ä–æ—Å—É."""
    global df, _last_load_ts
    if force or (time.time() - _last_load_ts > DATA_TTL) or df is None:
        raw = load_data()
        new_df = DataFrame(raw)
        if not len(new_df):
            logger.warning("–õ–∏—Å—Ç –ø—É—Å—Ç –∏–ª–∏ –Ω–µ –ø—Ä–æ—á–∏—Ç–∞–Ω.")
        # –ø—Ä–∏–≤–µ–¥–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏–π –∫–æ–ª–æ–Ω–æ–∫ –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤ –ø–æ –∫—Ä–∞—è–º
        new_df.columns = new_df.columns.str.strip().str.lower()

        # –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª—é—á–µ–≤—ã—Ö –∫–æ–ª–æ–Ω–æ–∫
        for col in ["–∫–æ–¥", "oem"]:
            if col in new_df.columns:
                new_df[col] = new_df[col].astype(str).str.strip().str.lower()

        df = new_df
        _last_load_ts = time.time()
        logger.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(df)} —Å—Ç—Ä–æ–∫ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã")

# ===================== –ü–û–ò–°–ö =====================
SEARCH_FIELDS = ["—Ç–∏–ø", "–Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ", "–∫–æ–¥", "oem", "–∏–∑–≥–æ—Ç–æ–≤–∏—Ç–µ–ª—å"]

def normalize(text: str) -> str:
    return re.sub(r"[^\w\s]", " ", (text or "")).lower().strip()

def match_row(row: dict, tokens: list[str]) -> int:
    """–ü–æ–¥—Å—á–µ—Ç –ø—Ä–æ—Å—Ç–æ–≥–æ —Å–∫–æ—Ä–∞: –≤—Å–µ —Ç–æ–∫–µ–Ω—ã –Ω–∞–π–¥–µ–Ω—ã ‚Äî +1, –µ—Å–ª–∏ –ø–æ–ª–µ '–∫–æ–¥' –∏–ª–∏ 'oem' ‚Äî +2."""
    score = 0
    for field in SEARCH_FIELDS:
        val = normalize(str(row.get(field, "")))
        if not val:
            continue
        if all(tok in val for tok in tokens):
            score += 2 if field in ("–∫–æ–¥", "oem") else 1
    return score

def val(row: dict, key: str, default: str = "‚Äî") -> str:
    v = row.get(key)
    return default if v in (None, "", float("nan")) else str(v)

def format_row(row: dict) -> str:
    """–ß–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º—ã–π –±–ª–æ–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ –¥–µ—Ç–∞–ª–∏."""
    return (
        f"üîπ –¢–∏–ø: {val(row, '—Ç–∏–ø')}\n"
        f"üì¶ –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ: {val(row, '–Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ')}\n"
        f"üî¢ –ö–æ–¥: {val(row, '–∫–æ–¥')}\n"
        f"üì¶ –ö–æ–ª-–≤–æ: {val(row, '–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ')}\n"
        f"üí∞ –¶–µ–Ω–∞: {val(row, '—Ü–µ–Ω–∞')} {val(row, '–≤–∞–ª—é—Ç–∞')}\n"
        f"üè≠ –ò–∑–≥–æ—Ç–æ–≤–∏—Ç–µ–ª—å: {val(row, '–∏–∑–≥–æ—Ç–æ–≤–∏—Ç–µ–ª—å')}\n"
        f"‚öôÔ∏è OEM: {val(row, 'oem')}"
    )

def get_row_image(row: dict) -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è —Å—Ç—Ä–æ–∫–∏, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å –≤ –æ–¥–Ω–æ–π –∏–∑ —Ç–∏–ø–æ–≤—ã—Ö –∫–æ–ª–æ–Ω–æ–∫."""
    for key in ("image", "–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", "photo", "—Ñ–æ—Ç–æ"):
        if key in row:
            url = row.get(key)
            if isinstance(url, str) and url.strip():
                return url.strip()
    return ""

async def send_row_with_image(update: Update, row: dict, text: str):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –∫–∞—Ä—Ç–æ—á–∫–∏: —Ñ–æ—Ç–æ (–µ—Å–ª–∏ –µ—Å—Ç—å) + –∫–Ω–æ–ø–∫–∞ '–í–∑—è—Ç—å –¥–µ—Ç–∞–ª—å'."""
    code = str(row.get("–∫–æ–¥", "")).strip().lower()
    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("üì¶ –í–∑—è—Ç—å –¥–µ—Ç–∞–ª—å", callback_data=f"issue:{code}")]
    ])

    image_url = get_row_image(row)
    if image_url:
        try:
            await update.message.reply_photo(photo=image_url, caption=text, reply_markup=keyboard)
            return
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ, —à–ª—ë–º —Ç–µ–∫—Å—Ç. –ü—Ä–∏—á–∏–Ω–∞: {e}")

    await update.message.reply_text(text, reply_markup=keyboard)

def get_user_state(user_id: int) -> dict:
    return user_state.setdefault(user_id, {"query": "", "results": DataFrame(), "page": 0})

# ===================== –°–û–•–†–ê–ù–ï–ù–ò–ï –°–ü–ò–°–ê–ù–ò–Ø =====================
def save_issue_to_sheet(bot, user, part: dict, quantity, comment: str):
    """–ü–∏—à–µ–º —Å–ø–∏—Å–∞–Ω–∏–µ –≤ –ª–∏—Å—Ç '–ò—Å—Ç–æ—Ä–∏—è'. –°–æ–∑–¥–∞–¥–∏–º –ª–∏—Å—Ç –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç."""
    try:
        client = get_gs_client()
        sh = client.open_by_url(SPREADSHEET_URL)
        try:
            ws = sh.worksheet("–ò—Å—Ç–æ—Ä–∏—è")
        except gspread.WorksheetNotFound:
            ws = sh.add_worksheet(title="–ò—Å—Ç–æ—Ä–∏—è", rows=1000, cols=12)
            ws.append_row([
                "timestamp", "user_id", "username", "name",
                "–∫–æ–¥", "–Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ", "–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ(—Å–ø–∏—Å–∞–Ω–æ)", "–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π"
            ])
        row = [
            datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
            user.id,
            user.username or "",
            f"{user.first_name or ''} {user.last_name or ''}".strip(),
            str(part.get("–∫–æ–¥", "")),
            str(part.get("–Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ", "")),
            str(quantity),
            comment or "",
        ]
        ws.append_row(row)
        logger.info("üíæ –°–ø–∏—Å–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∞–Ω–æ –≤ '–ò—Å—Ç–æ—Ä–∏—è'")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å–ø–∏—Å–∞–Ω–∏—è: {e}")
        # –ø–æ–ø—Ä–æ–±—É–µ–º —Å–æ–æ–±—â–∏—Ç—å –∞–¥–º–∏–Ω–∞–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
        async def notify_admins():
            for admin_id in ADMINS:
                try:
                    await bot.send_message(chat_id=admin_id, text=f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–ø–∏—Å–∞–Ω–∏—è: {e}")
                except Exception:
                    pass
        asyncio.create_task(notify_admins())

# ===================== –•–ï–ù–î–õ–ï–†–´ –ö–û–ú–ê–ù–î =====================
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    # —Å–±—Ä–æ—Å –Ω–µ–∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ —Å–ø–∏—Å–∞–Ω–∏—è
    issue_state.pop(user_id, None)
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –∑–∞–ø—Ä–æ—Å (–Ω–∞–ø—Ä–∏–º–µ—Ä: `—Ñ–∏–ª—å—Ç—Ä –º–∞—Å–ª–∞` –∏–ª–∏ `96353000`),\n"
        "–∞ —è –Ω–∞–π–¥—É –¥–µ—Ç–∞–ª–∏. –ö–æ–º–∞–Ω–¥—ã:\n"
        "‚Ä¢ /help ‚Äî –ø–æ–º–æ—â—å\n"
        "‚Ä¢ /more ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –µ—â—ë\n"
        "‚Ä¢ /export ‚Äî –≤—ã–≥—Ä—É–∑–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ (XLSX/CSV)\n"
        "‚Ä¢ /cancel ‚Äî –æ—Ç–º–µ–Ω–∏—Ç—å —Å–ø–∏—Å–∞–Ω–∏–µ\n"
        "‚Ä¢ /reload ‚Äî –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω)",
        parse_mode="Markdown",
    )

async def help_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:\n"
        "1) –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–ª–æ–≤–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ (–º–æ–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ).\n"
        "2) –ù–∞–∂–º–∏—Ç–µ ¬´üì¶ –í–∑—è—Ç—å –¥–µ—Ç–∞–ª—å¬ª —á—Ç–æ–±—ã —Å–ø–∏—Å–∞—Ç—å ‚Äî –±–æ—Ç —Å–ø—Ä–æ—Å–∏—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π.\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "‚Ä¢ /more ‚Äî —Å–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤\n"
        "‚Ä¢ /export ‚Äî –≤—ã–≥—Ä—É–∑–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤\n"
        "‚Ä¢ /cancel ‚Äî –æ—Ç–º–µ–Ω–∞ –Ω–µ–∑–∞–≤–µ—Ä—à—ë–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∞–Ω–∏—è\n"
        "‚Ä¢ /reload ‚Äî –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö (–∞–¥–º–∏–Ω)"
    )

async def reload_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id not in ADMINS:
        return await update.message.reply_text("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
    ensure_fresh_data(force=True)
    await update.message.reply_text("‚úÖ –î–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω—ã.")

async def cancel_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if issue_state.pop(user_id, None):
        await update.message.reply_text("–û–ø–µ—Ä–∞—Ü–∏—è —Å–ø–∏—Å–∞–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    else:
        await update.message.reply_text("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–ª—è –æ—Ç–º–µ–Ω—ã.")

async def export_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    state = get_user_state(user_id)
    results: DataFrame = state.get("results") or DataFrame()
    if results.empty:
        return await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –ø–æ–∏—Å–∫, —á—Ç–æ–±—ã –±—ã–ª–æ —á—Ç–æ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å.")

    # –ü—Ä–æ–±—É–µ–º XLSX, –µ—Å–ª–∏ –Ω–µ—Ç openpyxl ‚Äî –ø–∞–¥—ë–º –≤ CSV
    try:
        output = io.BytesIO()
        with pd.ExcelWriter(output, engine="openpyxl") as writer:
            results.to_excel(writer, index=False)
        output.seek(0)
        await update.message.reply_document(InputFile(output, filename=f"export_{user_id}.xlsx"))
    except Exception as e:
        logger.warning(f"XLSX –Ω–µ —É–¥–∞–ª–æ—Å—å, —à–ª—ë–º CSV: {e}")
        csv_data = results.to_csv(index=False, encoding="utf-8-sig")
        await update.message.reply_document(
            InputFile(io.BytesIO(csv_data.encode("utf-8-sig")), filename=f"export_{user_id}.csv")
        )

# ===================== –ü–û–ò–°–ö –ò –í–´–í–û–î –†–ï–ó–£–õ–¨–¢–ê–¢–û–í =====================
async def search_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–±—ã—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–∫ –∑–∞–ø—Ä–æ—Å—ã –ø–æ–∏—Å–∫–∞."""
    ensure_fresh_data()
    if update.message is None:
        return

    query = update.message.text.strip()
    if not query:
        return await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å.")

    tokens = normalize(query).split()
    if not tokens:
        return await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –±–æ–ª–µ–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å.")

    matches = []
    # –∏–¥—ë–º –ø–æ —Å—Ç—Ä–æ–∫–∞–º DataFrame –∏ —Å—á–∏—Ç–∞–µ–º —Å–∫–æ—Ä
    for _, row in df.iterrows():
        rdict = row.to_dict()
        s = match_row(rdict, tokens)
        if s > 0:
            matches.append((s, rdict))

    if not matches:
        return await update.message.reply_text(f"–ü–æ –∑–∞–ø—Ä–æ—Å—É ¬´{query}¬ª –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")

    # —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏
    matches.sort(key=lambda x: x[0], reverse=True)
    results_df = DataFrame([r for _, r in matches])

    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_id = update.effective_user.id
    state = get_user_state(user_id)
    state["query"] = query
    state["results"] = results_df
    state["page"] = 0

    await send_page(update, user_id)

async def more_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ª–µ–¥—É—é—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ."""
    user_id = update.effective_user.id
    state = get_user_state(user_id)
    if not isinstance(state.get("results"), DataFrame) or state["results"].empty:
        return await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –ø–æ–∏—Å–∫.")
    state["page"] += 1
    await send_page(update, user_id)

async def send_page(update: Update, user_id: int):
    state = get_user_state(user_id)
    results: DataFrame = state["results"]
    page = state["page"]

    total = len(results)
    pages = math.ceil(total / PAGE_SIZE)
    if page >= pages:
        state["page"] = pages - 1
        return await update.message.reply_text("–ë–æ–ª—å—à–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–µ—Ç.")

    start = page * PAGE_SIZE
    end = min(start + PAGE_SIZE, total)
    chunk = results.iloc[start:end]

    await update.message.reply_text(f"–ù–∞–π–¥–µ–Ω–æ: {total}. –ü–æ–∫–∞–∑—ã–≤–∞—é {start + 1}‚Äì{end} –∏–∑ {total}.")

    # –≤—ã–≤–æ–¥–∏–º –∫–∞—Ä—Ç–æ—á–∫–∏
    for _, row in chunk.iterrows():
        text = format_row(row.to_dict())
        await send_row_with_image(update, row.to_dict(), text)

    if end < total:
        await update.message.reply_text("–ù–∞–∂–º–∏—Ç–µ /more, —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å –µ—â—ë.")

# ===================== –°–ü–ò–°–ê–ù–ò–ï (Callback + –î–∏–∞–ª–æ–≥) =====================
async def on_issue_click(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    user_id = query.from_user.id
    data = query.data
    if not data.startswith("issue:"):
        return

    code = data.split(":", 1)[1].strip().lower()
    # –Ω–∞—Ö–æ–¥–∏–º —Å—Ç—Ä–æ–∫—É –ø–æ '–∫–æ–¥'
    ensure_fresh_data()
    found = None
    if df is not None and "–∫–æ–¥" in df.columns:
        hit = df[df["–∫–æ–¥"].astype(str).str.lower() == code]
        if not hit.empty:
            found = hit.iloc[0].to_dict()

    if not found:
        return await query.edit_message_text("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –¥–µ—Ç–∞–ª—å –ø–æ –∫–æ–¥—É. –û–±–Ω–æ–≤–∏—Ç–µ —Å–ø–∏—Å–æ–∫ –∏–ª–∏ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –ø–æ–∏—Å–∫ –∑–∞–Ω–æ–≤–æ.")

    issue_state[user_id] = {"part": found}
    await query.message.reply_text("–°–∫–æ–ª—å–∫–æ —Å–ø–∏—Å–∞—Ç—å? –£–∫–∞–∂–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1 –∏–ª–∏ 2.5).")
    return ASK_QUANTITY

async def handle_quantity(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    text = (update.message.text or "").strip().replace(",", ".")
    try:
        qty = float(text)
        if qty <= 0:
            raise ValueError
    except Exception:
        return await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä: 1 –∏–ª–∏ 2.5")

    st = issue_state.get(user_id)
    if not st:
        return await update.message.reply_text("–°–ø–∏—Å–∞–Ω–∏–µ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ, –Ω–∞–∂–∞–≤ ¬´üì¶ –í–∑—è—Ç—å –¥–µ—Ç–∞–ª—å¬ª –≤ –∫–∞—Ä—Ç–æ—á–∫–µ.")

    st["quantity"] = qty
    await update.message.reply_text("–î–æ–±–∞–≤—å—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (–∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ ¬´-¬ª, –µ—Å–ª–∏ –±–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è).")
    return ASK_COMMENT

async def handle_comment(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    comment = (update.message.text or "").strip()
    st = issue_state.get(user_id)
    if not st:
        return await update.message.reply_text("–°–ø–∏—Å–∞–Ω–∏–µ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ –∏–∑ –∫–∞—Ä—Ç–æ—á–∫–∏ –¥–µ—Ç–∞–ª–∏.")

    part = st.get("part")
    qty = st.get("quantity")
    if part is None or qty is None:
        issue_state.pop(user_id, None)
        return await update.message.reply_text("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")

    save_issue_to_sheet(context.bot, update.effective_user, part, qty, "" if comment == "-" else comment)
    issue_state.pop(user_id, None)

    await update.message.reply_text(
        f"‚úÖ –°–ø–∏—Å–∞–Ω–æ: {qty}\n"
        f"üî¢ –ö–æ–¥: {val(part, '–∫–æ–¥')}\n"
        f"üì¶ –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ: {val(part, '–Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ')}\n"
        f"üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {comment if comment != '-' else '‚Äî'}"
    )
    return ConversationHandler.END

async def handle_cancel_in_dialog(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await cancel_cmd(update, context)
    return ConversationHandler.END

# ===================== MAIN =====================
def build_app():
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()

    # –ö–æ–º–∞–Ω–¥—ã
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_cmd))
    app.add_handler(CommandHandler("more", more_cmd))
    app.add_handler(CommandHandler("export", export_cmd))
    app.add_handler(CommandHandler("reload", reload_cmd))
    app.add_handler(CommandHandler("cancel", cancel_cmd))

    # –î–∏–∞–ª–æ–≥ —Å–ø–∏—Å–∞–Ω–∏—è
    conv = ConversationHandler(
        entry_points=[CallbackQueryHandler(on_issue_click, pattern=r"^issue:")],
        states={
            ASK_QUANTITY: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_quantity)],
            ASK_COMMENT: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_comment)],
        },
        fallbacks=[CommandHandler("cancel", handle_cancel_in_dialog)],
        allow_reentry=True,
    )
    app.add_handler(conv)

    # –ü–æ–∏—Å–∫ ‚Äî –ª—é–±–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, search_text))

    return app

if __name__ == "__main__":
    ensure_fresh_data(force=True)
    application = build_app()
    logger.info("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –û–∂–∏–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π...")
    application.run_polling(close_loop=False)
