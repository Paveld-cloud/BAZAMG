import logging
import os
import pickle
import json
import gspread
from google.oauth2.service_account import Credentials
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, InputFile
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    filters,
    ContextTypes,
)

# üîí –ê–¥–º–∏–Ω—ã
ADMINS = {123456789, 987654321}  # ‚Üê —Å—é–¥–∞ –¥–æ–±–∞–≤—å —Å–≤–æ–π user_id

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Telegram Token –∏ Google Sheets –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
SCOPES = ["https://www.googleapis.com/auth/spreadsheets.readonly"]
SPREADSHEET_URL = os.getenv("SPREADSHEET_URL")
SHEET_NAME = "SAP"

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Google Sheets
def load_data():
    creds_info = json.loads(os.getenv("GOOGLE_APPLICATION_CREDENTIALS_JSON"))
    creds = Credentials.from_service_account_info(creds_info, scopes=SCOPES)
    client = gspread.authorize(creds)
    sheet = client.open_by_url(SPREADSHEET_URL).worksheet(SHEET_NAME)
    return sheet.get_all_records()

raw_data = load_data()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è
from pandas import DataFrame
df = DataFrame(raw_data)
df.columns = df.columns.str.strip().str.lower()
df["–∫–æ–¥"] = df["–∫–æ–¥"].astype(str).str.strip().str.lower()
df["–Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ"] = df["–Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ"].astype(str).str.strip().str.lower()

# –°–æ—Å—Ç–æ—è–Ω–∏—è
user_state = {}
search_count = {}
users_set = set()

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å–µ—Å—Å–∏–π
if os.path.exists("state.pkl"):
    with open("state.pkl", "rb") as f:
        user_state = pickle.load(f)

if os.path.exists("users.pkl"):
    with open("users.pkl", "rb") as f:
        users_set = pickle.load(f)

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–Ω–æ–ø–æ–∫
def generate_inline_keyboard(code: str):
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üßæ –ò—Å—Ç–æ—Ä–∏—è", callback_data=f"history|{code}"),
         InlineKeyboardButton("üß∞ –£—Ö–æ–¥", callback_data=f"care|{code}")],
        [InlineKeyboardButton("üìÑ –û–ø–∏—Å–∞–Ω–∏–µ", callback_data=f"description|{code}"),
         InlineKeyboardButton("üé• –í–∏–¥–µ–æ", callback_data=f"video|{code}")]
    ])

# –ö–æ–º–∞–Ω–¥—ã
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    users_set.add(user_id)
    user_state.pop(user_id, None)
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å –∫–æ–¥, OEM –∏–ª–∏ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –¥–µ—Ç–∞–ª–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞.")

async def more(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    state = user_state.get(user_id)
    if not state:
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –ø–æ–∏—Å–∫.")
        return

    query, offset, results = state["query"], state["offset"], state["results"]
    page = results.iloc[offset: offset + 5]
    for _, row in page.iterrows():
        await update.message.reply_text(
            format_result(row),
            reply_markup=generate_inline_keyboard(str(row["–∫–æ–¥"]))
        )

    user_state[user_id]["offset"] += 5
    if user_state[user_id]["offset"] < len(results):
        await update.message.reply_text("–ù–∞–ø–∏—à–∏—Ç–µ /more –¥–ª—è —Å–ª–µ–¥—É—é—â–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.")
    else:
        await update.message.reply_text("–ë–æ–ª—å—à–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–µ—Ç.")

def format_result(row):
    return (
        f"üì¶ –¢–∏–ø: {row['—Ç–∏–ø']}\n"
        f"üè∑Ô∏è –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ: {row['–Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ']}\n"
        f"üÜî –ö–æ–¥: {row['–∫–æ–¥']}\n"
        f"üì¶ –ö–æ–ª-–≤–æ: {row['–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ']}\n"
        f"üíµ –¶–µ–Ω–∞: {row['—Ü–µ–Ω–∞']} {row['–≤–∞–ª—é—Ç–∞']}\n"
        f"üè≠ –ò–∑–≥–æ—Ç–æ–≤–∏—Ç–µ–ª—å: {row['–∏–∑–≥–æ—Ç–æ–≤–∏—Ç–µ–ª—å']}\n"
        f"‚öôÔ∏è OEM: {row['oem']}"
    )

async def search(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    users_set.add(user_id)
    query = update.message.text.strip().lower()

    mask = (
        df["—Ç–∏–ø"].str.contains(query, na=False) |
        df["–Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ"].str.contains(query, na=False) |
        df["–∫–æ–¥"].str.contains(query, na=False) |
        df["oem"].astype(str).str.contains(query, na=False) |
        df["–∏–∑–≥–æ—Ç–æ–≤–∏—Ç–µ–ª—å"].str.contains(query, na=False)
    )
    results = df[mask]

    if results.empty:
        await update.message.reply_text(f"–ü–æ –∑–∞–ø—Ä–æ—Å—É ¬´{query}¬ª –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return

    user_state[user_id] = {"query": query, "offset": 5, "results": results}
    search_count[user_id] = search_count.get(user_id, 0) + 1

    for _, row in results.head(5).iterrows():
        await update.message.reply_text(format_result(row), reply_markup=generate_inline_keyboard(str(row["–∫–æ–¥"])))

    if len(results) > 5:
        await update.message.reply_text("–ü–æ–∫–∞–∑–∞–Ω–æ 5 –ø–µ—Ä–≤—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤. –ù–∞–ø–∏—à–∏—Ç–µ /more –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è.")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫
async def handle_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    action, code = query.data.split("|", 1)

    text_map = {
        "history": f"üßæ –ò—Å—Ç–æ—Ä–∏—è –¥–µ—Ç–∞–ª–∏: {code}",
        "care": f"üß∞ –£—Ö–æ–¥ –∑–∞ –¥–µ—Ç–∞–ª—å—é: {code}",
        "description": f"üìÑ –û–ø–∏—Å–∞–Ω–∏–µ –¥–µ—Ç–∞–ª–∏: {code}",
        "video": f"üé• –í–∏–¥–µ–æ–æ–±–∑–æ—Ä: {code}"
    }
    await query.message.reply_text(text_map.get(action, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ."))

# üëë –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
async def admin(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id not in ADMINS:
        await update.message.reply_text("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
        return

    text = (
        "üîß –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:\n"
        f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users_set)}\n"
        f"üîç –í—Å–µ–≥–æ –ø–æ–∏—Å–∫–æ–≤: {sum(search_count.values())}\n"
        "üì§ –ù–∞–ø–∏—à–∏—Ç–µ /broadcast <—Å–æ–æ–±—â–µ–Ω–∏–µ> –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏"
    )
    await update.message.reply_text(text)

async def broadcast(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id not in ADMINS:
        await update.message.reply_text("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
        return

    message = " ".join(context.args)
    count = 0
    for uid in users_set:
        try:
            await context.bot.send_message(chat_id=uid, text=f"üì¢ {message}")
            count += 1
        except:
            continue
    await update.message.reply_text(f"‚úÖ –†–∞–∑–æ—Å–ª–∞–Ω–æ {count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.")

# –û—à–∏–±–∫–∏
async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE):
    logger.error("–û—à–∏–±–∫–∞", exc_info=context.error)

# –ó–∞–ø—É—Å–∫
def main():
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("more", more))
    app.add_handler(CommandHandler("admin", admin))
    app.add_handler(CommandHandler("broadcast", broadcast))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, search))
    app.add_handler(CallbackQueryHandler(handle_callback))
    app.add_error_handler(error_handler)

    app.run_polling()

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    with open("state.pkl", "wb") as f:
        pickle.dump(user_state, f)
    with open("users.pkl", "wb") as f:
        pickle.dump(users_set, f)

if __name__ == "__main__":
    main()



