import logging
import pandas as pd
import os
from telegram import Update
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    filters,
    ContextTypes,
)

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN", "7574993294:...")

# –ß–∏—Ç–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
df = pd.read_excel("data.xlsx")
df.columns = df.columns.str.strip().str.lower()

# –•—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–∏—Å–∫–∞: {user_id: {"query": ..., "offset": ..., "results": DataFrame}}
user_state = {}

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    # –ü–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    user_state.pop(user_id, None)
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –ò—Å—Ç–æ—Ä–∏—è –ø–æ–∏—Å–∫–∞ –æ—á–∏—â–µ–Ω–∞.\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–∏–ø –∏–ª–∏ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –¥–µ—Ç–∞–ª–∏ –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–∏—Å–∫–∞."
    )

async def search(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    query = update.message.text.strip().lower()

    # –§–∏–ª—å—Ç—Ä –ø–æ '—Ç–∏–ø' –∏ '–Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ'
    mask = (
        df['—Ç–∏–ø'].str.lower().str.contains(query, na=False) |
        df['–Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ'].str.lower().str.contains(query, na=False)
    )
    results = df[mask]

    if results.empty:
        await update.message.reply_text(f'–ü–æ –∑–∞–ø—Ä–æ—Å—É "{query}" –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.')
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: —Å—Ç–∞—Ä—Ç–æ–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ 0‚Äì5
    user_state[user_id] = {
        "query": query,
        "offset": 0,
        "results": results
    }

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—É—é –ø–æ—Ä—Ü–∏—é
    await send_page(update, user_id)

async def more(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    state = user_state.get(user_id)

    if not state:
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–∏—Å–∫–∞ (/start —á—Ç–æ–±—ã –æ—á–∏—Å—Ç–∏—Ç—å).")
        return

    await send_page(update, user_id)

async def send_page(update: Update, user_id: int):
    state = user_state[user_id]
    results = state["results"]
    offset = state["offset"]
    chunk = results.iloc[offset : offset + 5]

    for _, row in chunk.iterrows():
        await update.message.reply_text(
            f"üîπ –¢–∏–ø: {row['—Ç–∏–ø']}\n"
            f"üì¶ –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ: {row['–Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ']}\n"
            f"üî¢ –ö–æ–¥: {row['–∫–æ–¥']}\n"
            f"üì¶ –ö–æ–ª-–≤–æ: {row['–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ']}\n"
            f"üí∞ –¶–µ–Ω–∞: {row['—Ü–µ–Ω–∞']} {row['–≤–∞–ª—é—Ç–∞']}\n"
            f"üè≠ –ò–∑–≥–æ—Ç–æ–≤–∏—Ç–µ–ª—å: {row['–∏–∑–≥–æ—Ç–æ–≤–∏—Ç–µ–ª—å']}\n"
            f"‚öô OEM: {row['oem']}"
        )

    # –û–±–Ω–æ–≤–ª—è–µ–º offset
    state["offset"] += 5

    # –ï—Å–ª–∏ –µ—â—ë –µ—Å—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    if state["offset"] < len(results):
        await update.message.reply_text("–ù–∞–ø–∏—à–∏—Ç–µ /more –¥–ª—è —Å–ª–µ–¥—É—é—â–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.")
    else:
        await update.message.reply_text("–ë–æ–ª—å—à–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–µ—Ç.")

def main():
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("more", more))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, search))

    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    app.run_polling()

if __name__ == "__main__":
    main()
