import logging
import os
import pickle
import json
import gspread
import re
from google.oauth2.service_account import Credentials
from telegram import Update, InputFile
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    filters,
    ContextTypes,
)
from pandas import DataFrame

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
SCOPES = ["https://www.googleapis.com/auth/spreadsheets.readonly"]
SPREADSHEET_URL = os.getenv("SPREADSHEET_URL")
SHEET_NAME = "SAP"

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
def load_data():
    creds_info = json.loads(os.getenv("GOOGLE_APPLICATION_CREDENTIALS_JSON"))
    creds = Credentials.from_service_account_info(creds_info, scopes=SCOPES)
    client = gspread.authorize(creds)
    sheet = client.open_by_url(SPREADSHEET_URL).worksheet(SHEET_NAME)
    return sheet.get_all_records()

raw_data = load_data()
df = DataFrame(raw_data)
df.columns = df.columns.str.strip().str.lower()
df["–∫–æ–¥"] = df["–∫–æ–¥"].astype(str).str.strip().str.lower()
df["image"] = df["image"].astype(str).str.strip() if "image" in df.columns else ""

# –°–æ—Å—Ç–æ—è–Ω–∏–µ
user_state = {}
search_count = {}

if os.path.exists("state.pkl"):
    with open("state.pkl", "rb") as f:
        user_state = pickle.load(f)

def normalize(text: str) -> str:
    return re.sub(r'[\W_]+', '', text.lower())

# üîç –ü–æ–∏—Å–∫ —Ñ–æ—Ç–æ –ø–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—é –∫–æ–¥–∞ –≤ —Å—Å—ã–ª–∫–µ
def find_image_url_by_code(code: str) -> str:
    code = code.lower()
    for url in df["image"]:
        if code in url.lower():
            return url
    return ""

def format_row(row):
    return (
        f"üîπ –¢–∏–ø: {row.get('—Ç–∏–ø', '')}\n"
        f"üì¶ –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ: {row.get('–Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ', '')}\n"
        f"üî¢ –ö–æ–¥: {row.get('–∫–æ–¥', '')}\n"
        f"üì¶ –ö–æ–ª-–≤–æ: {row.get('–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ', '')}\n"
        f"üí∞ –¶–µ–Ω–∞: {row.get('—Ü–µ–Ω–∞', '')} {row.get('–≤–∞–ª—é—Ç–∞', '')}\n"
        f"üè≠ –ò–∑–≥–æ—Ç–æ–≤–∏—Ç–µ–ª—å: {row.get('–∏–∑–≥–æ—Ç–æ–≤–∏—Ç–µ–ª—å', '')}\n"
        f"‚öôÔ∏è OEM: {row.get('oem', '')}"
    )

# –§–æ—Ç–æ + —Ç–µ–∫—Å—Ç
async def send_row_with_image(update: Update, row, text: str):
    code = row.get("–∫–æ–¥", "").strip().lower()
    image_url = find_image_url_by_code(code)
    try:
        if image_url:
            await update.message.reply_photo(photo=image_url, caption=text[:1024])
        else:
            await update.message.reply_text(text)
    except Exception as e:
        logger.error(f"[–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ] {e}")
        await update.message.reply_text(text)

# –ö–æ–º–∞–Ω–¥—ã
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user_state.pop(user_id, None)
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –ù–∞–ø–∏—à–∏ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ, –∏ —è –Ω–∞–π–¥—É –Ω—É–∂–Ω—É—é –¥–µ—Ç–∞–ª—å.")

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üìò –ö–æ–º–∞–Ω–¥—ã:\n"
        "/start ‚Äî —Å–±—Ä–æ—Å –ø–æ–∏—Å–∫–∞\n"
        "/more ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –µ—â—ë\n"
        "/help ‚Äî —Å–ø—Ä–∞–≤–∫–∞\n"
        "/export ‚Äî —ç–∫—Å–ø–æ—Ä—Ç\n"
        "/stats ‚Äî —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"
    )

async def more(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    state = user_state.get(user_id)
    if not state:
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –ø–æ–∏—Å–∫.")
        return
    query, offset, results = state["query"], state["offset"], state["results"]
    page = results.iloc[offset: offset + 5]
    for _, row in page.iterrows():
        text = format_row(row)
        await send_row_with_image(update, row, text)
    offset += 5
    user_state[user_id]["offset"] = offset
    if offset < len(results):
        await update.message.reply_text("–ù–∞–ø–∏—à–∏—Ç–µ /more –¥–ª—è —Å–ª–µ–¥—É—é—â–∏—Ö.")
    else:
        await update.message.reply_text("–≠—Ç–æ –≤—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã.")

async def export(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    state = user_state.get(user_id)
    if not state:
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –ø–æ–∏—Å–∫.")
        return
    filename = f"export_{user_id}.xlsx"
    state["results"].to_excel(filename, index=False)
    with open(filename, "rb") as f:
        await update.message.reply_document(InputFile(f, filename))
    os.remove(filename)

async def stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    count = search_count.get(user_id, 0)
    await update.message.reply_text(f"üîç –ü–æ–∏—Å–∫–æ–≤ –∑–∞ —Å–µ—Å—Å–∏—é: {count}")

# –ü–æ–∏—Å–∫
async def search(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    query = update.message.text.strip().lower()
    norm_query = normalize(query)

    mask = df.apply(
        lambda row: any(norm_query in normalize(str(value)) for value in [
            row.get("—Ç–∏–ø", ""), row.get("–Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ", ""), row.get("–∫–æ–¥", ""),
            row.get("oem", ""), row.get("–∏–∑–≥–æ—Ç–æ–≤–∏—Ç–µ–ª—å", "")
        ]),
        axis=1
    )
    results = df[mask]

    if results.empty:
        await update.message.reply_text(f'–ü–æ –∑–∞–ø—Ä–æ—Å—É "{query}" –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.')
        return

    search_count[user_id] = search_count.get(user_id, 0) + 1
    user_state[user_id] = {"query": query, "offset": 5, "results": results}

    for _, row in results.head(5).iterrows():
        text = format_row(row)
        await send_row_with_image(update, row, text)

    if len(results) > 5:
        await update.message.reply_text("–ü–æ–∫–∞–∑–∞–Ω—ã –ø–µ—Ä–≤—ã–µ 5. –ù–∞–ø–∏—à–∏—Ç–µ /more –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è.")

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞
async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE):
    logger.error("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞:", exc_info=context.error)
    if isinstance(update, Update) and update.message:
        await update.message.reply_text("‚ùå –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –ø–æ–∑–∂–µ.")

# –ó–∞–ø—É—Å–∫
def main():
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(CommandHandler("more", more))
    app.add_handler(CommandHandler("export", export))
    app.add_handler(CommandHandler("stats", stats))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, search))
    app.add_error_handler(error_handler)
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    app.run_polling()
    with open("state.pkl", "wb") as f:
        pickle.dump(user_state, f)

if __name__ == "__main__":
    main()
